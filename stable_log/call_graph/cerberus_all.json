{
    "docs.conf": [
        "importlib.util.module_from_spec",
        "alabaster.get_path",
        "pathlib.Path",
        "<builtin>.__import__",
        "<builtin>.RuntimeError",
        "importlib.util.spec_from_file_location.loader.exec_module",
        "importlib.util.spec_from_file_location",
    ],
    "<builtin>.RuntimeError": [],
    "pathlib.Path": [],
    "importlib.util.spec_from_file_location": [],
    "importlib.util.module_from_spec": [],
    "importlib.util.spec_from_file_location.loader.exec_module": [],
    "<builtin>.__import__": [],
    "alabaster.get_path": [],
    "docs.includes.generate": [
        "operator.attrgetter",
        "pathlib.Path",
        "pathlib.Path.parent.resolve",
        "textwrap.indent",
        "<builtin>.isinstance",
        "docs.includes.generate.load_module_members",
        "pathlib.Path.parent.resolve.open",
        "<builtin>.print",
        "<builtin>.hex",
        "pprint.pformat",
        "types.SimpleNamespace",
    ],
    "pathlib.Path.parent.resolve": [],
    "docs.includes.generate.load_module_members": [
        "<builtin>.vars",
        "importlib.util.module_from_spec",
        "importlib.util.spec_from_file_location.loader.exec_module",
        "importlib.util.spec_from_file_location",
    ],
    "<builtin>.vars": [],
    "<builtin>.isinstance": [],
    "types.SimpleNamespace": [],
    "operator.attrgetter": [],
    "pathlib.Path.parent.resolve.open": [],
    "<builtin>.print": [],
    "<builtin>.hex": [],
    "pprint.pformat": [],
    "textwrap.indent": [],
    "setup": [
        "setuptools.find_packages",
        "<builtin>.any",
        "setuptools.setup",
        "<builtin>.open",
        "collections.OrderedDict",
    ],
    "<builtin>.open": [],
    "<builtin>.any": [],
    "collections.OrderedDict": [],
    "setuptools.find_packages": [],
    "setuptools.setup": [],
    "cerberus.validator": [],
    "cerberus.validator.Validator.allow_unknown": [
        "<builtin>.isinstance",
        "cerberus.schema.ValidatedSchema.__init__",
        "cerberus.base.normalize_rulesset",
    ],
    "cerberus.base.normalize_rulesset": [
        "cerberus.base._expand_generic_type_aliases",
        "<builtin>.dict",
        "cerberus.base._normalize_contained_rulessets",
        "<builtin>.isinstance",
        "cerberus.utils.schema_hash",
        "cerberus.base._expand_composed_of_rules",
    ],
    "cerberus.schema.ValidatedSchema.__init__": [
        "cerberus.schema.ValidatedSchema.regenerate_validation_schema",
        "cerberus.schema.ValidatedSchema.validate",
        "cerberus.base.normalize_schema",
        "cerberus.schema.SchemaValidator.__init__",
        "<builtin>.isinstance",
        "<builtin>.RuntimeError",
    ],
    "cerberus.validator.Validator.schema": [
        "<builtin>.isinstance",
        "cerberus.schema.ValidatedSchema.__init__",
    ],
    "cerberus.base": [
        "cerberus.errors.BaseErrorHandler.__init__",
        "cerberus.base.Registry.__init__",
        "typing.NamedTuple",
    ],
    "cerberus.errors.BaseErrorHandler.__init__": [],
    "cerberus.base.dummy_for_rule_validation": [],
    "cerberus.base.dummy_for_rule_validation.dummy": ["<builtin>.RuntimeError"],
    "cerberus.utils.schema_hash": [
        "cerberus.utils.mapping_to_frozenset",
        "<builtin>.hash",
    ],
    "<builtin>.dict": [],
    "cerberus.base._expand_generic_type_aliases": [
        "<builtin>.issubclass",
        "typing.get_origin",
        "cerberus.base._flatten_Union_and_Optional",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "typing.get_args",
    ],
    "cerberus.base._expand_composed_of_rules": ["<builtin>.tuple"],
    "cerberus.base._normalize_contained_rulessets": [
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "cerberus.base.normalize_rulesset",
        "cerberus.base.normalize_schema",
    ],
    "cerberus.base.normalize_schema": ["cerberus.base.normalize_rulesset"],
    "cerberus.base._flatten_Union_and_Optional": [
        "typing.get_args",
        "typing.get_origin",
        "cerberus.base._flatten_Union_and_Optional",
    ],
    "typing.get_origin": [],
    "typing.get_args": [],
    "<builtin>.issubclass": [],
    "<builtin>.tuple": [],
    "cerberus.base.Registry.__init__": ["cerberus.base.Registry.extend"],
    "cerberus.base.Registry.extend": ["<builtin>.dict", "cerberus.base.Registry.add"],
    "cerberus.base.Registry.add": ["<builtin>.isinstance", "<builtin>.TypeError"],
    "<builtin>.TypeError": [],
    "cerberus.base.Registry.all": [],
    "cerberus.base.Registry.clear": [],
    "cerberus.base.Registry.get": [],
    "cerberus.base.Registry.remove": [],
    "<builtin>.staticmethod": [],
    "cerberus.base.SchemaRegistry": ["<builtin>.staticmethod"],
    "cerberus.base.RulesSetRegistry": ["<builtin>.staticmethod"],
    "typing.NamedTuple": [],
    "cerberus.base.ValidatorMeta.__new__": ["<builtin>.super"],
    "<builtin>.super": [],
    "cerberus.base.ValidatorMeta.__init__": [
        "collections.ChainMap",
        "cerberus.base.ValidatorMeta.__get_rule_schema",
        "<builtin>.super",
        "cerberus.base.normalize_schema",
        "<builtin>.tuple",
        "cerberus.base.ValidatorMeta.__init__.attributes_with_prefix",
        "<builtin>.len",
    ],
    "cerberus.base.ValidatorMeta.__init__.attributes_with_prefix": [
        "<builtin>.dir",
        "<builtin>.tuple",
        "<builtin>.len",
    ],
    "<builtin>.len": [],
    "<builtin>.dir": [],
    "cerberus.base.ValidatorMeta.__get_rule_schema": [
        "<builtin>.getattr",
        "ast.literal_eval",
        "warnings.warn",
    ],
    "collections.ChainMap": [],
    "<builtin>.getattr": [],
    "ast.literal_eval": [],
    "warnings.warn": [],
    "cerberus.base.UnconcernedValidator": [
        "typing.NamedTuple",
        "<builtin>.set",
        "cerberus.utils.readonly_classproperty",
        "<builtin>.getattr",
        "cerberus.base.dummy_for_rule_validation",
        "copy.deepcopy.setter",
    ],
    "<builtin>.set": [],
    "cerberus.base.UnconcernedValidator.__init__": [
        "<builtin>.super",
        "cerberus.base.UnconcernedValidator.__init_error_handler",
    ],
    "cerberus.base.UnconcernedValidator.__init_error_handler": [
        "<builtin>.RuntimeError",
        "<builtin>.isinstance",
        "<builtin>.issubclass",
    ],
    "cerberus.base.UnconcernedValidator.clear_caches": [],
    "cerberus.base.UnconcernedValidator._error": [
        "cerberus.base.UnconcernedValidator._resolve_rules_set.<RETURN>.get",
        "cerberus.base.UnconcernedValidator._error",
        "copy.deepcopy.get.get",
        "cerberus.base.UnconcernedValidator._resolve_rules_set",
        "<builtin>.isinstance",
        "<builtin>.len",
    ],
    "cerberus.base.UnconcernedValidator._resolve_rules_set": ["<builtin>.isinstance"],
    "copy.deepcopy.get.get": [],
    "cerberus.base.UnconcernedValidator._resolve_rules_set.<RETURN>.get": [],
    "cerberus.base.UnconcernedValidator._get_child_validator": [
        "collections.ChainMap.new_child",
        "<builtin>.isinstance",
        "collections.ChainMap",
    ],
    "collections.ChainMap.new_child": [],
    "cerberus.base.UnconcernedValidator.__get_rule_handler": [
        "<builtin>.RuntimeError",
        "<builtin>.getattr",
    ],
    "cerberus.base.UnconcernedValidator._drop_nodes_from_errorpaths": [
        "cerberus.base.UnconcernedValidator._drop_nodes_from_errorpaths",
        "cerberus.utils.drop_item_from_tuple",
        "<builtin>.sorted",
        "<builtin>.len",
    ],
    "<builtin>.sorted": [],
    "cerberus.utils.drop_item_from_tuple": [],
    "cerberus.base.UnconcernedValidator._lookup_field": [],
    "cerberus.base.UnconcernedValidator._resolve_schema": ["<builtin>.isinstance"],
    "cerberus.base.UnconcernedValidator.allow_unknown": [
        "<builtin>.isinstance",
        "cerberus.base.normalize_rulesset",
    ],
    "cerberus.base.UnconcernedValidator.errors": [],
    "cerberus.base.UnconcernedValidator.ignore_none_values": [],
    "cerberus.base.UnconcernedValidator.is_child": [],
    "cerberus.base.UnconcernedValidator._is_normalized": [],
    "cerberus.base.UnconcernedValidator.purge_unknown": [],
    "cerberus.base.UnconcernedValidator.purge_readonly": [],
    "cerberus.base.UnconcernedValidator.require_all": [],
    "cerberus.base.UnconcernedValidator.root_allow_unknown": [],
    "cerberus.base.UnconcernedValidator.root_require_all": [],
    "cerberus.base.UnconcernedValidator.root_document": [],
    "cerberus.base.UnconcernedValidator.rules_set_registry": [],
    "cerberus.base.UnconcernedValidator.root_schema": [],
    "cerberus.base.UnconcernedValidator.schema": ["cerberus.base.normalize_schema"],
    "copy.deepcopy.setter": [],
    "cerberus.base.UnconcernedValidator.schema_registry": [],
    "cerberus.utils.readonly_classproperty": [],
    "cerberus.base.UnconcernedValidator.types": ["<builtin>.tuple"],
    "cerberus.base.UnconcernedValidator.__init_processing": ["<builtin>.isinstance"],
    "cerberus.base.UnconcernedValidator._drop_remaining_rules": [],
    "cerberus.base.UnconcernedValidator.normalized": [
        "cerberus.base.UnconcernedValidator.__init_processing",
        "cerberus.base.UnconcernedValidator.__normalize_mapping",
    ],
    "cerberus.base.UnconcernedValidator.__normalize_mapping": [
        "cerberus.base.UnconcernedValidator.__normalize_purge_readonly",
        "cerberus.base.UnconcernedValidator.__validate_readonly_fields",
        "cerberus.base.UnconcernedValidator._normalize_coerce",
        "cerberus.base.UnconcernedValidator._resolve_schema",
        "cerberus.base.UnconcernedValidator.__normalize_default_fields",
        "cerberus.base.UnconcernedValidator._resolve_rules_set",
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator.__normalize_containers",
        "copy.deepcopy.items",
        "cerberus.base.UnconcernedValidator._normalize_purge_unknown",
        "cerberus.base.UnconcernedValidator.__normalize_rename_fields",
    ],
    "copy.deepcopy.items": [],
    "cerberus.base.UnconcernedValidator.__normalize_rename_fields": [
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator._normalize_rename_handler",
        "<builtin>.tuple",
        "cerberus.base.UnconcernedValidator._normalize_rename",
    ],
    "cerberus.base.UnconcernedValidator._normalize_purge_unknown": [],
    "cerberus.base.UnconcernedValidator.__normalize_purge_readonly": [
        "copy.deepcopy.get"
    ],
    "cerberus.base.UnconcernedValidator.__validate_readonly_fields": [
        "cerberus.base.UnconcernedValidator._resolve_rules_set",
        "cerberus.base.UnconcernedValidator._validate_readonly",
    ],
    "cerberus.base.UnconcernedValidator.__normalize_default_fields": [
        "cerberus.base.UnconcernedValidator._error",
        "<builtin>.set",
        "cerberus.base.UnconcernedValidator._normalize_default",
        "cerberus.base.UnconcernedValidator._normalize_default_setter",
        "<builtin>.tuple",
        "<builtin>.hash",
        "<builtin>.str",
    ],
    "cerberus.base.UnconcernedValidator._normalize_coerce": [
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator.__normalize_coerce",
    ],
    "cerberus.base.UnconcernedValidator.__normalize_containers": [
        "cerberus.base.UnconcernedValidator.__normalize_mapping_per_schema",
        "<builtin>.set",
        "<builtin>.any",
        "<builtin>.isinstance",
        "copy.deepcopy.get",
        "cerberus.base.UnconcernedValidator.__normalize_mapping_per_keysrules",
        "cerberus.base.UnconcernedValidator.__normalize_mapping_per_valuesrules",
        "cerberus.base.UnconcernedValidator.__normalize_sequence_per_itemsrules",
        "cerberus.base.UnconcernedValidator.__normalize_sequence_per_items",
    ],
    "cerberus.base.UnconcernedValidator.__normalize_coerce": [
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.base.UnconcernedValidator.__get_rule_handler",
        "<builtin>.isinstance",
        "<builtin>.str",
        "cerberus.base.UnconcernedValidator.__normalize_coerce",
    ],
    "<builtin>.str": [],
    "copy.deepcopy.get": [],
    "cerberus.base.UnconcernedValidator.__normalize_mapping_per_keysrules": [
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.base.UnconcernedValidator._get_child_validator",
        "warnings.warn",
        "cerberus.base.UnconcernedValidator._drop_nodes_from_errorpaths",
        "<builtin>.str",
    ],
    "cerberus.base.UnconcernedValidator.__normalize_mapping_per_valuesrules": [
        "cerberus.base.UnconcernedValidator._drop_nodes_from_errorpaths",
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.base.UnconcernedValidator._get_child_validator",
    ],
    "cerberus.base.UnconcernedValidator.__normalize_mapping_per_schema": [
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.base.UnconcernedValidator._get_child_validator",
        "<builtin>.isinstance",
        "copy.deepcopy.get",
        "<builtin>.type",
    ],
    "cerberus.base.UnconcernedValidator.__normalize_sequence_per_itemsrules": [
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.base.UnconcernedValidator._get_child_validator",
        "<builtin>.range",
        "cerberus.base.UnconcernedValidator._drop_nodes_from_errorpaths",
        "<builtin>.type",
        "<builtin>.enumerate",
        "<builtin>.len",
    ],
    "cerberus.base.UnconcernedValidator.__normalize_sequence_per_items": [
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.base.UnconcernedValidator._get_child_validator",
        "cerberus.base.UnconcernedValidator._drop_nodes_from_errorpaths",
        "<builtin>.type",
        "<builtin>.enumerate",
        "<builtin>.len",
    ],
    "<builtin>.type": [],
    "<builtin>.enumerate": [],
    "<builtin>.range": [],
    "cerberus.base.UnconcernedValidator._normalize_rename": [],
    "cerberus.base.UnconcernedValidator._normalize_rename_handler": [
        "cerberus.base.UnconcernedValidator.__normalize_coerce"
    ],
    "cerberus.base.UnconcernedValidator._validate_readonly": [
        "cerberus.base.UnconcernedValidator._drop_remaining_rules",
        "cerberus.base.UnconcernedValidator._error",
    ],
    "cerberus.base.UnconcernedValidator._normalize_default": [],
    "cerberus.base.UnconcernedValidator._normalize_default_setter": [
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator.__get_rule_handler",
    ],
    "<builtin>.hash": [],
    "cerberus.base.UnconcernedValidator.validate": [
        "cerberus.base.UnconcernedValidator.__validate_definitions",
        "<builtin>.set",
        "cerberus.base.UnconcernedValidator.__validate_unknown_fields",
        "cerberus.base.UnconcernedValidator.__normalize_mapping",
        "cerberus.base.UnconcernedValidator.__init_processing",
        "cerberus.base.UnconcernedValidator.__validate_required_fields",
        "copy.deepcopy.get",
        "<builtin>.bool",
    ],
    "cerberus.base.UnconcernedValidator.__validate_definitions": [
        "cerberus.base.UnconcernedValidator._resolve_rules_set",
        "cerberus.base.UnconcernedValidator._resolve_rules_set.<RETURN>.get",
        "copy.deepcopy.get.get",
        "cerberus.base.UnconcernedValidator.__get_rule_handler",
    ],
    "cerberus.base.UnconcernedValidator.__validate_unknown_fields": [
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.base.UnconcernedValidator._get_child_validator",
    ],
    "cerberus.base.UnconcernedValidator.__validate_required_fields": [
        "cerberus.base.UnconcernedValidator._resolve_rules_set",
        "copy.deepcopy.items",
        "cerberus.base.UnconcernedValidator._error",
        "<builtin>.set",
    ],
    "<builtin>.bool": [],
    "cerberus.base.UnconcernedValidator.validated": [
        "cerberus.base.UnconcernedValidator.validate"
    ],
    "cerberus.base.UnconcernedValidator._validate_allowed": [
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "cerberus.base.UnconcernedValidator._error",
    ],
    "cerberus.base.UnconcernedValidator._validate_check_with": [
        "cerberus.base.UnconcernedValidator._validate_check_with",
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator.__get_rule_handler",
    ],
    "cerberus.base.UnconcernedValidator._validate_contains": [
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator._error",
        "<builtin>.set",
    ],
    "cerberus.base.UnconcernedValidator._validate_dependencies": [
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator.__validate_dependencies_sequence",
        "cerberus.base.UnconcernedValidator.__validate_dependencies_mapping",
    ],
    "cerberus.base.UnconcernedValidator.__validate_dependencies_sequence": [
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.base.UnconcernedValidator._lookup_field",
    ],
    "cerberus.base.UnconcernedValidator.__validate_dependencies_mapping": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.base.UnconcernedValidator._lookup_field",
    ],
    "cerberus.base.UnconcernedValidator._validate_empty": [
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator._drop_remaining_rules",
        "cerberus.base.UnconcernedValidator._error",
        "<builtin>.len",
    ],
    "cerberus.base.UnconcernedValidator._validate_excludes": [
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator._error",
        "<builtin>.any",
    ],
    "cerberus.base.UnconcernedValidator._validate_forbidden": [
        "<builtin>.isinstance",
        "<builtin>.list",
        "cerberus.base.UnconcernedValidator._error",
        "<builtin>.set",
    ],
    "<builtin>.list": [],
    "cerberus.base.UnconcernedValidator._validate_items": [
        "cerberus.base.UnconcernedValidator._get_child_validator",
        "cerberus.base.UnconcernedValidator._error",
        "<builtin>.enumerate",
        "<builtin>.len",
    ],
    "cerberus.base.UnconcernedValidator._validate_itemsrules": [
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.base.UnconcernedValidator._get_child_validator",
        "<builtin>.range",
        "cerberus.base.UnconcernedValidator._drop_nodes_from_errorpaths",
        "<builtin>.isinstance",
        "<builtin>.enumerate",
        "<builtin>.len",
    ],
    "cerberus.base.UnconcernedValidator.__validate_logical": [
        "cerberus.base.UnconcernedValidator._drop_nodes_from_errorpaths",
        "cerberus.base.UnconcernedValidator._get_child_validator",
        "<builtin>.enumerate",
    ],
    "cerberus.base.UnconcernedValidator._validate_anyof": [
        "cerberus.base.UnconcernedValidator.__validate_logical",
        "cerberus.base.UnconcernedValidator._error",
        "<builtin>.len",
    ],
    "cerberus.base.UnconcernedValidator._validate_allof": [
        "cerberus.base.UnconcernedValidator.__validate_logical",
        "cerberus.base.UnconcernedValidator._error",
        "<builtin>.len",
    ],
    "cerberus.base.UnconcernedValidator._validate_noneof": [
        "cerberus.base.UnconcernedValidator.__validate_logical",
        "cerberus.base.UnconcernedValidator._error",
        "<builtin>.len",
    ],
    "cerberus.base.UnconcernedValidator._validate_oneof": [
        "cerberus.base.UnconcernedValidator.__validate_logical",
        "cerberus.base.UnconcernedValidator._error",
        "<builtin>.len",
    ],
    "cerberus.base.UnconcernedValidator._validate_max": [
        "cerberus.base.UnconcernedValidator._error"
    ],
    "cerberus.base.UnconcernedValidator._validate_min": [
        "cerberus.base.UnconcernedValidator._error"
    ],
    "cerberus.base.UnconcernedValidator._validate_maxlength": [
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator._error",
        "<builtin>.len",
    ],
    "cerberus.base.UnconcernedValidator._validate_minlength": [
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator._error",
        "<builtin>.len",
    ],
    "cerberus.base.UnconcernedValidator._validate_nullable": [
        "cerberus.base.UnconcernedValidator._drop_remaining_rules",
        "cerberus.base.UnconcernedValidator._error",
    ],
    "cerberus.base.UnconcernedValidator._validate_keysrules": [
        "cerberus.base.UnconcernedValidator._drop_nodes_from_errorpaths",
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.base.UnconcernedValidator._get_child_validator",
    ],
    "cerberus.base.UnconcernedValidator._validate_regex": [
        "re.compile",
        "<builtin>.isinstance",
        "re.compile.match",
        "cerberus.base.UnconcernedValidator._error",
    ],
    "re.compile": [],
    "re.compile.match": [],
    "cerberus.base.UnconcernedValidator._validate_schema": [
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator._resolve_schema",
        "cerberus.base.UnconcernedValidator._get_child_validator",
        "cerberus.base.UnconcernedValidator._error",
    ],
    "cerberus.base.UnconcernedValidator._validate_type": [
        "cerberus.base.UnconcernedValidator._drop_remaining_rules",
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator._error",
    ],
    "cerberus.base.UnconcernedValidator._validate_valuesrules": [
        "cerberus.base.UnconcernedValidator._drop_nodes_from_errorpaths",
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.base.UnconcernedValidator._get_child_validator",
    ],
    "cerberus.errors": ["cerberus.errors.ErrorDefinition.__init__"],
    "cerberus.errors.ErrorDefinition.__init__": [],
    "cerberus.errors.ValidationError.__init__": [],
    "cerberus.errors.ValidationError.__eq__": ["<builtin>.hash"],
    "cerberus.errors.ValidationError.__hash__": ["<builtin>.hash"],
    "cerberus.errors.ValidationError.__lt__": ["cerberus.utils.compare_paths_lt"],
    "cerberus.utils.compare_paths_lt": [
        "<builtin>.isinstance",
        "<builtin>.min",
        "<builtin>.range",
        "<builtin>.len",
    ],
    "cerberus.errors.ValidationError.__repr__": [
        "cerberus.utils.quote_string",
        "<builtin>.id",
        "<builtin>.hex",
    ],
    "<builtin>.id": [],
    "cerberus.utils.quote_string": ["<builtin>.isinstance"],
    "cerberus.errors.ValidationError.child_errors": [],
    "cerberus.errors.ValidationError.definitions_errors": [
        "<builtin>.len",
        "collections.defaultdict",
    ],
    "collections.defaultdict": [],
    "cerberus.errors.ValidationError.field": [],
    "cerberus.errors.ValidationError.is_group_error": ["<builtin>.bool"],
    "cerberus.errors.ValidationError.is_logic_error": ["<builtin>.bool"],
    "cerberus.errors.ValidationError.is_normalization_error": ["<builtin>.bool"],
    "cerberus.errors.ErrorList.__contains__": ["<builtin>.isinstance", "<builtin>.any"],
    "cerberus.errors.ErrorTreeNode.__init__": [],
    "cerberus.errors.ErrorTreeNode.__contains__": ["<builtin>.isinstance"],
    "cerberus.errors.ErrorTreeNode.__delitem__": [],
    "cerberus.errors.ErrorTreeNode.__iter__": ["<builtin>.iter"],
    "<builtin>.iter": [],
    "cerberus.errors.ErrorTreeNode.__getitem__": ["<builtin>.isinstance"],
    "cerberus.errors.ErrorTreeNode.__len__": ["<builtin>.len"],
    "cerberus.errors.ErrorTreeNode.__repr__": ["cerberus.errors.ErrorTreeNode.__str__"],
    "cerberus.errors.ErrorTreeNode.__str__": ["<builtin>.str"],
    "cerberus.errors.ErrorTreeNode.__setitem__": [],
    "cerberus.errors.ErrorTreeNode.depth": ["<builtin>.len"],
    "cerberus.errors.ErrorTreeNode.tree_type": [],
    "cerberus.errors.ErrorTreeNode.add": [
        "cerberus.errors.ErrorTreeNode.__init__",
        "typing.cast.errors.append",
        "cerberus.errors.ErrorTreeNode._path_of_",
        "typing.cast.add",
        "cerberus.errors.ErrorTree.add",
        "typing.cast",
        "typing.cast.errors.sort",
        "<builtin>.len",
    ],
    "cerberus.errors.ErrorTreeNode._path_of_": ["<builtin>.getattr"],
    "typing.cast": [],
    "typing.cast.errors.append": [],
    "typing.cast.errors.sort": [],
    "cerberus.errors.ErrorTree.add": [
        "cerberus.errors.ErrorTreeNode._path_of_",
        "<builtin>.super",
    ],
    "typing.cast.add": [],
    "cerberus.errors.ErrorTree.__init__": ["cerberus.errors.ErrorTree.add"],
    "cerberus.errors.ErrorTree.fetch_errors_from": [
        "cerberus.errors.ErrorTree.fetch_node_from"
    ],
    "cerberus.errors.ErrorTree.fetch_node_from": ["typing.MutableMapping.get"],
    "typing.MutableMapping.get": [],
    "cerberus.errors.BaseErrorHandler": ["abc.abstractmethod"],
    "abc.abstractmethod": [],
    "cerberus.errors.BaseErrorHandler.__call__": [],
    "cerberus.errors.BaseErrorHandler.__iter__": [],
    "cerberus.errors.BaseErrorHandler.add": [],
    "cerberus.errors.BaseErrorHandler.emit": [],
    "cerberus.errors.BaseErrorHandler.end": [],
    "cerberus.errors.BaseErrorHandler.extend": [
        "cerberus.errors.BaseErrorHandler.add",
        "cerberus.errors.BasicErrorHandler.add",
        "cerberus.errors.ToyErrorHandler.__call__",
    ],
    "cerberus.errors.BasicErrorHandler.add": [
        "cerberus.errors.BasicErrorHandler._format_message",
        "cerberus.errors.BasicErrorHandler._insert_error",
        "cerberus.errors.BasicErrorHandler._insert_logic_error",
        "cerberus.errors.BasicErrorHandler._insert_group_error",
        "cerberus.errors.BasicErrorHandler._rewrite_error_path",
        "copy.deepcopy",
    ],
    "cerberus.errors.ToyErrorHandler.__call__": ["<builtin>.RuntimeError"],
    "cerberus.errors.BaseErrorHandler.start": [],
    "cerberus.errors.BasicErrorHandler.__init__": [],
    "cerberus.errors.BasicErrorHandler.__call__": [
        "cerberus.errors.BasicErrorHandler.clear",
        "cerberus.errors.BaseErrorHandler.extend",
    ],
    "cerberus.errors.BasicErrorHandler.clear": [],
    "cerberus.errors.BasicErrorHandler.__str__": ["pprint.pformat"],
    "cerberus.errors.BasicErrorHandler.pretty_tree": [
        "cerberus.errors.BasicErrorHandler._purge_empty_dicts",
        "copy.deepcopy",
    ],
    "copy.deepcopy": [],
    "cerberus.errors.BasicErrorHandler._purge_empty_dicts": [
        "cerberus.errors.BasicErrorHandler._purge_empty_dicts"
    ],
    "cerberus.errors.BasicErrorHandler._rewrite_error_path": [
        "cerberus.errors.BasicErrorHandler._rewrite_group_error_path",
        "cerberus.errors.BasicErrorHandler._rewrite_logic_error_path",
    ],
    "cerberus.errors.BasicErrorHandler._insert_logic_error": [
        "cerberus.errors.BasicErrorHandler._format_message",
        "cerberus.errors.BasicErrorHandler._insert_error",
        "cerberus.errors.BasicErrorHandler._insert_logic_error",
        "copy.deepcopy.child_errors.definitions_errors.values",
        "cerberus.errors.BasicErrorHandler._insert_group_error",
        "copy.deepcopy.definitions_errors.values",
    ],
    "cerberus.errors.BasicErrorHandler._insert_group_error": [
        "cerberus.errors.BasicErrorHandler._insert_group_error",
        "cerberus.errors.BasicErrorHandler._format_message",
        "cerberus.errors.BasicErrorHandler._insert_logic_error",
        "cerberus.errors.BasicErrorHandler._insert_error",
    ],
    "cerberus.errors.BasicErrorHandler._format_message": [],
    "cerberus.errors.BasicErrorHandler._insert_error": [
        "abc.ABC.__class__._insert_error",
        "copy.copy",
        "abc.ABC.__class__",
        "<builtin>.len",
    ],
    "cerberus.errors.BasicErrorHandler.start": [
        "cerberus.errors.BasicErrorHandler.clear"
    ],
    "copy.copy": [],
    "abc.ABC.__class__": [],
    "abc.ABC.__class__._insert_error": [],
    "copy.deepcopy.definitions_errors.values": [],
    "copy.deepcopy.child_errors.definitions_errors.values": [],
    "cerberus.errors.BasicErrorHandler._rewrite_logic_error_path": [
        "cerberus.errors.BasicErrorHandler._rewrite_error_path",
        "copy.deepcopy.definitions_errors.items",
        "copy.deepcopy.child_errors.definitions_errors.items",
        "<builtin>.len",
    ],
    "cerberus.errors.BasicErrorHandler._rewrite_group_error_path": [
        "cerberus.errors.BasicErrorHandler._rewrite_error_path",
        "<builtin>.len",
    ],
    "copy.deepcopy.definitions_errors.items": [],
    "copy.deepcopy.child_errors.definitions_errors.items": [],
    "cerberus.typing": ["typing.TypeVar", "<builtin>.type"],
    "typing.TypeVar": [],
    "cerberus.schema": [],
    "cerberus.schema.SchemaValidator.__init__": ["<builtin>.super", "<builtin>.set"],
    "cerberus.schema.SchemaValidator.known_rules_set_refs": [],
    "cerberus.schema.SchemaValidator.known_schema_refs": [],
    "cerberus.schema.SchemaValidator.target_validator": [],
    "cerberus.schema.SchemaValidator._check_with_dependencies": [
        "<builtin>.isinstance",
        "<builtin>.all",
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.base.UnconcernedValidator._get_child_validator",
    ],
    "<builtin>.all": [],
    "cerberus.schema.SchemaValidator._check_with_items": [
        "cerberus.schema.SchemaValidator._check_with_schema",
        "<builtin>.enumerate",
    ],
    "cerberus.schema.SchemaValidator._check_with_schema": [
        "cerberus.schema.SchemaValidator._expand_rules_set_refs",
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.base.UnconcernedValidator._get_child_validator",
        "<builtin>.isinstance",
        "cerberus.utils.schema_hash",
    ],
    "cerberus.schema.SchemaValidator._check_with_rulesset": [
        "cerberus.base.UnconcernedValidator._get_child_validator",
        "<builtin>.isinstance",
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.utils.schema_hash",
    ],
    "cerberus.schema.SchemaValidator._expand_rules_set_refs": ["<builtin>.isinstance"],
    "cerberus.schema.SchemaValidator._check_with_type_names": [
        "cerberus.base.UnconcernedValidator._error"
    ],
    "cerberus.schema.SchemaValidator._validate_logical": [
        "<builtin>.isinstance",
        "cerberus.utils.schema_hash",
        "cerberus.base.UnconcernedValidator._error",
        "cerberus.base.UnconcernedValidator._get_child_validator",
    ],
    "cerberus.schema.ValidatedSchema.regenerate_validation_schema": [],
    "cerberus.schema.ValidatedSchema.validate": [
        "cerberus.schema.ValidatedSchema._validate",
        "cerberus.utils.schema_hash",
    ],
    "cerberus.schema.ValidatedSchema.__delitem__": ["collections.ChainMap.pop"],
    "collections.ChainMap.pop": [],
    "cerberus.schema.ValidatedSchema.__getitem__": [],
    "cerberus.schema.ValidatedSchema.__iter__": ["<builtin>.iter"],
    "cerberus.schema.ValidatedSchema.__len__": ["<builtin>.len"],
    "cerberus.schema.ValidatedSchema.__repr__": ["<builtin>.str"],
    "cerberus.schema.ValidatedSchema.__setitem__": [
        "cerberus.schema.ValidatedSchema.validate",
        "cerberus.base.normalize_rulesset",
    ],
    "cerberus.schema.ValidatedSchema.__str__": [],
    "cerberus.schema.ValidatedSchema.copy": [
        "typing.MutableMapping.__class__",
        "collections.ChainMap.copy",
    ],
    "collections.ChainMap.copy": [],
    "typing.MutableMapping.__class__": [],
    "cerberus.schema.ValidatedSchema.update": [
        "<builtin>.isinstance",
        "collections.ChainMap",
        "cerberus.schema.ValidatedSchema.validate",
        "<builtin>.TypeError",
    ],
    "cerberus.schema.ValidatedSchema._validate": [
        "cerberus.schema.SchemaValidator.__init__",
        "<builtin>.isinstance",
        "collections.ChainMap",
        "collections.ChainMap.items",
    ],
    "collections.ChainMap.items": [],
    "cerberus.platform": [],
    "cerberus.platform.get_type_args": ["<builtin>.isinstance"],
    "cerberus.platform.get_type_origin": ["<builtin>.isinstance"],
    "cerberus.utils": [],
    "<builtin>.min": [],
    "cerberus.utils.mapping_to_frozenset": [
        "cerberus.utils.mapping_to_frozenset",
        "<builtin>.frozenset",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<builtin>.TypeError",
        "<builtin>.enumerate",
        "<builtin>.list",
    ],
    "<builtin>.frozenset": [],
    "cerberus.utils.readonly_classproperty.__get__": ["<builtin>.super"],
    "cerberus.utils.readonly_classproperty.__set__": ["<builtin>.RuntimeError"],
    "cerberus.utils.readonly_classproperty.__delete__": ["<builtin>.RuntimeError"],
    "cerberus": ["pkg_resources.get_distribution"],
    "pkg_resources.get_distribution": [],
    "cerberus.validator_factory": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.len",
    ],
    "cerberus.tests.test_rule_valuesrules": [],
    "cerberus.tests.test_rule_valuesrules.test_valuesrules_succeds": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.assert_success": [
        "<builtin>.isinstance",
        "<builtin>.AssertionError",
        "cerberus.base.UnconcernedValidator.__init__",
        "cerberus.tests.test_customization.test_contextual_data_preservation.InheritedValidator.__init__",
    ],
    "cerberus.tests.test_rule_valuesrules.test_valuesrules_fails": [
        "cerberus.tests.assert_fail",
        "<builtin>.len",
    ],
    "cerberus.tests.assert_fail": [
        "cerberus.tests.assert_has_error",
        "cerberus.base.UnconcernedValidator.__init__",
        "<builtin>.isinstance",
        "<builtin>.len",
        "cerberus.tests.assert_has_errors",
    ],
    "cerberus.tests": [],
    "cerberus.tests.assert_exception": [
        "re.escape",
        "pytest.raises",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "pytest.raises": [],
    "re.escape": [],
    "cerberus.tests.assert_schema_error": ["cerberus.tests.assert_exception"],
    "cerberus.tests.assert_document_error": ["cerberus.tests.assert_exception"],
    "cerberus.tests.assert_has_error": ["<builtin>.isinstance", "<builtin>.enumerate"],
    "cerberus.tests.assert_has_errors": [
        "cerberus.tests.assert_has_error",
        "<builtin>.isinstance",
    ],
    "cerberus.tests.test_customization.test_contextual_data_preservation.InheritedValidator.__init__": [
        "<builtin>.super"
    ],
    "<builtin>.AssertionError": [],
    "cerberus.tests.assert_not_has_error": [
        "cerberus.tests.assert_has_error",
        "<builtin>.AssertionError",
    ],
    "cerberus.tests.assert_normalized": [
        "cerberus.tests.assert_success",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.conftest": ["pytest.fixture"],
    "pytest.fixture": [],
    "cerberus.tests.conftest.document": ["copy.deepcopy"],
    "cerberus.tests.conftest.schema": ["copy.deepcopy"],
    "cerberus.tests.conftest.validator": [
        "cerberus.base.UnconcernedValidator.__init__"
    ],
    "cerberus.tests.test_rule_required": [],
    "cerberus.tests.test_rule_required.test_required": ["cerberus.tests.assert_fail"],
    "cerberus.tests.test_utils": [],
    "cerberus.tests.test_utils.test_compare_paths": ["cerberus.utils.compare_paths_lt"],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02length": [],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02length.test_minlength_and_maxlength_with_list": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
        "<builtin>.range",
    ],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02length.test_maxlength_fails": [
        "random.choice",
        "cerberus.tests.assert_fail",
        "<builtin>.range",
        "<builtin>.len",
    ],
    "random.choice": [],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02length.test_maxlength_with_bytestring_fails": [
        "cerberus.tests.assert_fail",
        "<builtin>.len",
    ],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02length.test_minlength_fails": [
        "random.choice",
        "cerberus.tests.assert_fail",
        "<builtin>.range",
        "<builtin>.len",
    ],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02length.test_minlength_with_bytestring_fails": [
        "cerberus.tests.assert_fail",
        "<builtin>.len",
    ],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02length.test_minlength_with_dict": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
    ],
    "cerberus.tests.test_rule_rename\u00df\u201c\u00df\ufb02": [],
    "cerberus.tests.test_rule_rename\u00df\u201c\u00df\ufb02.test_rename": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_rename\u00df\u201c\u00df\ufb02.test_rename_handler_in_allow_unknown": [
        "cerberus.tests.assert_normalized",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_validation": [
        "<builtin>.list",
        "pytest.mark.parametrize",
        "itertools.product",
    ],
    "cerberus.tests.test_validation.test_empty_document": [
        "cerberus.tests.assert_document_error"
    ],
    "cerberus.tests.test_validation.test_bad_document_type": [
        "cerberus.tests.assert_document_error"
    ],
    "cerberus.tests.test_validation.test_unknown_field": ["cerberus.tests.assert_fail"],
    "cerberus.tests.test_validation.test_empty_field_definition": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_validation.test_bad_valuesrules": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_validation.test_validate_update": [
        "cerberus.tests.assert_success"
    ],
    "pytest.mark.parametrize": [],
    "cerberus.tests.test_validation.test_success_with_multiple_rules": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_validation.test_one_of_two_types": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
    ],
    "cerberus.tests.test_validation.test_custom_validator": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_validation.test_custom_validator.MyValidator._validate_isodd": [
        "<builtin>.bool",
        "cerberus.base.UnconcernedValidator._error",
    ],
    "cerberus.tests.test_validation.test_ignore_none_values": [
        "cerberus.tests.assert_success",
        "cerberus.tests.assert_has_error",
        "cerberus.base.UnconcernedValidator.__init__",
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_not_has_error",
    ],
    "cerberus.tests.test_validation.test_unknown_keys": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_validation.test_unknown_key_dict": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_validation.test_unknown_key_list": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_validation.test_unknown_keys_list_of_dicts": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_validation.test_unknown_keys_retain_custom_rules": [
        "cerberus.tests.assert_success",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_validation.test_unknown_keys_retain_custom_rules.CustomValidator._check_with_foo": [],
    "cerberus.tests.test_validation.test_callable_validator": [
        "cerberus.base.UnconcernedValidator.__init__",
        "cerberus.base.UnconcernedValidator.validate",
    ],
    "cerberus.tests.test_validation.test_self_root_document": [
        "cerberus.tests.assert_success",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_validation.test_self_root_document.MyValidator._validate_root_doc": [
        "cerberus.base.UnconcernedValidator._error",
        "<builtin>.len",
    ],
    "cerberus.tests.test_validation.test_validated": [
        "cerberus.base.UnconcernedValidator.validated"
    ],
    "cerberus.tests.test_validation.test_issue_107": [
        "cerberus.tests.assert_success",
        "cerberus.base.UnconcernedValidator.validate",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_validation.test_document_path": [
        "cerberus.tests.assert_success",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_validation.test_document_path.DocumentPathTester._validate_trail": [],
    "cerberus.tests.test_validation.test_require_all_simple": [
        "cerberus.tests.assert_success",
        "cerberus.tests.assert_fail",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_validation.test_require_all_override_by_required": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "itertools.product": [],
    "cerberus.tests.test_validation.test_require_all_override_by_subdoc_require_all": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
        "cerberus.base.UnconcernedValidator.__init__",
        "<builtin>.print",
    ],
    "cerberus.tests.test_validation.test_require_all_and_exclude": [
        "cerberus.tests.assert_success",
        "cerberus.tests.assert_fail",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_validation.test_novalidate_noerrors": [],
    "cerberus.tests.test_validation.test_PT_unknown_field": [
        "cerberus.tests.test_validation.test_unknown_field",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_validation.test_PT_test_empty_field_definition": [
        "cerberus.tests.test_validation.test_empty_field_definition"
    ],
    "cerberus.tests.test_validation.test_PT_test_success_with_multiple_rules": [
        "datetime.datetime.now",
        "cerberus.tests.test_validation.test_success_with_multiple_rules",
    ],
    "datetime.datetime.now": [],
    "cerberus.tests.test_validation.test_PT_test_one_of_two_types": [
        "cerberus.tests.test_validation.test_one_of_two_types",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_validation.test_PT_test_unknown_key_dict": [
        "cerberus.tests.test_validation.test_unknown_key_dict",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_validation.test_PT_test_unknown_key_list": [
        "cerberus.tests.test_validation.test_unknown_key_dict",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_validation.test_PT_test_unknown_keys_list_of_dicts": [
        "cerberus.tests.test_validation.test_unknown_keys_list_of_dicts",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_validation.test_PT_test_validated": [
        "cerberus.tests.test_validation.test_validated",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_validation.test_PT_test_issue_107": [
        "cerberus.tests.test_validation.test_issue_107",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_registries": [],
    "cerberus.tests.test_registries.test_schema_registry_simple": [
        "cerberus.tests.assert_success",
        "cerberus.base.Registry.add",
    ],
    "cerberus.tests.test_registries.test_top_level_reference": [
        "cerberus.tests.assert_success",
        "cerberus.base.Registry.add",
    ],
    "cerberus.tests.test_registries.test_rules_set_simple": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
        "cerberus.base.Registry.add",
    ],
    "cerberus.tests.test_registries.test_allow_unknown_as_reference": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
        "cerberus.base.Registry.add",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_registries.test_recursion": [
        "cerberus.tests.assert_success",
        "cerberus.base.Registry.add",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_registries.test_references_remain_unresolved": [
        "cerberus.base.Registry.extend"
    ],
    "cerberus.tests.test_registries.test_rules_registry_with_anyof_type": [
        "cerberus.tests.assert_success",
        "cerberus.base.Registry.add",
    ],
    "cerberus.tests.test_registries.test_schema_registry_with_anyof_type": [
        "cerberus.tests.assert_success",
        "cerberus.base.Registry.add",
    ],
    "cerberus.tests.test_registries.test_normalization_with_rules_set": [
        "cerberus.tests.assert_normalized",
        "cerberus.tests.assert_success",
        "cerberus.base.Registry.add",
    ],
    "cerberus.tests.test_registries.test_normalization_with_rules_set.<dict5>.<lambda1>": [],
    "cerberus.tests.test_registries.test_rules_set_with_dict_field": [
        "cerberus.tests.assert_schema_error",
        "cerberus.tests.assert_success",
        "cerberus.base.Registry.add",
    ],
    "cerberus.tests.test_rule_coerce": [],
    "cerberus.tests.test_rule_coerce.test_coerce": ["cerberus.tests.assert_normalized"],
    "cerberus.tests.test_rule_coerce.test_coerce_chain": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_coerce.test_coerce_chain.<lambda1>": [],
    "cerberus.tests.test_rule_coerce.test_coerce_chain.<lambda2>": [],
    "cerberus.tests.test_rule_coerce.test_coerce_chain_aborts": [],
    "cerberus.tests.test_rule_coerce.test_coerce_chain_aborts.dont_do_me": [
        "<builtin>.AssertionError"
    ],
    "cerberus.tests.test_rule_coerce.test_coerce_does_not_input_data": [
        "cerberus.base.UnconcernedValidator.__init__",
        "cerberus.base.UnconcernedValidator.validate",
    ],
    "cerberus.tests.test_rule_coerce.test_coerce_in_allow_unknown": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_coerce.test_coerce_in_items": [
        "cerberus.tests.assert_normalized",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_rule_coerce.test_coercion_of_sequence_items_with_float_values": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_coerce.test_coerce_in_itemsrules_with_integer_values": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_coerce.test_coerce_in_itemsrules_fails": [],
    "cerberus.tests.test_rule_coerce.test_coerce_in_keysrules": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_coerce.test_coerce_in_schema": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_coerce.test_coerce_in_schema_in_itemsrules": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_coerce.test_coerce_in_valuesrules": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_coerce.test_coerce_catches_ValueError": [
        "cerberus.tests.assert_has_error",
        "cerberus.tests.assert_fail",
    ],
    "cerberus.tests.test_rule_coerce.test_coerce_in_listitems_catches_ValueError": [
        "cerberus.tests.assert_has_error",
        "cerberus.tests.assert_fail",
    ],
    "cerberus.tests.test_rule_coerce.test_coerce_catches_TypeError": [
        "cerberus.tests.assert_has_error",
        "cerberus.tests.assert_fail",
    ],
    "cerberus.tests.test_rule_coerce.test_coerce_in_listitems_catches_TypeError": [
        "cerberus.tests.assert_has_error",
        "cerberus.tests.assert_fail",
    ],
    "cerberus.tests.test_rule_coerce.test_custom_coerce_and_rename": [
        "cerberus.base.UnconcernedValidator.normalized",
        "cerberus.tests.test_rule_coerce.test_custom_coerce_and_rename.MyNormalizer.__init__",
    ],
    "cerberus.tests.test_rule_coerce.test_custom_coerce_and_rename.MyNormalizer.__init__": [
        "<builtin>.super"
    ],
    "cerberus.tests.test_rule_coerce.test_custom_coerce_and_rename.MyNormalizer._normalize_coerce_multiply": [],
    "cerberus.tests.test_rule_type": ["pytest.mark.parametrize"],
    "cerberus.tests.test_rule_type.SelfDefinedContainer.__contains__": [],
    "cerberus.tests.test_rule_type.test_type_fails": ["cerberus.tests.assert_fail"],
    "cerberus.tests.test_rule_type.test_type_succeeds": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_rule_type.test_type_skips_allowed": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_type.test_type_skips_anyof": [
        "cerberus.tests.assert_fail",
        "<builtin>.len",
    ],
    "cerberus.tests.test_rule_type.test_type_with_class_as_constraint": [],
    "cerberus.tests.test_rule_type.test_boolean_is_not_a_number": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_type.test_normalization_of_generic_type_aliasses": [
        "cerberus.base.normalize_rulesset"
    ],
    "cerberus.tests.test_rule_type.test_compound_type_and_anyof_is_invalid": [
        "pytest.raises"
    ],
    "cerberus.tests.test_rule_empty": ["pytest.mark.parametrize"],
    "cerberus.tests.test_rule_empty.test_empty": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
    ],
    "cerberus.tests.test_rule_empty.test_empty_skips_regex": [],
    "cerberus.tests.test_zzz_validated_schema_cache": [],
    "cerberus.tests.test_zzz_validated_schema_cache.test_validated_schema_cache": [
        "cerberus.base.UnconcernedValidator.__init__",
        "<builtin>.len",
    ],
    "cerberus.tests.test_errors": [],
    "cerberus.tests.test_errors.test__error_1": [
        "cerberus.base.UnconcernedValidator.__init__",
        "cerberus.base.UnconcernedValidator._error",
    ],
    "cerberus.tests.test_errors.test__error_2": [
        "cerberus.base.UnconcernedValidator.__init__",
        "cerberus.base.UnconcernedValidator._error",
    ],
    "cerberus.tests.test_errors.test__error_3": [
        "cerberus.base.UnconcernedValidator.__init__",
        "cerberus.base.UnconcernedValidator._error",
    ],
    "cerberus.tests.test_errors.test_error_tree_from_subschema": [
        "cerberus.tests.assert_fail",
        "<builtin>.len",
    ],
    "cerberus.tests.test_errors.test_error_tree_from_anyof": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_errors.test_nested_error_paths": [
        "cerberus.errors.ValidationError.__init__",
        "cerberus.tests.assert_fail",
        "<builtin>.len",
    ],
    "cerberus.tests.test_errors.test_queries": [
        "cerberus.base.UnconcernedValidator.__init__"
    ],
    "cerberus.tests.test_errors.test_basic_error_handler": [
        "cerberus.errors.BasicErrorHandler.__init__",
        "cerberus.errors.ValidationError.__init__",
    ],
    "cerberus.tests.test_errors.test_basic_error_of_errors": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_errors.test_wrong_amount_of_items": [],
    "cerberus.tests.test_errors.PT_test_test_error_tree_from_subschema": [
        "cerberus.tests.test_errors.test_error_tree_from_subschema",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_rule_schema": [],
    "cerberus.tests.test_rule_schema.test_schema": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
    ],
    "cerberus.tests.test_rule_schema.test_options_passed_to_nested_validators": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_PT_errors": ["cerberus.errors.ValidationError.__init__"],
    "cerberus.tests.test_PT_errors.test_PT_child_errors": [],
    "cerberus.tests.test_PT_errors.test_PT_ve_definitions_errors": [],
    "cerberus.tests.test_PT_errors.test_PT_ve_field": [],
    "cerberus.tests.test_PT_errors.test_PT_ve_is_group_error": [],
    "cerberus.tests.test_PT_errors.test_PT_ve_is_logic_error": [],
    "cerberus.tests.test_PT_errors.test_PT_ve_is_normalization_error": [],
    "cerberus.tests.test_PT_errors.test_PT_definitions_errors": [
        "cerberus.errors.ValidationError.__init__"
    ],
    "cerberus.tests.test_PT_errors.test_PT_et_depth": [
        "cerberus.errors.ErrorTreeNode.__init__"
    ],
    "cerberus.tests.test_PT_errors.test_PT_et_tree_type": [
        "cerberus.errors.ErrorTreeNode.__init__"
    ],
    "cerberus.tests.test_PT_errors.test_PT_et_add": [
        "cerberus.errors.ErrorTreeNode.__init__",
        "cerberus.errors.ValidationError.__init__",
    ],
    "cerberus.tests.test_PT_errors.test_PT_ett_add": [
        "cerberus.errors.ValidationError.__init__",
        "cerberus.errors.ErrorTree.__init__",
    ],
    "cerberus.tests.test_PT_errors.test_PT_ett_fetch_errors_from": [
        "cerberus.errors.ErrorTree.__init__"
    ],
    "cerberus.tests.test_PT_errors.test_PT_ett_fetch_node_from": [
        "cerberus.errors.ErrorTree.__init__"
    ],
    "cerberus.tests.test_PT_errors.test_PT_emit": [
        "cerberus.errors.BaseErrorHandler.__init__"
    ],
    "cerberus.tests.test_PT_errors.test_PT_end": [
        "cerberus.errors.BaseErrorHandler.__init__"
    ],
    "cerberus.tests.test_PT_errors.test_PT_extend": [
        "cerberus.errors.BaseErrorHandler.__init__",
        "cerberus.errors.ValidationError.__init__",
    ],
    "cerberus.tests.test_PT_errors.test_PT_start": [
        "cerberus.errors.BaseErrorHandler.__init__"
    ],
    "cerberus.tests.test_PT_errors.test_PT_pretty_tree": [
        "cerberus.errors.BasicErrorHandler.__init__"
    ],
    "cerberus.tests.test_PT_errors.test_PT_bas_add": [
        "cerberus.errors.BasicErrorHandler.__init__"
    ],
    "cerberus.tests.test_PT_errors.test_PT_bas_clear": [
        "cerberus.errors.BasicErrorHandler.__init__"
    ],
    "cerberus.tests.test_PT_utils": [],
    "cerberus.tests.test_PT_utils.test_PT_quote_string": [
        "cerberus.utils.quote_string"
    ],
    "cerberus.tests.test_rule_nullable": ["pytest.mark.parametrize"],
    "cerberus.tests.test_rule_nullable.test_nullable": [],
    "cerberus.tests.test_rule_nullable.test_nullable_does_not_fail_coerce": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_nullable.test_nullables_fail_coerce_on_non_null_values": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_normalized",
    ],
    "cerberus.tests.test_rule_nullable.test_nullables_fail_coerce_on_non_null_values.failing_coercion": [
        "<builtin>.Exception"
    ],
    "<builtin>.Exception": [],
    "cerberus.tests.test_rule_nullable.test_nullable_skips_allowed": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_rule_nullable.test_nullable_skips_type": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_itemsrules": [],
    "cerberus.tests.test_rule_itemsrules.test_itemsrules": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_itemsrules.test_itemsrules_with_schema": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_PT_schema": [],
    "cerberus.tests.test_PT_schema.test_PT_update": [
        "cerberus.schema.ValidatedSchema.__init__",
        "cerberus.schema.ValidatedSchema.update",
    ],
    "cerberus.tests.test_rule_readonly": [],
    "cerberus.tests.test_rule_readonly.test_nested_readonly_with_defaults": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
    ],
    "cerberus.tests.test_rule_readonly.test_nested_readonly_with_defaults.<dict1>.<dict1>.<dict1>.<dict2>.<lambda1>": [],
    "cerberus.tests.test_rule_readonly.test_readonly": ["cerberus.tests.assert_fail"],
    "cerberus.tests.test_rule_readonly.test_readonly_skips_further_validation": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_readonly.test_readonly_with_defaults": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
    ],
    "cerberus.tests.test_rule_readonly.test_readonly_with_defaults.<dict1>.<dict2>.<lambda1>": [],
    "cerberus.tests.test_rule_readonly.test_repeated_readonly": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_schema": ["pytest.mark.parametrize"],
    "cerberus.tests.test_schema.test_empty_schema": [
        "pytest.raises",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_schema.test_bad_schema_type": ["pytest.raises"],
    "cerberus.tests.test_schema.test_bad_schema_type_field": ["pytest.raises"],
    "cerberus.tests.test_schema.test_unknown_rule": ["re.escape", "pytest.raises"],
    "cerberus.tests.test_schema.test_unknown_type": [
        "re.escape",
        "<builtin>.str",
        "pytest.raises",
    ],
    "cerberus.tests.test_schema.test_bad_schema_definition": [
        "re.escape",
        "<builtin>.str",
        "pytest.raises",
    ],
    "cerberus.tests.test_schema.test_bad_of_rules": [
        "cerberus.tests.assert_schema_error"
    ],
    "cerberus.tests.test_schema.test_normalization_rules_are_invalid_in_of_rules": [
        "cerberus.tests.assert_schema_error"
    ],
    "cerberus.tests.test_schema.test_normalization_rules_are_invalid_in_of_rules.<dict1>.<dict1>.<list1>.<dict1>.<lambda1>": [],
    "cerberus.tests.test_schema.test_anyof_allof_schema_validate": [
        "cerberus.tests.assert_schema_error"
    ],
    "cerberus.tests.test_schema.test_repr": [
        "<builtin>.repr",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "<builtin>.repr": [],
    "cerberus.tests.test_schema.test_expansion_in_nested_schema": [
        "cerberus.base.UnconcernedValidator.__init__"
    ],
    "cerberus.tests.test_schema.test_shortcut_expansion": [
        "cerberus.base.UnconcernedValidator.__init__"
    ],
    "cerberus.tests.test_schema.test_shortcut_expansion.foo": [],
    "cerberus.tests.test_schema.test_shortcut_expansion.bar": [],
    "cerberus.tests.test_schema.test_expansion_with_unvalidated_schema": [
        "cerberus.tests.assert_success",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_schema.test_rulename_space_is_normalized": [
        "cerberus.base.UnconcernedValidator.__init__"
    ],
    "cerberus.tests.test_schema.test_schema_normalization_does_not_abort": [
        "cerberus.base.Registry.clear",
        "cerberus.base.Registry.add",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_rule_items": [],
    "cerberus.tests.test_rule_items.test_items": ["cerberus.tests.assert_fail"],
    "cerberus.tests.test_rule_items.test_items_with_extra_item": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_regex": [],
    "cerberus.tests.test_rule_regex.test_regex": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
    ],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02of": ["pytest.mark.parametrize"],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02of.test_allof": [],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02of.test_anyof_fails": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02of.test_anyof_succeeds": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02of.test_anyof_in_allof": [],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02of.test_anyof_in_itemsrules": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
        "cerberus.tests.assert_not_has_error",
    ],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02of.test_anyof_with_semantically_equal_schemas": [],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02of.test_noneof": [],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02of.test_oneof": [],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02of.test_schema_is_not_spoiled": [],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02of.test_anyof_type": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02of.test_oneof_schema": [],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02of.test_oneof_type_in_valuesrules": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02of.test_oneof_type_in_oneof_schema": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_\u00df\u201c\u00df\ufb02of.test_allow_unknown_in_oneof": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
    ],
    "cerberus.tests.test_rule_allowed": [],
    "cerberus.tests.test_rule_allowed.test_allowed_with_integer_value_fail": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_allowed.test_allowed_with_integer_value_succeed": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_rule_allowed.test_allowed_with_list_value": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_allowed.test_allowed_with_set_value": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_rule_allowed.test_allowed_with_string_value": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_allowed.test_allowed_with_unicode_chars": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
    ],
    "cerberus.tests.test_rule_allowed.test_allowed_when_passing_list_of_dicts": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_forbidden": ["pytest.mark.parametrize"],
    "cerberus.tests.test_rule_forbidden.test_forbidden": [],
    "cerberus.tests.test_rule_forbidden.test_forbidden_number": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_assorted": ["pytest.mark.parametrize"],
    "cerberus.tests.test_assorted.test_pkgresources_version": [
        "importlib.reload",
        "<builtin>.__import__",
    ],
    "cerberus.tests.test_assorted.test_pkgresources_version.create_fake_distribution": [
        "pkg_resources.Distribution"
    ],
    "pkg_resources.Distribution": [],
    "importlib.reload": [],
    "cerberus.tests.test_assorted.test_version_not_found": [
        "importlib.reload",
        "<builtin>.__import__",
    ],
    "cerberus.tests.test_assorted.test_version_not_found.raise_distribution_not_found": [
        "pkg_resources.DistributionNotFound"
    ],
    "pkg_resources.DistributionNotFound": [],
    "cerberus.tests.test_assorted.test_clear_cache": [
        "cerberus.base.UnconcernedValidator.clear_caches",
        "<builtin>.len",
    ],
    "cerberus.tests.test_assorted.test_docstring": [],
    "cerberus.tests.test_assorted.test_that_test_fails": [
        "<builtin>.AssertionError",
        "cerberus.tests.assert_fail",
        "<builtin>.print",
    ],
    "cerberus.tests.test_assorted.test_dynamic_types": [
        "decimal.Decimal",
        "cerberus.tests.assert_success",
        "cerberus.base.UnconcernedValidator.__init__",
        "typing.NamedTuple",
    ],
    "decimal.Decimal": [],
    "cerberus.tests.test_assorted.test_mro": [],
    "cerberus.tests.test_assorted.test_mixin_init": ["cerberus.validator_factory"],
    "cerberus.tests.test_assorted.test_mixin_init.Mixin.__init__": ["<builtin>.super"],
    "cerberus.tests.test_assorted.test_sub_init": [
        "cerberus.tests.test_assorted.test_sub_init.MyValidator.__init__"
    ],
    "cerberus.tests.test_assorted.test_sub_init.MyValidator.__init__": [
        "<builtin>.super"
    ],
    "cerberus.tests.test_assorted.test_PT_test_clear_cache": [
        "cerberus.tests.test_assorted.test_clear_cache",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_assorted.test_PT_test_docstring": [
        "cerberus.tests.test_assorted.test_docstring",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_assorted.test_PT_test_that_test_fails_1": [
        "cerberus.tests.test_assorted.test_that_test_fails"
    ],
    "cerberus.tests.test_assorted.test_PT_test_that_test_fails_2": [
        "cerberus.tests.test_assorted.test_that_test_fails"
    ],
    "cerberus.tests.test_legacy": [],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02": [
        "pytest.mark.parametrize"
    ],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02.must_not_be_called": [
        "<builtin>.AssertionError"
    ],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02.test_default_in_schema_with_missing_value": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02.test_default_setters_with_document_reference": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02.test_default_setters_with_document_reference.<dict1>.<dict2>.<lambda1>": [],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02.test_default_setters_with_document_reference.<dict1>.<dict3>.<lambda1>": [],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02.test_default_setters_with_document_reference.<dict1>.<dict4>.<lambda1>": [],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02.test_default_setters_with_circular_document_reference": [],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02.test_default_setters_with_circular_document_reference.<dict2>.<dict1>.<lambda1>": [],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02.test_default_setters_with_circular_document_reference.<dict2>.<dict2>.<lambda1>": [],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02.test_default_with_existing_value": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02.test_default_with_missing_value": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02.test_default_with_non_nullable_field": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02.test_default_with_none_as_value_on_nullable_field": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02.test_default_with_nullable_field": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_default\u00df\u201c\u00df\ufb02.test_default_in_schema_in_allow_unknown": [
        "cerberus.tests.assert_normalized",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_PT_base": [],
    "cerberus.tests.test_PT_base.test_PT_dummy_for_rule_validation": [],
    "cerberus.tests.test_PT_base.test_PT_get": ["cerberus.base.Registry.__init__"],
    "cerberus.tests.test_PT_base.test_PT_clear_caches": [
        "cerberus.base.UnconcernedValidator.__init__"
    ],
    "cerberus.tests.test_PT_base.test_PT_allow_unknown": [
        "cerberus.base.UnconcernedValidator.__init__"
    ],
    "cerberus.tests.test_PT_base.test_PT_validated": [
        "cerberus.base.UnconcernedValidator.__init__"
    ],
    "cerberus.tests.test_PT_base.test_PT_all": ["cerberus.base.Registry.__init__"],
    "cerberus.tests.test_rule_keysrules": [],
    "cerberus.tests.test_rule_keysrules.test_keysrules": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
    ],
    "cerberus.tests.test_rule_contains": ["pytest.mark.parametrize"],
    "cerberus.tests.test_rule_contains.test_contains_succeeds": [
        "cerberus.tests.assert_success",
        "<builtin>.print",
    ],
    "cerberus.tests.test_rule_contains.test_contains_fails": [
        "cerberus.tests.assert_fail",
        "<builtin>.any",
    ],
    "cerberus.tests.test_rule_allow_unknown": [],
    "cerberus.tests.test_rule_allow_unknown.test_allow_unknown_in_schema": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
    ],
    "cerberus.tests.test_rule_allow_unknown.test_allow_unknown_with_purge_unknown": [
        "cerberus.tests.assert_normalized",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_rule_allow_unknown.test_allow_unknown_with_purge_unknown_subdocument": [
        "cerberus.tests.assert_normalized",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_rule_allow_unknown.test_allow_unknown_without_schema": [
        "cerberus.base.UnconcernedValidator.__init__"
    ],
    "cerberus.tests.test_rule_check_with": [],
    "cerberus.tests.test_rule_check_with.test_check_with_rule": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
    ],
    "cerberus.tests.test_rule_check_with.test_check_with_rule.check_with_name": [],
    "cerberus.tests.test_customization": [
        "pytest.mark.parametrize",
        "cerberus.validator_factory",
    ],
    "cerberus.tests.test_customization.test_contextual_data_preservation": [
        "cerberus.tests.assert_success",
        "cerberus.tests.test_customization.test_contextual_data_preservation.InheritedValidator.__init__",
    ],
    "cerberus.tests.test_customization.test_contextual_data_preservation.InheritedValidator._check_with_test": [],
    "cerberus.tests.test_customization.test_docstring_parsing": [],
    "cerberus.tests.test_customization.test_docstring_parsing.CustomValidator._validate_foo": [],
    "cerberus.tests.test_customization.test_docstring_parsing.CustomValidator._validate_bar": [],
    "cerberus.tests.test_customization.test_check_with_method": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_customization.test_check_with_method.MyValidator._check_with_oddity": [
        "cerberus.base.UnconcernedValidator._error"
    ],
    "cerberus.tests.test_customization.test_schema_validation_can_be_disabled": [
        "pytest.raises",
        "cerberus.base.UnconcernedValidator.__init__",
        "<builtin>.print",
    ],
    "cerberus.tests.test_customization.a": [
        "cerberus.tests.test_customization.test_schema_validation_can_be_disabled"
    ],
    "cerberus.tests.test_customization.test_custom_datatype_rule": [
        "cerberus.tests.assert_fail",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_customization.test_custom_datatype_rule.MyValidator._validate_min_number": [
        "cerberus.base.UnconcernedValidator._error"
    ],
    "cerberus.tests.test_customization.PT_test_test_schema_validation_can_be_disabled_1": [
        "pytest.raises",
        "cerberus.base.UnconcernedValidator.__init__",
        "cerberus.base.UnconcernedValidator.validate",
    ],
    "cerberus.tests.test_customization.PT_test_test_schema_validation_can_be_disabled_2": [
        "pytest.raises",
        "cerberus.validator_factory",
    ],
    "cerberus.tests.test_rule_excludes": ["pytest.mark.parametrize"],
    "cerberus.tests.test_rule_excludes.test_excludes": [],
    "cerberus.tests.test_rule_excludes.test_excludes_basic_error_handler_message": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_excludes.test_excludes_of_multiple_fields": [
        "<builtin>.print"
    ],
    "cerberus.tests.test_rule_excludes.test_excludes_of_required_fields": [],
    "cerberus.tests.test_rule_excludes.test_mutual_excludes": [],
    "cerberus.tests.test_normalization": [],
    "cerberus.tests.test_normalization.test_normalized": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_normalization.test_normalize_complex_objects": [
        "tempfile.NamedTemporaryFile",
        "cerberus.base.UnconcernedValidator.__init__",
        "cerberus.base.UnconcernedValidator.normalized",
    ],
    "tempfile.NamedTemporaryFile": [],
    "cerberus.tests.test_normalization.test_normalize_does_not_change_input_document": [
        "cerberus.base.UnconcernedValidator.__init__",
        "cerberus.base.UnconcernedValidator.normalized",
    ],
    "cerberus.tests.test_normalization.test_normalize_tuples": [
        "cerberus.base.UnconcernedValidator.normalized",
        "cerberus.tests.assert_success",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_normalization.test_purge_readonly": [
        "cerberus.tests.assert_normalized",
        "cerberus.base.UnconcernedValidator.__init__",
        "copy.deepcopy",
    ],
    "cerberus.tests.test_normalization.test_purge_unknown": [
        "cerberus.tests.assert_normalized",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_normalization.test_purge_unknown_in_subschema": [
        "cerberus.tests.assert_normalized"
    ],
    "cerberus.tests.test_rule_dependencies": ["pytest.mark.parametrize"],
    "cerberus.tests.test_rule_dependencies.test_dependencies_basic_error_handler_representation": [],
    "cerberus.tests.test_rule_dependencies.test_dependencies_errors": [
        "cerberus.tests.assert_fail",
        "cerberus.base.UnconcernedValidator.__init__",
    ],
    "cerberus.tests.test_rule_dependencies.test_dependencies_in_oneof": [],
    "cerberus.tests.test_rule_dependencies.test_dependencies_of_multiple_fields": [],
    "cerberus.tests.test_rule_dependencies.test_dependencies_of_multiple_fields_with_required_field_fails": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_dependencies.test_dependencies_of_multiple_fields_with_required_field_succeeds": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_rule_dependencies.test_dependencies_of_nullable_field_succeeds": [],
    "cerberus.tests.test_rule_dependencies.test_dependencies_of_single_field": [],
    "cerberus.tests.test_rule_dependencies.test_dependencies_relative_to_document_root": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
    ],
    "cerberus.tests.test_rule_dependencies.test_dependencies_with_mutually_dependent_nullable_fields": [],
    "cerberus.tests.test_rule_dependencies.test_dependencies_with_required_boolean_value": [],
    "cerberus.tests.test_rule_dependencies.test_dependencies_with_required_boolean_value_defined_in_list": [],
    "cerberus.tests.test_rule_dependencies.test_dependencies_with_required_rule_and_required_value_fails": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_dependencies.test_dependencies_with_required_rule_and_required_value_succeeds": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_rule_dependencies.test_dependencies_with_required_value_fails": [
        "cerberus.tests.assert_fail"
    ],
    "cerberus.tests.test_rule_dependencies.test_dependencies_with_required_value_succeeds": [
        "cerberus.tests.assert_success"
    ],
    "cerberus.tests.test_rule_dependencies.test_nested_dependencies": [
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
    ],
    "cerberus.tests.test_rule_dependencies.test_nested_dependencies_with_required_values": [],
    "cerberus.tests.test_rule_max_min": ["pytest.mark.parametrize"],
    "cerberus.tests.test_rule_max_min.test_max": ["cerberus.tests.assert_fail"],
    "cerberus.tests.test_rule_max_min.test_min": ["cerberus.tests.assert_fail"],
    "cerberus.tests.test_rule_max_min.test_min_and_max_with_date": [
        "datetime.date",
        "cerberus.tests.assert_fail",
        "cerberus.tests.assert_success",
    ],
    "datetime.date": [],
    "cerberus.typeshed_builtins.builtins": [
        "typing.overload",
        "typing.TypeVar",
        "typing_extensions.ParamSpec",
    ],
    "typing_extensions.ParamSpec": [],
    "cerberus.typeshed_builtins.builtins.object": [
        "cerberus.typeshed_builtins.builtins.classmethod",
        "cerberus.typeshed_builtins.builtins.property",
    ],
    "cerberus.typeshed_builtins.builtins.property": [],
    "cerberus.typeshed_builtins.builtins.object.__class__": [],
    "cerberus.typeshed_builtins.builtins.object.__init__": [],
    "cerberus.typeshed_builtins.builtins.object.__new__": [],
    "cerberus.typeshed_builtins.builtins.object.__setattr__": [],
    "cerberus.typeshed_builtins.builtins.object.__delattr__": [],
    "cerberus.typeshed_builtins.builtins.object.__eq__": [],
    "cerberus.typeshed_builtins.builtins.object.__ne__": [],
    "cerberus.typeshed_builtins.builtins.object.__str__": [],
    "cerberus.typeshed_builtins.builtins.object.__repr__": [],
    "cerberus.typeshed_builtins.builtins.object.__hash__": [],
    "cerberus.typeshed_builtins.builtins.object.__format__": [],
    "cerberus.typeshed_builtins.builtins.object.__getattribute__": [],
    "cerberus.typeshed_builtins.builtins.object.__sizeof__": [],
    "cerberus.typeshed_builtins.builtins.object.__reduce__": [],
    "cerberus.typeshed_builtins.builtins.object.__reduce_ex__": [],
    "cerberus.typeshed_builtins.builtins.object.__getstate__": [],
    "cerberus.typeshed_builtins.builtins.object.__dir__": [],
    "cerberus.typeshed_builtins.builtins.object.__init_subclass__": [],
    "cerberus.typeshed_builtins.builtins.classmethod": [
        "typing.overload",
        "cerberus.typeshed_builtins.builtins.property",
    ],
    "cerberus.typeshed_builtins.builtins.object.__subclasshook__": [],
    "cerberus.typeshed_builtins.builtins.staticmethod": [
        "typing.overload",
        "cerberus.typeshed_builtins.builtins.property",
    ],
    "cerberus.typeshed_builtins.builtins.staticmethod.__func__": [],
    "cerberus.typeshed_builtins.builtins.staticmethod.__isabstractmethod__": [],
    "cerberus.typeshed_builtins.builtins.staticmethod.__init__": [],
    "typing.overload": [],
    "cerberus.typeshed_builtins.builtins.staticmethod.__get__": [],
    "cerberus.typeshed_builtins.builtins.staticmethod.__wrapped__": [],
    "cerberus.typeshed_builtins.builtins.staticmethod.__call__": [],
    "cerberus.typeshed_builtins.builtins.classmethod.__func__": [],
    "cerberus.typeshed_builtins.builtins.classmethod.__isabstractmethod__": [],
    "cerberus.typeshed_builtins.builtins.classmethod.__init__": [],
    "cerberus.typeshed_builtins.builtins.classmethod.__get__": [],
    "cerberus.typeshed_builtins.builtins.classmethod.__wrapped__": [],
    "cerberus.typeshed_builtins.builtins.type": [
        "typing.overload",
        "cerberus.typeshed_builtins.builtins.classmethod",
        "cerberus.typeshed_builtins.builtins.property",
    ],
    "cerberus.typeshed_builtins.builtins.type.__base__": [],
    "cerberus.typeshed_builtins.builtins.type.__basicsize__": [],
    "cerberus.typeshed_builtins.builtins.type.__dict__": [],
    "cerberus.typeshed_builtins.builtins.type.__dictoffset__": [],
    "cerberus.typeshed_builtins.builtins.type.__flags__": [],
    "cerberus.typeshed_builtins.builtins.type.__itemsize__": [],
    "cerberus.typeshed_builtins.builtins.type.__mro__": [],
    "cerberus.typeshed_builtins.builtins.type.__text_signature__": [],
    "cerberus.typeshed_builtins.builtins.type.__weakrefoffset__": [],
    "cerberus.typeshed_builtins.builtins.type.__init__": [],
    "cerberus.typeshed_builtins.builtins.type.__new__": [],
    "cerberus.typeshed_builtins.builtins.type.__call__": [],
    "cerberus.typeshed_builtins.builtins.type.__subclasses__": [],
    "cerberus.typeshed_builtins.builtins.type.mro": [],
    "cerberus.typeshed_builtins.builtins.type.__instancecheck__": [],
    "cerberus.typeshed_builtins.builtins.type.__subclasscheck__": [],
    "cerberus.typeshed_builtins.builtins.type.__prepare__": [],
    "cerberus.typeshed_builtins.builtins.type.__or__": [],
    "cerberus.typeshed_builtins.builtins.type.__ror__": [],
    "cerberus.typeshed_builtins.builtins.super": ["typing.overload"],
    "cerberus.typeshed_builtins.builtins.super.__init__": [],
    "cerberus.typeshed_builtins.builtins.int": [
        "typing.overload",
        "cerberus.typeshed_builtins.builtins.classmethod",
        "cerberus.typeshed_builtins.builtins.property",
    ],
    "cerberus.typeshed_builtins.builtins.int.__new__": [],
    "cerberus.typeshed_builtins.builtins.int.as_integer_ratio": [],
    "cerberus.typeshed_builtins.builtins.int.real": [],
    "cerberus.typeshed_builtins.builtins.int.imag": [],
    "cerberus.typeshed_builtins.builtins.int.numerator": [],
    "cerberus.typeshed_builtins.builtins.int.denominator": [],
    "cerberus.typeshed_builtins.builtins.int.conjugate": [],
    "cerberus.typeshed_builtins.builtins.int.bit_length": [],
    "cerberus.typeshed_builtins.builtins.int.bit_count": [],
    "cerberus.typeshed_builtins.builtins.int.to_bytes": [],
    "cerberus.typeshed_builtins.builtins.int.from_bytes": [],
    "cerberus.typeshed_builtins.builtins.int.is_integer": [],
    "cerberus.typeshed_builtins.builtins.int.__add__": [],
    "cerberus.typeshed_builtins.builtins.int.__sub__": [],
    "cerberus.typeshed_builtins.builtins.int.__mul__": [],
    "cerberus.typeshed_builtins.builtins.int.__floordiv__": [],
    "cerberus.typeshed_builtins.builtins.int.__truediv__": [],
    "cerberus.typeshed_builtins.builtins.int.__mod__": [],
    "cerberus.typeshed_builtins.builtins.int.__divmod__": [],
    "cerberus.typeshed_builtins.builtins.int.__radd__": [],
    "cerberus.typeshed_builtins.builtins.int.__rsub__": [],
    "cerberus.typeshed_builtins.builtins.int.__rmul__": [],
    "cerberus.typeshed_builtins.builtins.int.__rfloordiv__": [],
    "cerberus.typeshed_builtins.builtins.int.__rtruediv__": [],
    "cerberus.typeshed_builtins.builtins.int.__rmod__": [],
    "cerberus.typeshed_builtins.builtins.int.__rdivmod__": [],
    "cerberus.typeshed_builtins.builtins.int.__pow__": [],
    "cerberus.typeshed_builtins.builtins.int.__rpow__": [],
    "cerberus.typeshed_builtins.builtins.int.__and__": [],
    "cerberus.typeshed_builtins.builtins.int.__or__": [],
    "cerberus.typeshed_builtins.builtins.int.__xor__": [],
    "cerberus.typeshed_builtins.builtins.int.__lshift__": [],
    "cerberus.typeshed_builtins.builtins.int.__rshift__": [],
    "cerberus.typeshed_builtins.builtins.int.__rand__": [],
    "cerberus.typeshed_builtins.builtins.int.__ror__": [],
    "cerberus.typeshed_builtins.builtins.int.__rxor__": [],
    "cerberus.typeshed_builtins.builtins.int.__rlshift__": [],
    "cerberus.typeshed_builtins.builtins.int.__rrshift__": [],
    "cerberus.typeshed_builtins.builtins.int.__neg__": [],
    "cerberus.typeshed_builtins.builtins.int.__pos__": [],
    "cerberus.typeshed_builtins.builtins.int.__invert__": [],
    "cerberus.typeshed_builtins.builtins.int.__trunc__": [],
    "cerberus.typeshed_builtins.builtins.int.__ceil__": [],
    "cerberus.typeshed_builtins.builtins.int.__floor__": [],
    "cerberus.typeshed_builtins.builtins.int.__round__": [],
    "cerberus.typeshed_builtins.builtins.int.__getnewargs__": [],
    "cerberus.typeshed_builtins.builtins.int.__eq__": [],
    "cerberus.typeshed_builtins.builtins.int.__ne__": [],
    "cerberus.typeshed_builtins.builtins.int.__lt__": [],
    "cerberus.typeshed_builtins.builtins.int.__le__": [],
    "cerberus.typeshed_builtins.builtins.int.__gt__": [],
    "cerberus.typeshed_builtins.builtins.int.__ge__": [],
    "cerberus.typeshed_builtins.builtins.int.__float__": [],
    "cerberus.typeshed_builtins.builtins.int.__int__": [],
    "cerberus.typeshed_builtins.builtins.int.__abs__": [],
    "cerberus.typeshed_builtins.builtins.int.__hash__": [],
    "cerberus.typeshed_builtins.builtins.int.__bool__": [],
    "cerberus.typeshed_builtins.builtins.int.__index__": [],
    "cerberus.typeshed_builtins.builtins.float.__new__": [],
    "cerberus.typeshed_builtins.builtins.float.as_integer_ratio": [],
    "cerberus.typeshed_builtins.builtins.float.hex": [],
    "cerberus.typeshed_builtins.builtins.float.is_integer": [],
    "cerberus.typeshed_builtins.builtins.float": [
        "typing.overload",
        "cerberus.typeshed_builtins.builtins.classmethod",
        "cerberus.typeshed_builtins.builtins.property",
    ],
    "cerberus.typeshed_builtins.builtins.float.fromhex": [],
    "cerberus.typeshed_builtins.builtins.float.real": [],
    "cerberus.typeshed_builtins.builtins.float.imag": [],
    "cerberus.typeshed_builtins.builtins.float.conjugate": [],
    "cerberus.typeshed_builtins.builtins.float.__add__": [],
    "cerberus.typeshed_builtins.builtins.float.__sub__": [],
    "cerberus.typeshed_builtins.builtins.float.__mul__": [],
    "cerberus.typeshed_builtins.builtins.float.__floordiv__": [],
    "cerberus.typeshed_builtins.builtins.float.__truediv__": [],
    "cerberus.typeshed_builtins.builtins.float.__mod__": [],
    "cerberus.typeshed_builtins.builtins.float.__divmod__": [],
    "cerberus.typeshed_builtins.builtins.float.__pow__": [],
    "cerberus.typeshed_builtins.builtins.float.__radd__": [],
    "cerberus.typeshed_builtins.builtins.float.__rsub__": [],
    "cerberus.typeshed_builtins.builtins.float.__rmul__": [],
    "cerberus.typeshed_builtins.builtins.float.__rfloordiv__": [],
    "cerberus.typeshed_builtins.builtins.float.__rtruediv__": [],
    "cerberus.typeshed_builtins.builtins.float.__rmod__": [],
    "cerberus.typeshed_builtins.builtins.float.__rdivmod__": [],
    "cerberus.typeshed_builtins.builtins.float.__rpow__": [],
    "cerberus.typeshed_builtins.builtins.float.__getnewargs__": [],
    "cerberus.typeshed_builtins.builtins.float.__trunc__": [],
    "cerberus.typeshed_builtins.builtins.float.__ceil__": [],
    "cerberus.typeshed_builtins.builtins.float.__floor__": [],
    "cerberus.typeshed_builtins.builtins.float.__round__": [],
    "cerberus.typeshed_builtins.builtins.float.__eq__": [],
    "cerberus.typeshed_builtins.builtins.float.__ne__": [],
    "cerberus.typeshed_builtins.builtins.float.__lt__": [],
    "cerberus.typeshed_builtins.builtins.float.__le__": [],
    "cerberus.typeshed_builtins.builtins.float.__gt__": [],
    "cerberus.typeshed_builtins.builtins.float.__ge__": [],
    "cerberus.typeshed_builtins.builtins.float.__neg__": [],
    "cerberus.typeshed_builtins.builtins.float.__pos__": [],
    "cerberus.typeshed_builtins.builtins.float.__int__": [],
    "cerberus.typeshed_builtins.builtins.float.__float__": [],
    "cerberus.typeshed_builtins.builtins.float.__abs__": [],
    "cerberus.typeshed_builtins.builtins.float.__hash__": [],
    "cerberus.typeshed_builtins.builtins.float.__bool__": [],
    "cerberus.typeshed_builtins.builtins.complex": [
        "typing.overload",
        "cerberus.typeshed_builtins.builtins.property",
    ],
    "cerberus.typeshed_builtins.builtins.complex.__new__": [],
    "cerberus.typeshed_builtins.builtins.complex.real": [],
    "cerberus.typeshed_builtins.builtins.complex.imag": [],
    "cerberus.typeshed_builtins.builtins.complex.conjugate": [],
    "cerberus.typeshed_builtins.builtins.complex.__add__": [],
    "cerberus.typeshed_builtins.builtins.complex.__sub__": [],
    "cerberus.typeshed_builtins.builtins.complex.__mul__": [],
    "cerberus.typeshed_builtins.builtins.complex.__pow__": [],
    "cerberus.typeshed_builtins.builtins.complex.__truediv__": [],
    "cerberus.typeshed_builtins.builtins.complex.__radd__": [],
    "cerberus.typeshed_builtins.builtins.complex.__rsub__": [],
    "cerberus.typeshed_builtins.builtins.complex.__rmul__": [],
    "cerberus.typeshed_builtins.builtins.complex.__rpow__": [],
    "cerberus.typeshed_builtins.builtins.complex.__rtruediv__": [],
    "cerberus.typeshed_builtins.builtins.complex.__eq__": [],
    "cerberus.typeshed_builtins.builtins.complex.__ne__": [],
    "cerberus.typeshed_builtins.builtins.complex.__neg__": [],
    "cerberus.typeshed_builtins.builtins.complex.__pos__": [],
    "cerberus.typeshed_builtins.builtins.complex.__abs__": [],
    "cerberus.typeshed_builtins.builtins.complex.__hash__": [],
    "cerberus.typeshed_builtins.builtins.complex.__bool__": [],
    "cerberus.typeshed_builtins.builtins.complex.__complex__": [],
    "cerberus.typeshed_builtins.builtins._FormatMapMapping.__getitem__": [],
    "cerberus.typeshed_builtins.builtins._TranslateTable.__getitem__": [],
    "cerberus.typeshed_builtins.builtins.str": [
        "typing.overload",
        "cerberus.typeshed_builtins.builtins.staticmethod",
    ],
    "cerberus.typeshed_builtins.builtins.str.__new__": [],
    "cerberus.typeshed_builtins.builtins.str.capitalize": [],
    "cerberus.typeshed_builtins.builtins.str.casefold": [],
    "cerberus.typeshed_builtins.builtins.str.center": [],
    "cerberus.typeshed_builtins.builtins.str.count": [],
    "cerberus.typeshed_builtins.builtins.str.encode": [],
    "cerberus.typeshed_builtins.builtins.str.endswith": [],
    "cerberus.typeshed_builtins.builtins.str.expandtabs": [],
    "cerberus.typeshed_builtins.builtins.str.find": [],
    "cerberus.typeshed_builtins.builtins.str.format": [],
    "cerberus.typeshed_builtins.builtins.str.format_map": [],
    "cerberus.typeshed_builtins.builtins.str.index": [],
    "cerberus.typeshed_builtins.builtins.str.isalnum": [],
    "cerberus.typeshed_builtins.builtins.str.isalpha": [],
    "cerberus.typeshed_builtins.builtins.str.isascii": [],
    "cerberus.typeshed_builtins.builtins.str.isdecimal": [],
    "cerberus.typeshed_builtins.builtins.str.isdigit": [],
    "cerberus.typeshed_builtins.builtins.str.isidentifier": [],
    "cerberus.typeshed_builtins.builtins.str.islower": [],
    "cerberus.typeshed_builtins.builtins.str.isnumeric": [],
    "cerberus.typeshed_builtins.builtins.str.isprintable": [],
    "cerberus.typeshed_builtins.builtins.str.isspace": [],
    "cerberus.typeshed_builtins.builtins.str.istitle": [],
    "cerberus.typeshed_builtins.builtins.str.isupper": [],
    "cerberus.typeshed_builtins.builtins.str.join": [],
    "cerberus.typeshed_builtins.builtins.str.ljust": [],
    "cerberus.typeshed_builtins.builtins.str.lower": [],
    "cerberus.typeshed_builtins.builtins.str.lstrip": [],
    "cerberus.typeshed_builtins.builtins.str.partition": [],
    "cerberus.typeshed_builtins.builtins.str.replace": [],
    "cerberus.typeshed_builtins.builtins.str.removeprefix": [],
    "cerberus.typeshed_builtins.builtins.str.removesuffix": [],
    "cerberus.typeshed_builtins.builtins.str.rfind": [],
    "cerberus.typeshed_builtins.builtins.str.rindex": [],
    "cerberus.typeshed_builtins.builtins.str.rjust": [],
    "cerberus.typeshed_builtins.builtins.str.rpartition": [],
    "cerberus.typeshed_builtins.builtins.str.rsplit": [],
    "cerberus.typeshed_builtins.builtins.str.rstrip": [],
    "cerberus.typeshed_builtins.builtins.str.split": [],
    "cerberus.typeshed_builtins.builtins.str.splitlines": [],
    "cerberus.typeshed_builtins.builtins.str.startswith": [],
    "cerberus.typeshed_builtins.builtins.str.strip": [],
    "cerberus.typeshed_builtins.builtins.str.swapcase": [],
    "cerberus.typeshed_builtins.builtins.str.title": [],
    "cerberus.typeshed_builtins.builtins.str.translate": [],
    "cerberus.typeshed_builtins.builtins.str.upper": [],
    "cerberus.typeshed_builtins.builtins.str.zfill": [],
    "cerberus.typeshed_builtins.builtins.str.maketrans": [],
    "cerberus.typeshed_builtins.builtins.str.__add__": [],
    "cerberus.typeshed_builtins.builtins.str.__contains__": [],
    "cerberus.typeshed_builtins.builtins.str.__eq__": [],
    "cerberus.typeshed_builtins.builtins.str.__ge__": [],
    "cerberus.typeshed_builtins.builtins.str.__getitem__": [],
    "cerberus.typeshed_builtins.builtins.str.__gt__": [],
    "cerberus.typeshed_builtins.builtins.str.__hash__": [],
    "cerberus.typeshed_builtins.builtins.str.__iter__": [],
    "cerberus.typeshed_builtins.builtins.str.__le__": [],
    "cerberus.typeshed_builtins.builtins.str.__len__": [],
    "cerberus.typeshed_builtins.builtins.str.__lt__": [],
    "cerberus.typeshed_builtins.builtins.str.__mod__": [],
    "cerberus.typeshed_builtins.builtins.str.__mul__": [],
    "cerberus.typeshed_builtins.builtins.str.__ne__": [],
    "cerberus.typeshed_builtins.builtins.str.__rmul__": [],
    "cerberus.typeshed_builtins.builtins.str.__getnewargs__": [],
    "cerberus.typeshed_builtins.builtins.bytes": [
        "typing.overload",
        "cerberus.typeshed_builtins.builtins.classmethod",
        "cerberus.typeshed_builtins.builtins.staticmethod",
    ],
    "cerberus.typeshed_builtins.builtins.bytes.__new__": [],
    "cerberus.typeshed_builtins.builtins.bytes.capitalize": [],
    "cerberus.typeshed_builtins.builtins.bytes.center": [],
    "cerberus.typeshed_builtins.builtins.bytes.count": [],
    "cerberus.typeshed_builtins.builtins.bytes.decode": [],
    "cerberus.typeshed_builtins.builtins.bytes.endswith": [],
    "cerberus.typeshed_builtins.builtins.bytes.expandtabs": [],
    "cerberus.typeshed_builtins.builtins.bytes.find": [],
    "cerberus.typeshed_builtins.builtins.bytes.hex": [],
    "cerberus.typeshed_builtins.builtins.bytes.index": [],
    "cerberus.typeshed_builtins.builtins.bytes.isalnum": [],
    "cerberus.typeshed_builtins.builtins.bytes.isalpha": [],
    "cerberus.typeshed_builtins.builtins.bytes.isascii": [],
    "cerberus.typeshed_builtins.builtins.bytes.isdigit": [],
    "cerberus.typeshed_builtins.builtins.bytes.islower": [],
    "cerberus.typeshed_builtins.builtins.bytes.isspace": [],
    "cerberus.typeshed_builtins.builtins.bytes.istitle": [],
    "cerberus.typeshed_builtins.builtins.bytes.isupper": [],
    "cerberus.typeshed_builtins.builtins.bytes.join": [],
    "cerberus.typeshed_builtins.builtins.bytes.ljust": [],
    "cerberus.typeshed_builtins.builtins.bytes.lower": [],
    "cerberus.typeshed_builtins.builtins.bytes.lstrip": [],
    "cerberus.typeshed_builtins.builtins.bytes.partition": [],
    "cerberus.typeshed_builtins.builtins.bytes.replace": [],
    "cerberus.typeshed_builtins.builtins.bytes.removeprefix": [],
    "cerberus.typeshed_builtins.builtins.bytes.removesuffix": [],
    "cerberus.typeshed_builtins.builtins.bytes.rfind": [],
    "cerberus.typeshed_builtins.builtins.bytes.rindex": [],
    "cerberus.typeshed_builtins.builtins.bytes.rjust": [],
    "cerberus.typeshed_builtins.builtins.bytes.rpartition": [],
    "cerberus.typeshed_builtins.builtins.bytes.rsplit": [],
    "cerberus.typeshed_builtins.builtins.bytes.rstrip": [],
    "cerberus.typeshed_builtins.builtins.bytes.split": [],
    "cerberus.typeshed_builtins.builtins.bytes.splitlines": [],
    "cerberus.typeshed_builtins.builtins.bytes.startswith": [],
    "cerberus.typeshed_builtins.builtins.bytes.strip": [],
    "cerberus.typeshed_builtins.builtins.bytes.swapcase": [],
    "cerberus.typeshed_builtins.builtins.bytes.title": [],
    "cerberus.typeshed_builtins.builtins.bytes.translate": [],
    "cerberus.typeshed_builtins.builtins.bytes.upper": [],
    "cerberus.typeshed_builtins.builtins.bytes.zfill": [],
    "cerberus.typeshed_builtins.builtins.bytes.fromhex": [],
    "cerberus.typeshed_builtins.builtins.bytes.maketrans": [],
    "cerberus.typeshed_builtins.builtins.bytes.__len__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__iter__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__hash__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__getitem__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__add__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__mul__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__rmul__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__mod__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__contains__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__eq__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__ne__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__lt__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__le__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__gt__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__ge__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__getnewargs__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__bytes__": [],
    "cerberus.typeshed_builtins.builtins.bytes.__buffer__": [],
    "cerberus.typeshed_builtins.builtins.bytearray": [
        "typing.overload",
        "cerberus.typeshed_builtins.builtins.classmethod",
        "cerberus.typeshed_builtins.builtins.staticmethod",
    ],
    "cerberus.typeshed_builtins.builtins.bytearray.__init__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.append": [],
    "cerberus.typeshed_builtins.builtins.bytearray.capitalize": [],
    "cerberus.typeshed_builtins.builtins.bytearray.center": [],
    "cerberus.typeshed_builtins.builtins.bytearray.count": [],
    "cerberus.typeshed_builtins.builtins.bytearray.copy": [],
    "cerberus.typeshed_builtins.builtins.bytearray.decode": [],
    "cerberus.typeshed_builtins.builtins.bytearray.endswith": [],
    "cerberus.typeshed_builtins.builtins.bytearray.expandtabs": [],
    "cerberus.typeshed_builtins.builtins.bytearray.extend": [],
    "cerberus.typeshed_builtins.builtins.bytearray.find": [],
    "cerberus.typeshed_builtins.builtins.bytearray.hex": [],
    "cerberus.typeshed_builtins.builtins.bytearray.index": [],
    "cerberus.typeshed_builtins.builtins.bytearray.insert": [],
    "cerberus.typeshed_builtins.builtins.bytearray.isalnum": [],
    "cerberus.typeshed_builtins.builtins.bytearray.isalpha": [],
    "cerberus.typeshed_builtins.builtins.bytearray.isascii": [],
    "cerberus.typeshed_builtins.builtins.bytearray.isdigit": [],
    "cerberus.typeshed_builtins.builtins.bytearray.islower": [],
    "cerberus.typeshed_builtins.builtins.bytearray.isspace": [],
    "cerberus.typeshed_builtins.builtins.bytearray.istitle": [],
    "cerberus.typeshed_builtins.builtins.bytearray.isupper": [],
    "cerberus.typeshed_builtins.builtins.bytearray.join": [],
    "cerberus.typeshed_builtins.builtins.bytearray.ljust": [],
    "cerberus.typeshed_builtins.builtins.bytearray.lower": [],
    "cerberus.typeshed_builtins.builtins.bytearray.lstrip": [],
    "cerberus.typeshed_builtins.builtins.bytearray.partition": [],
    "cerberus.typeshed_builtins.builtins.bytearray.pop": [],
    "cerberus.typeshed_builtins.builtins.bytearray.remove": [],
    "cerberus.typeshed_builtins.builtins.bytearray.removeprefix": [],
    "cerberus.typeshed_builtins.builtins.bytearray.removesuffix": [],
    "cerberus.typeshed_builtins.builtins.bytearray.replace": [],
    "cerberus.typeshed_builtins.builtins.bytearray.rfind": [],
    "cerberus.typeshed_builtins.builtins.bytearray.rindex": [],
    "cerberus.typeshed_builtins.builtins.bytearray.rjust": [],
    "cerberus.typeshed_builtins.builtins.bytearray.rpartition": [],
    "cerberus.typeshed_builtins.builtins.bytearray.rsplit": [],
    "cerberus.typeshed_builtins.builtins.bytearray.rstrip": [],
    "cerberus.typeshed_builtins.builtins.bytearray.split": [],
    "cerberus.typeshed_builtins.builtins.bytearray.splitlines": [],
    "cerberus.typeshed_builtins.builtins.bytearray.startswith": [],
    "cerberus.typeshed_builtins.builtins.bytearray.strip": [],
    "cerberus.typeshed_builtins.builtins.bytearray.swapcase": [],
    "cerberus.typeshed_builtins.builtins.bytearray.title": [],
    "cerberus.typeshed_builtins.builtins.bytearray.translate": [],
    "cerberus.typeshed_builtins.builtins.bytearray.upper": [],
    "cerberus.typeshed_builtins.builtins.bytearray.zfill": [],
    "cerberus.typeshed_builtins.builtins.bytearray.fromhex": [],
    "cerberus.typeshed_builtins.builtins.bytearray.maketrans": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__len__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__iter__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__getitem__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__setitem__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__delitem__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__add__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__iadd__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__mul__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__rmul__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__imul__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__mod__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__contains__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__eq__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__ne__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__lt__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__le__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__gt__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__ge__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__alloc__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__buffer__": [],
    "cerberus.typeshed_builtins.builtins.bytearray.__release_buffer__": [],
    "cerberus.typeshed_builtins.builtins.memoryview": [
        "typing.overload",
        "cerberus.typeshed_builtins.builtins.property",
    ],
    "cerberus.typeshed_builtins.builtins.memoryview.format": [],
    "cerberus.typeshed_builtins.builtins.memoryview.itemsize": [],
    "cerberus.typeshed_builtins.builtins.memoryview.shape": [],
    "cerberus.typeshed_builtins.builtins.memoryview.strides": [],
    "cerberus.typeshed_builtins.builtins.memoryview.suboffsets": [],
    "cerberus.typeshed_builtins.builtins.memoryview.readonly": [],
    "cerberus.typeshed_builtins.builtins.memoryview.ndim": [],
    "cerberus.typeshed_builtins.builtins.memoryview.obj": [],
    "cerberus.typeshed_builtins.builtins.memoryview.c_contiguous": [],
    "cerberus.typeshed_builtins.builtins.memoryview.f_contiguous": [],
    "cerberus.typeshed_builtins.builtins.memoryview.contiguous": [],
    "cerberus.typeshed_builtins.builtins.memoryview.nbytes": [],
    "cerberus.typeshed_builtins.builtins.memoryview.__new__": [],
    "cerberus.typeshed_builtins.builtins.memoryview.__enter__": [],
    "cerberus.typeshed_builtins.builtins.memoryview.__exit__": [],
    "cerberus.typeshed_builtins.builtins.memoryview.cast": [],
    "cerberus.typeshed_builtins.builtins.memoryview.__getitem__": [],
    "cerberus.typeshed_builtins.builtins.memoryview.__contains__": [],
    "cerberus.typeshed_builtins.builtins.memoryview.__iter__": [],
    "cerberus.typeshed_builtins.builtins.memoryview.__len__": [],
    "cerberus.typeshed_builtins.builtins.memoryview.__eq__": [],
    "cerberus.typeshed_builtins.builtins.memoryview.__hash__": [],
    "cerberus.typeshed_builtins.builtins.memoryview.__setitem__": [],
    "cerberus.typeshed_builtins.builtins.memoryview.tobytes": [],
    "cerberus.typeshed_builtins.builtins.memoryview.tolist": [],
    "cerberus.typeshed_builtins.builtins.memoryview.toreadonly": [],
    "cerberus.typeshed_builtins.builtins.memoryview.release": [],
    "cerberus.typeshed_builtins.builtins.memoryview.hex": [],
    "cerberus.typeshed_builtins.builtins.memoryview.__buffer__": [],
    "cerberus.typeshed_builtins.builtins.memoryview.__release_buffer__": [],
    "cerberus.typeshed_builtins.builtins.bool.__new__": [],
    "cerberus.typeshed_builtins.builtins.bool": [
        "typing.overload",
        "typing_extensions.deprecated",
    ],
    "cerberus.typeshed_builtins.builtins.bool.__and__": [],
    "cerberus.typeshed_builtins.builtins.bool.__or__": [],
    "cerberus.typeshed_builtins.builtins.bool.__xor__": [],
    "cerberus.typeshed_builtins.builtins.bool.__rand__": [],
    "cerberus.typeshed_builtins.builtins.bool.__ror__": [],
    "cerberus.typeshed_builtins.builtins.bool.__rxor__": [],
    "cerberus.typeshed_builtins.builtins.bool.__getnewargs__": [],
    "typing_extensions.deprecated": [],
    "cerberus.typeshed_builtins.builtins.bool.__invert__": [],
    "cerberus.typeshed_builtins.builtins.slice": [
        "typing.overload",
        "cerberus.typeshed_builtins.builtins.property",
    ],
    "cerberus.typeshed_builtins.builtins.slice.start": [],
    "cerberus.typeshed_builtins.builtins.slice.step": [],
    "cerberus.typeshed_builtins.builtins.slice.stop": [],
    "cerberus.typeshed_builtins.builtins.slice.__new__": [],
    "cerberus.typeshed_builtins.builtins.slice.__eq__": [],
    "cerberus.typeshed_builtins.builtins.slice.indices": [],
    "cerberus.typeshed_builtins.builtins.tuple.__new__": [],
    "cerberus.typeshed_builtins.builtins.tuple.__len__": [],
    "cerberus.typeshed_builtins.builtins.tuple.__contains__": [],
    "cerberus.typeshed_builtins.builtins.tuple": ["typing.overload"],
    "cerberus.typeshed_builtins.builtins.tuple.__getitem__": [],
    "cerberus.typeshed_builtins.builtins.tuple.__iter__": [],
    "cerberus.typeshed_builtins.builtins.tuple.__lt__": [],
    "cerberus.typeshed_builtins.builtins.tuple.__le__": [],
    "cerberus.typeshed_builtins.builtins.tuple.__gt__": [],
    "cerberus.typeshed_builtins.builtins.tuple.__ge__": [],
    "cerberus.typeshed_builtins.builtins.tuple.__eq__": [],
    "cerberus.typeshed_builtins.builtins.tuple.__hash__": [],
    "cerberus.typeshed_builtins.builtins.tuple.__add__": [],
    "cerberus.typeshed_builtins.builtins.tuple.__mul__": [],
    "cerberus.typeshed_builtins.builtins.tuple.__rmul__": [],
    "cerberus.typeshed_builtins.builtins.tuple.count": [],
    "cerberus.typeshed_builtins.builtins.tuple.index": [],
    "cerberus.typeshed_builtins.builtins.tuple.__class_getitem__": [],
    "cerberus.typeshed_builtins.builtins.function": [
        "cerberus.typeshed_builtins.builtins.property"
    ],
    "cerberus.typeshed_builtins.builtins.function.__closure__": [],
    "cerberus.typeshed_builtins.builtins.function.__globals__": [],
    "cerberus.typeshed_builtins.builtins.function.__builtins__": [],
    "cerberus.typeshed_builtins.builtins.function.__get__": [],
    "cerberus.typeshed_builtins.builtins.list": ["typing.overload"],
    "cerberus.typeshed_builtins.builtins.list.__init__": [],
    "cerberus.typeshed_builtins.builtins.list.copy": [],
    "cerberus.typeshed_builtins.builtins.list.append": [],
    "cerberus.typeshed_builtins.builtins.list.extend": [],
    "cerberus.typeshed_builtins.builtins.list.pop": [],
    "cerberus.typeshed_builtins.builtins.list.index": [],
    "cerberus.typeshed_builtins.builtins.list.count": [],
    "cerberus.typeshed_builtins.builtins.list.insert": [],
    "cerberus.typeshed_builtins.builtins.list.remove": [],
    "cerberus.typeshed_builtins.builtins.list.sort": [],
    "cerberus.typeshed_builtins.builtins.list.__len__": [],
    "cerberus.typeshed_builtins.builtins.list.__iter__": [],
    "cerberus.typeshed_builtins.builtins.list.__getitem__": [],
    "cerberus.typeshed_builtins.builtins.list.__setitem__": [],
    "cerberus.typeshed_builtins.builtins.list.__delitem__": [],
    "cerberus.typeshed_builtins.builtins.list.__add__": [],
    "cerberus.typeshed_builtins.builtins.list.__iadd__": [],
    "cerberus.typeshed_builtins.builtins.list.__mul__": [],
    "cerberus.typeshed_builtins.builtins.list.__rmul__": [],
    "cerberus.typeshed_builtins.builtins.list.__imul__": [],
    "cerberus.typeshed_builtins.builtins.list.__contains__": [],
    "cerberus.typeshed_builtins.builtins.list.__reversed__": [],
    "cerberus.typeshed_builtins.builtins.list.__gt__": [],
    "cerberus.typeshed_builtins.builtins.list.__ge__": [],
    "cerberus.typeshed_builtins.builtins.list.__lt__": [],
    "cerberus.typeshed_builtins.builtins.list.__le__": [],
    "cerberus.typeshed_builtins.builtins.list.__eq__": [],
    "cerberus.typeshed_builtins.builtins.list.__class_getitem__": [],
    "cerberus.typeshed_builtins.builtins.dict": [
        "typing.overload",
        "cerberus.typeshed_builtins.builtins.classmethod",
    ],
    "cerberus.typeshed_builtins.builtins.dict.__init__": [],
    "cerberus.typeshed_builtins.builtins.dict.__new__": [],
    "cerberus.typeshed_builtins.builtins.dict.copy": [],
    "cerberus.typeshed_builtins.builtins.dict.keys": [],
    "cerberus.typeshed_builtins.builtins.dict.values": [],
    "cerberus.typeshed_builtins.builtins.dict.items": [],
    "cerberus.typeshed_builtins.builtins.dict.fromkeys": [],
    "cerberus.typeshed_builtins.builtins.dict.get": [],
    "cerberus.typeshed_builtins.builtins.dict.pop": [],
    "cerberus.typeshed_builtins.builtins.dict.__len__": [],
    "cerberus.typeshed_builtins.builtins.dict.__getitem__": [],
    "cerberus.typeshed_builtins.builtins.dict.__setitem__": [],
    "cerberus.typeshed_builtins.builtins.dict.__delitem__": [],
    "cerberus.typeshed_builtins.builtins.dict.__iter__": [],
    "cerberus.typeshed_builtins.builtins.dict.__eq__": [],
    "cerberus.typeshed_builtins.builtins.dict.__reversed__": [],
    "cerberus.typeshed_builtins.builtins.dict.__class_getitem__": [],
    "cerberus.typeshed_builtins.builtins.dict.__or__": [],
    "cerberus.typeshed_builtins.builtins.dict.__ror__": [],
    "cerberus.typeshed_builtins.builtins.dict.__ior__": [],
    "cerberus.typeshed_builtins.builtins.set": ["typing.overload"],
    "cerberus.typeshed_builtins.builtins.set.__init__": [],
    "cerberus.typeshed_builtins.builtins.set.add": [],
    "cerberus.typeshed_builtins.builtins.set.copy": [],
    "cerberus.typeshed_builtins.builtins.set.difference": [],
    "cerberus.typeshed_builtins.builtins.set.difference_update": [],
    "cerberus.typeshed_builtins.builtins.set.discard": [],
    "cerberus.typeshed_builtins.builtins.set.intersection": [],
    "cerberus.typeshed_builtins.builtins.set.intersection_update": [],
    "cerberus.typeshed_builtins.builtins.set.isdisjoint": [],
    "cerberus.typeshed_builtins.builtins.set.issubset": [],
    "cerberus.typeshed_builtins.builtins.set.issuperset": [],
    "cerberus.typeshed_builtins.builtins.set.remove": [],
    "cerberus.typeshed_builtins.builtins.set.symmetric_difference": [],
    "cerberus.typeshed_builtins.builtins.set.symmetric_difference_update": [],
    "cerberus.typeshed_builtins.builtins.set.union": [],
    "cerberus.typeshed_builtins.builtins.set.update": [],
    "cerberus.typeshed_builtins.builtins.set.__len__": [],
    "cerberus.typeshed_builtins.builtins.set.__contains__": [],
    "cerberus.typeshed_builtins.builtins.set.__iter__": [],
    "cerberus.typeshed_builtins.builtins.set.__and__": [],
    "cerberus.typeshed_builtins.builtins.set.__iand__": [],
    "cerberus.typeshed_builtins.builtins.set.__or__": [],
    "cerberus.typeshed_builtins.builtins.set.__ior__": [],
    "cerberus.typeshed_builtins.builtins.set.__sub__": [],
    "cerberus.typeshed_builtins.builtins.set.__isub__": [],
    "cerberus.typeshed_builtins.builtins.set.__xor__": [],
    "cerberus.typeshed_builtins.builtins.set.__ixor__": [],
    "cerberus.typeshed_builtins.builtins.set.__le__": [],
    "cerberus.typeshed_builtins.builtins.set.__lt__": [],
    "cerberus.typeshed_builtins.builtins.set.__ge__": [],
    "cerberus.typeshed_builtins.builtins.set.__gt__": [],
    "cerberus.typeshed_builtins.builtins.set.__eq__": [],
    "cerberus.typeshed_builtins.builtins.set.__class_getitem__": [],
    "cerberus.typeshed_builtins.builtins.frozenset": ["typing.overload"],
    "cerberus.typeshed_builtins.builtins.frozenset.__new__": [],
    "cerberus.typeshed_builtins.builtins.frozenset.copy": [],
    "cerberus.typeshed_builtins.builtins.frozenset.difference": [],
    "cerberus.typeshed_builtins.builtins.frozenset.intersection": [],
    "cerberus.typeshed_builtins.builtins.frozenset.isdisjoint": [],
    "cerberus.typeshed_builtins.builtins.frozenset.issubset": [],
    "cerberus.typeshed_builtins.builtins.frozenset.issuperset": [],
    "cerberus.typeshed_builtins.builtins.frozenset.symmetric_difference": [],
    "cerberus.typeshed_builtins.builtins.frozenset.union": [],
    "cerberus.typeshed_builtins.builtins.frozenset.__len__": [],
    "cerberus.typeshed_builtins.builtins.frozenset.__contains__": [],
    "cerberus.typeshed_builtins.builtins.frozenset.__iter__": [],
    "cerberus.typeshed_builtins.builtins.frozenset.__and__": [],
    "cerberus.typeshed_builtins.builtins.frozenset.__or__": [],
    "cerberus.typeshed_builtins.builtins.frozenset.__sub__": [],
    "cerberus.typeshed_builtins.builtins.frozenset.__xor__": [],
    "cerberus.typeshed_builtins.builtins.frozenset.__le__": [],
    "cerberus.typeshed_builtins.builtins.frozenset.__lt__": [],
    "cerberus.typeshed_builtins.builtins.frozenset.__ge__": [],
    "cerberus.typeshed_builtins.builtins.frozenset.__gt__": [],
    "cerberus.typeshed_builtins.builtins.frozenset.__eq__": [],
    "cerberus.typeshed_builtins.builtins.frozenset.__hash__": [],
    "cerberus.typeshed_builtins.builtins.frozenset.__class_getitem__": [],
    "cerberus.typeshed_builtins.builtins.enumerate.__new__": [],
    "cerberus.typeshed_builtins.builtins.enumerate.__iter__": [],
    "cerberus.typeshed_builtins.builtins.enumerate.__next__": [],
    "cerberus.typeshed_builtins.builtins.enumerate.__class_getitem__": [],
    "cerberus.typeshed_builtins.builtins.range": [
        "typing.overload",
        "cerberus.typeshed_builtins.builtins.property",
    ],
    "cerberus.typeshed_builtins.builtins.range.start": [],
    "cerberus.typeshed_builtins.builtins.range.stop": [],
    "cerberus.typeshed_builtins.builtins.range.step": [],
    "cerberus.typeshed_builtins.builtins.range.__new__": [],
    "cerberus.typeshed_builtins.builtins.range.count": [],
    "cerberus.typeshed_builtins.builtins.range.index": [],
    "cerberus.typeshed_builtins.builtins.range.__len__": [],
    "cerberus.typeshed_builtins.builtins.range.__eq__": [],
    "cerberus.typeshed_builtins.builtins.range.__hash__": [],
    "cerberus.typeshed_builtins.builtins.range.__contains__": [],
    "cerberus.typeshed_builtins.builtins.range.__iter__": [],
    "cerberus.typeshed_builtins.builtins.range.__getitem__": [],
    "cerberus.typeshed_builtins.builtins.range.__reversed__": [],
    "cerberus.typeshed_builtins.builtins.property.__init__": [],
    "cerberus.typeshed_builtins.builtins.property.getter": [],
    "cerberus.typeshed_builtins.builtins.property.setter": [],
    "cerberus.typeshed_builtins.builtins.property.deleter": [],
    "cerberus.typeshed_builtins.builtins.property.__get__": [],
    "cerberus.typeshed_builtins.builtins.property.__set__": [],
    "cerberus.typeshed_builtins.builtins.property.__delete__": [],
    "cerberus.typeshed_builtins.builtins.abs": [],
    "cerberus.typeshed_builtins.builtins.all": [],
    "cerberus.typeshed_builtins.builtins.any": [],
    "cerberus.typeshed_builtins.builtins.ascii": [],
    "cerberus.typeshed_builtins.builtins.bin": [],
    "cerberus.typeshed_builtins.builtins.breakpoint": [],
    "cerberus.typeshed_builtins.builtins.callable": [],
    "cerberus.typeshed_builtins.builtins.chr": [],
    "cerberus.typeshed_builtins.builtins._PathLike.__fspath__": [],
    "cerberus.typeshed_builtins.builtins.aiter": [],
    "cerberus.typeshed_builtins.builtins._SupportsSynchronousAnext.__anext__": [],
    "cerberus.typeshed_builtins.builtins.anext": [],
    "cerberus.typeshed_builtins.builtins.compile": [],
    "cerberus.typeshed_builtins.builtins.copyright": [],
    "cerberus.typeshed_builtins.builtins.credits": [],
    "cerberus.typeshed_builtins.builtins.delattr": [],
    "cerberus.typeshed_builtins.builtins.dir": [],
    "cerberus.typeshed_builtins.builtins.divmod": [],
    "cerberus.typeshed_builtins.builtins.eval": [],
    "cerberus.typeshed_builtins.builtins.exec": [],
    "cerberus.typeshed_builtins.builtins.exit": [],
    "cerberus.typeshed_builtins.builtins.filter": ["typing.overload"],
    "cerberus.typeshed_builtins.builtins.filter.__new__": [],
    "cerberus.typeshed_builtins.builtins.filter.__iter__": [],
    "cerberus.typeshed_builtins.builtins.filter.__next__": [],
    "cerberus.typeshed_builtins.builtins.format": [],
    "cerberus.typeshed_builtins.builtins.getattr": [],
    "cerberus.typeshed_builtins.builtins.globals": [],
    "cerberus.typeshed_builtins.builtins.hasattr": [],
    "cerberus.typeshed_builtins.builtins.hash": [],
    "cerberus.typeshed_builtins.builtins.help": [],
    "cerberus.typeshed_builtins.builtins.hex": [],
    "cerberus.typeshed_builtins.builtins.id": [],
    "cerberus.typeshed_builtins.builtins.input": [],
    "cerberus.typeshed_builtins.builtins._GetItemIterable.__getitem__": [],
    "cerberus.typeshed_builtins.builtins.iter": [],
    "cerberus.typeshed_builtins.builtins.isinstance": [],
    "cerberus.typeshed_builtins.builtins.issubclass": [],
    "cerberus.typeshed_builtins.builtins.len": [],
    "cerberus.typeshed_builtins.builtins.license": [],
    "cerberus.typeshed_builtins.builtins.locals": [],
    "cerberus.typeshed_builtins.builtins.map": ["typing.overload"],
    "cerberus.typeshed_builtins.builtins.map.__new__": [],
    "cerberus.typeshed_builtins.builtins.map.__iter__": [],
    "cerberus.typeshed_builtins.builtins.map.__next__": [],
    "cerberus.typeshed_builtins.builtins.max": [],
    "cerberus.typeshed_builtins.builtins.min": [],
    "cerberus.typeshed_builtins.builtins.next": [],
    "cerberus.typeshed_builtins.builtins.oct": [],
    "cerberus.typeshed_builtins.builtins.open": [],
    "cerberus.typeshed_builtins.builtins.ord": [],
    "cerberus.typeshed_builtins.builtins.print": [],
    "cerberus.typeshed_builtins.builtins._SupportsPow2.__pow__": [],
    "cerberus.typeshed_builtins.builtins._SupportsPow3NoneOnly.__pow__": [],
    "cerberus.typeshed_builtins.builtins._SupportsPow3.__pow__": [],
    "cerberus.typeshed_builtins.builtins.pow": [],
    "cerberus.typeshed_builtins.builtins.quit": [],
    "cerberus.typeshed_builtins.builtins.reversed": ["typing.overload"],
    "cerberus.typeshed_builtins.builtins.reversed.__init__": [],
    "cerberus.typeshed_builtins.builtins.reversed.__iter__": [],
    "cerberus.typeshed_builtins.builtins.reversed.__next__": [],
    "cerberus.typeshed_builtins.builtins.reversed.__length_hint__": [],
    "cerberus.typeshed_builtins.builtins.repr": [],
    "cerberus.typeshed_builtins.builtins._SupportsRound1.__round__": [],
    "cerberus.typeshed_builtins.builtins._SupportsRound2.__round__": [],
    "cerberus.typeshed_builtins.builtins.round": [],
    "cerberus.typeshed_builtins.builtins.setattr": [],
    "cerberus.typeshed_builtins.builtins.sorted": [],
    "cerberus.typeshed_builtins.builtins.sum": [],
    "cerberus.typeshed_builtins.builtins.vars": [],
    "cerberus.typeshed_builtins.builtins.zip": ["typing.overload"],
    "cerberus.typeshed_builtins.builtins.zip.__new__": [],
    "cerberus.typeshed_builtins.builtins.zip.__iter__": [],
    "cerberus.typeshed_builtins.builtins.zip.__next__": [],
    "cerberus.typeshed_builtins.builtins.__import__": [],
    "cerberus.typeshed_builtins.builtins.__build_class__": [],
    "cerberus.typeshed_builtins.builtins.BaseException.__init__": [],
    "cerberus.typeshed_builtins.builtins.BaseException.__setstate__": [],
    "cerberus.typeshed_builtins.builtins.BaseException.with_traceback": [],
    "cerberus.typeshed_builtins.builtins.BaseException.add_note": [],
    "cerberus.typeshed_builtins.builtins.AttributeError.__init__": [],
    "cerberus.typeshed_builtins.builtins.ImportError.__init__": [],
    "cerberus.typeshed_builtins.builtins.UnicodeDecodeError.__init__": [],
    "cerberus.typeshed_builtins.builtins.UnicodeEncodeError.__init__": [],
    "cerberus.typeshed_builtins.builtins.UnicodeTranslateError.__init__": [],
    "cerberus.typeshed_builtins.builtins.BaseExceptionGroup.__new__": [],
    "cerberus.typeshed_builtins.builtins.BaseExceptionGroup.__init__": [],
    "cerberus.typeshed_builtins.builtins.BaseExceptionGroup": [
        "typing.overload",
        "cerberus.typeshed_builtins.builtins.property",
    ],
    "cerberus.typeshed_builtins.builtins.BaseExceptionGroup.message": [],
    "cerberus.typeshed_builtins.builtins.BaseExceptionGroup.exceptions": [],
    "cerberus.typeshed_builtins.builtins.BaseExceptionGroup.subgroup": [],
    "cerberus.typeshed_builtins.builtins.BaseExceptionGroup.split": [],
    "cerberus.typeshed_builtins.builtins.BaseExceptionGroup.derive": [],
    "cerberus.typeshed_builtins.builtins.BaseExceptionGroup.__class_getitem__": [],
    "cerberus.typeshed_builtins.builtins.ExceptionGroup.__new__": [],
    "cerberus.typeshed_builtins.builtins.ExceptionGroup.__init__": [],
    "cerberus.typeshed_builtins.builtins.ExceptionGroup": [
        "typing.overload",
        "cerberus.typeshed_builtins.builtins.property",
    ],
    "cerberus.typeshed_builtins.builtins.ExceptionGroup.exceptions": [],
    "cerberus.typeshed_builtins.builtins.ExceptionGroup.subgroup": [],
    "cerberus.typeshed_builtins.builtins.ExceptionGroup.split": [],
    "cerberus.benchmarks": ["pathlib.Path"],
    "cerberus.benchmarks.test_overall_performance": [
        "cerberus.benchmarks.test_overall_performance.write_sample_documents",
        "cerberus.base.Registry.add",
        "<builtin>.range",
        "<builtin>.list",
    ],
    "cerberus.benchmarks.test_overall_performance.schema_1_field_3_allow_unknown_check_with": [
        "<builtin>.len"
    ],
    "cerberus.benchmarks.test_overall_performance.<dict3>.<dict1>.<dict2>.<dict2>.<lambda1>": [],
    "cerberus.benchmarks.test_overall_performance.init_validator_1": [
        "cerberus.base.UnconcernedValidator.__init__"
    ],
    "cerberus.benchmarks.test_overall_performance.init_validator_1.TestValidator": [
        "typing.NamedTuple"
    ],
    "cerberus.benchmarks.test_overall_performance.load_documents_1": [
        "json.load",
        "pathlib.Path.parent.open",
    ],
    "pathlib.Path.parent.open": [],
    "json.load": [],
    "cerberus.benchmarks.test_overall_performance.validate_documents": [
        "<builtin>.len",
        "<builtin>.print",
        "cerberus.benchmarks.test_overall_performance.validate_documents.count_errors",
        "collections.Counter",
    ],
    "collections.Counter": [],
    "cerberus.benchmarks.test_overall_performance.validate_documents.count_errors": [
        "cerberus.benchmarks.test_overall_performance.validate_documents.count_errors"
    ],
    "cerberus.benchmarks.test_overall_performance.generate_sample_document_1": [
        "<builtin>.globals",
        "random.randrange",
    ],
    "random.randrange": [],
    "<builtin>.globals": [],
    "cerberus.benchmarks.test_overall_performance.generate_document_1_field_1": [
        "random.randrange"
    ],
    "cerberus.benchmarks.test_overall_performance.generate_document_1_field_2": [
        "<builtin>.str",
        "random.randrange",
    ],
    "cerberus.benchmarks.test_overall_performance.generate_document_1_field_3": [
        "<builtin>.range",
        "random.randrange",
        "random.choice",
    ],
    "cerberus.benchmarks.test_overall_performance.generate_document_1_field_4": [
        "random.randrange"
    ],
    "cerberus.benchmarks.test_overall_performance.generate_document_1_field_5": [],
    "cerberus.benchmarks.test_overall_performance.write_sample_documents": [
        "json.dump",
        "cerberus.benchmarks.test_overall_performance.generate_sample_document_1",
        "pathlib.Path.parent.open",
        "<builtin>.range",
    ],
    "json.dump": [],
}
