{
 "1": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "145",
  "column": "4",
  "context": "github.com/Miserlou/JonesComplexity\n\n    \"\"\"\n\n    error_template = 'Found module with high Jones Complexity score: {0}'\n    code = 200\n\n\n@final\nclass TooManyImportsViolat",
  "context_lines": "    .. versionadded:: 0.1.0\n\n    See also:\n        https://github.com/Miserlou/JonesComplexity\n\n    \"\"\"\n\n    error_template = 'Found module with high Jones Complexity score: {0}'\n    code = 200\n\n\n@final\nclass TooManyImportsViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found module with high Jones Complexity score: {0}'\n"
 },
 "2": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "146",
  "column": "4",
  "context": "module with high Jones Complexity score: {0}'\n    code = 200\n\n\n@final\nclass TooManyImportsViolation(SimpleViola",
  "context_lines": "    See also:\n        https://github.com/Miserlou/JonesComplexity\n\n    \"\"\"\n\n    error_template = 'Found module with high Jones Complexity score: {0}'\n    code = 200\n\n\n@final\nclass TooManyImportsViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": [
   "except_block1 = 'except Exception as {0}:'\n",
   "except_block2 = 'except (TypeError, ValueError) as {0}:'\n",
   "try_template1 = \"\"\"\n",
   "try_template2 = \"\"\"\n",
   "try_template3 = \"\"\"\n",
   "try_template4 = \"\"\"\n",
   "try_template5 = \"\"\"\n",
   "try_template6 = \"\"\"\n",
   "try_template7 = \"\"\"\n",
   "try_template8 = \"\"\"\n",
   "try_template9 = \"\"\"\n",
   "    except_block1,\n",
   "    except_block2,\n",
   "    try_template1,\n",
   "    try_template2,\n",
   "    try_template3,\n",
   "    try_template4,\n",
   "    try_template5,\n",
   "    try_template6,\n",
   "    try_template7,\n",
   "    try_template8,\n",
   "    try_template9,\n",
   "    code = context.format(\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [BlockAndLocalOverlapViolation])\n",
   "    assert_error_text(visitor, variable_name)\n",
   "    except_block1,\n",
   "    except_block2,\n",
   "    try_template1,\n",
   "    try_template2,\n",
   "    try_template3,\n",
   "    try_template4,\n",
   "    try_template5,\n",
   "    try_template6,\n",
   "    try_template7,\n",
   "    try_template8,\n",
   "    try_template9,\n",
   "    code = context.format(\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [])\n",
   "    except_block1,\n",
   "    except_block2,\n",
   "    try_template1,\n",
   "    try_template2,\n",
   "    try_template3,\n",
   "    try_template4,\n",
   "    try_template5,\n",
   "    try_template6,\n",
   "    try_template7,\n",
   "    try_template8,\n",
   "    try_template9,\n",
   "    code = context.format(\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [])\n",
   "    tree = parse_ast_tree(code)\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, violations)\n"
  ]
 },
 "3": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "185",
  "column": "4",
  "context": "PORTS`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found module with too many imports: {0}'\n    code = 201\n\n\n@final\nclass TooManyModuleMembers",
  "context_lines": "        This rule is configurable with ``--max-imports``.\n        Default: :str:`wemake_python_styleguide.options.defaults.MAX_IMPORTS`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found module with too many imports: {0}'\n    code = 201\n\n\n@final\nclass TooManyModuleMembersViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found module with too many imports: {0}'\n"
 },
 "4": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "186",
  "column": "4",
  "context": "e = 'Found module with too many imports: {0}'\n    code = 201\n\n\n@final\nclass TooManyModuleMembersViolation(Simpl",
  "context_lines": "        Default: :str:`wemake_python_styleguide.options.defaults.MAX_IMPORTS`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found module with too many imports: {0}'\n    code = 201\n\n\n@final\nclass TooManyModuleMembersViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    code = 201\n"
 },
 "5": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "215",
  "column": "4",
  "context": "MBERS`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found too many module members: {0}'\n    code = 202\n\n\n@final\nclass TooManyImportedNames",
  "context_lines": "        Default:\n        :str:`wemake_python_styleguide.options.defaults.MAX_MODULE_MEMBERS`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found too many module members: {0}'\n    code = 202\n\n\n@final\nclass TooManyImportedNamesViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too many module members: {0}'\n"
 },
 "6": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "216",
  "column": "4",
  "context": "mplate = 'Found too many module members: {0}'\n    code = 202\n\n\n@final\nclass TooManyImportedNamesViolation(Simpl",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.MAX_MODULE_MEMBERS`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found too many module members: {0}'\n    code = 202\n\n\n@final\nclass TooManyImportedNamesViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    code = 202\n"
 },
 "7": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "263",
  "column": "4",
  "context": "AMES`\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found module with too many imported names: {0}'\n    code = 203\n\n\n@final\nclass OverusedExpressionVi",
  "context_lines": "        Default:\n        :str:`wemake_python_styleguide.options.defaults.MAX_IMPORTED_NAMES`\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found module with too many imported names: {0}'\n    code = 203\n\n\n@final\nclass OverusedExpressionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found module with too many imported names: {0}'\n"
 },
 "8": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "264",
  "column": "4",
  "context": "und module with too many imported names: {0}'\n    code = 203\n\n\n@final\nclass OverusedExpressionViolation(ASTViol",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.MAX_IMPORTED_NAMES`\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found module with too many imported names: {0}'\n    code = 203\n\n\n@final\nclass OverusedExpressionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 203\n"
 },
 "9": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "306",
  "column": "4",
  "context": "12.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found overused expression: {0}'\n    code = 204\n\n\n# Functions and classes:\n\n@final\n",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.MAX_FUNCTION_EXPRESSIONS`\n\n    .. versionadded:: 0.12.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found overused expression: {0}'\n    code = 204\n\n\n# Functions and classes:\n\n@final\nclass TooManyLocalsViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found overused expression: {0}'\n"
 },
 "10": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "307",
  "column": "4",
  "context": "r_template = 'Found overused expression: {0}'\n    code = 204\n\n\n# Functions and classes:\n\n@final\nclass TooManyLo",
  "context_lines": "    .. versionadded:: 0.12.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found overused expression: {0}'\n    code = 204\n\n\n# Functions and classes:\n\n@final\nclass TooManyLocalsViolation(ASTViolation):\n",
  "slicing": "    code = 204\n"
 },
 "11": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "359",
  "column": "4",
  "context": "ABLES`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found too many local variables: {0}'\n    code = 210\n\n\n@final\nclass TooManyArgumentsViol",
  "context_lines": "        Default:\n        :str:`wemake_python_styleguide.options.defaults.MAX_LOCAL_VARIABLES`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found too many local variables: {0}'\n    code = 210\n\n\n@final\nclass TooManyArgumentsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too many local variables: {0}'\n"
 },
 "12": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "360",
  "column": "4",
  "context": "plate = 'Found too many local variables: {0}'\n    code = 210\n\n\n@final\nclass TooManyArgumentsViolation(ASTViolat",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.MAX_LOCAL_VARIABLES`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found too many local variables: {0}'\n    code = 210\n\n\n@final\nclass TooManyArgumentsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 210\n"
 },
 "13": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "385",
  "column": "4",
  "context": "MENTS`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found too many arguments: {0}'\n    code = 211\n\n\n@final\nclass TooManyReturnsViolat",
  "context_lines": "        This rule is configurable with ``--max-arguments``.\n        Default: :str:`wemake_python_styleguide.options.defaults.MAX_ARGUMENTS`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found too many arguments: {0}'\n    code = 211\n\n\n@final\nclass TooManyReturnsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too many arguments: {0}'\n"
 },
 "14": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "386",
  "column": "4",
  "context": "or_template = 'Found too many arguments: {0}'\n    code = 211\n\n\n@final\nclass TooManyReturnsViolation(ASTViolatio",
  "context_lines": "        Default: :str:`wemake_python_styleguide.options.defaults.MAX_ARGUMENTS`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found too many arguments: {0}'\n    code = 211\n\n\n@final\nclass TooManyReturnsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 211\n"
 },
 "15": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "410",
  "column": "4",
  "context": "TURNS`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found too many return statements: {0}'\n    code = 212\n\n\n@final\nclass TooManyExpressionsVi",
  "context_lines": "        This rule is configurable with ``--max-returns``.\n        Default: :str:`wemake_python_styleguide.options.defaults.MAX_RETURNS`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found too many return statements: {0}'\n    code = 212\n\n\n@final\nclass TooManyExpressionsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too many return statements: {0}'\n"
 },
 "16": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "411",
  "column": "4",
  "context": "ate = 'Found too many return statements: {0}'\n    code = 212\n\n\n@final\nclass TooManyExpressionsViolation(ASTViol",
  "context_lines": "        Default: :str:`wemake_python_styleguide.options.defaults.MAX_RETURNS`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found too many return statements: {0}'\n    code = 212\n\n\n@final\nclass TooManyExpressionsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 212\n"
 },
 "17": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "445",
  "column": "4",
  "context": "/wiki/Expression_(computer_science)\n\n    \"\"\"\n\n    error_template = 'Found too many expressions: {0}'\n    code = 213\n\n\n@final\nclass TooManyMethodsViolat",
  "context_lines": "    .. versionadded:: 0.1.0\n\n    See also:\n        https://en.wikipedia.org/wiki/Expression_(computer_science)\n\n    \"\"\"\n\n    error_template = 'Found too many expressions: {0}'\n    code = 213\n\n\n@final\nclass TooManyMethodsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too many expressions: {0}'\n"
 },
 "18": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "446",
  "column": "4",
  "context": "_template = 'Found too many expressions: {0}'\n    code = 213\n\n\n@final\nclass TooManyMethodsViolation(ASTViolatio",
  "context_lines": "    See also:\n        https://en.wikipedia.org/wiki/Expression_(computer_science)\n\n    \"\"\"\n\n    error_template = 'Found too many expressions: {0}'\n    code = 213\n\n\n@final\nclass TooManyMethodsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 213\n"
 },
 "19": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "481",
  "column": "4",
  "context": "://en.wikipedia.org/wiki/God_object\n\n    \"\"\"\n\n    error_template = 'Found too many methods: {0}'\n    code = 214\n\n\n@final\nclass TooManyBaseClassesVi",
  "context_lines": "    .. versionadded:: 0.1.0\n\n    See also:\n        https://en.wikipedia.org/wiki/God_object\n\n    \"\"\"\n\n    error_template = 'Found too many methods: {0}'\n    code = 214\n\n\n@final\nclass TooManyBaseClassesViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too many methods: {0}'\n"
 },
 "20": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "482",
  "column": "4",
  "context": "rror_template = 'Found too many methods: {0}'\n    code = 214\n\n\n@final\nclass TooManyBaseClassesViolation(ASTViol",
  "context_lines": "    See also:\n        https://en.wikipedia.org/wiki/God_object\n\n    \"\"\"\n\n    error_template = 'Found too many methods: {0}'\n    code = 214\n\n\n@final\nclass TooManyBaseClassesViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 214\n"
 },
 "21": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "528",
  "column": "4",
  "context": "g/wiki/Composition_over_inheritance\n\n    \"\"\"\n\n    error_template = 'Too many base classes: {0}'\n    code = 215\n\n\n@final\nclass TooManyDecoratorsVio",
  "context_lines": "    .. versionchanged:: 0.5.0\n\n    See also:\n        https://en.wikipedia.org/wiki/Composition_over_inheritance\n\n    \"\"\"\n\n    error_template = 'Too many base classes: {0}'\n    code = 215\n\n\n@final\nclass TooManyDecoratorsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Too many base classes: {0}'\n"
 },
 "22": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "529",
  "column": "4",
  "context": "error_template = 'Too many base classes: {0}'\n    code = 215\n\n\n@final\nclass TooManyDecoratorsViolation(ASTViola",
  "context_lines": "    See also:\n        https://en.wikipedia.org/wiki/Composition_over_inheritance\n\n    \"\"\"\n\n    error_template = 'Too many base classes: {0}'\n    code = 215\n\n\n@final\nclass TooManyDecoratorsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 215\n"
 },
 "23": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "561",
  "column": "4",
  "context": "asses.\n\n    .. versionadded:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Too many decorators: {0}'\n    code = 216\n\n\n@final\nclass TooManyAwaitsViolati",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.MAX_DECORATORS`\n\n    This rule checks: functions, methods, and classes.\n\n    .. versionadded:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Too many decorators: {0}'\n    code = 216\n\n\n@final\nclass TooManyAwaitsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Too many decorators: {0}'\n"
 },
 "24": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "562",
  "column": "4",
  "context": "  error_template = 'Too many decorators: {0}'\n    code = 216\n\n\n@final\nclass TooManyAwaitsViolation(ASTViolation",
  "context_lines": "    This rule checks: functions, methods, and classes.\n\n    .. versionadded:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Too many decorators: {0}'\n    code = 216\n\n\n@final\nclass TooManyAwaitsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 216\n"
 },
 "25": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "586",
  "column": "4",
  "context": "AITS`\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    error_template = 'Found too many await expressions: {0}'\n    code = 217\n\n\n@final\nclass TooManyAssertsViolat",
  "context_lines": "        This rule is configurable with ``--max-awaits``.\n        Default: :str:`wemake_python_styleguide.options.defaults.MAX_AWAITS`\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    error_template = 'Found too many await expressions: {0}'\n    code = 217\n\n\n@final\nclass TooManyAssertsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too many await expressions: {0}'\n"
 },
 "26": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "587",
  "column": "4",
  "context": "ate = 'Found too many await expressions: {0}'\n    code = 217\n\n\n@final\nclass TooManyAssertsViolation(ASTViolatio",
  "context_lines": "        Default: :str:`wemake_python_styleguide.options.defaults.MAX_AWAITS`\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    error_template = 'Found too many await expressions: {0}'\n    code = 217\n\n\n@final\nclass TooManyAssertsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 217\n"
 },
 "27": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "612",
  "column": "4",
  "context": "ERTS`\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too many `assert` statements: {0}'\n    code = 218\n\n\n@final\nclass TooDeepAccessViolati",
  "context_lines": "        This rule is configurable with ``--max-asserts``.\n        Default: :str:`wemake_python_styleguide.options.defaults.MAX_ASSERTS`\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too many `assert` statements: {0}'\n    code = 218\n\n\n@final\nclass TooDeepAccessViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too many `assert` statements: {0}'\n"
 },
 "28": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "613",
  "column": "4",
  "context": "e = 'Found too many `assert` statements: {0}'\n    code = 218\n\n\n@final\nclass TooDeepAccessViolation(ASTViolation",
  "context_lines": "        Default: :str:`wemake_python_styleguide.options.defaults.MAX_ASSERTS`\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too many `assert` statements: {0}'\n    code = 218\n\n\n@final\nclass TooDeepAccessViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 218\n"
 },
 "29": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "664",
  "column": "4",
  "context": "EVEL`\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too deep access level: {0}'\n    code = 219\n\n\n@final\nclass TooDeepNestingViolat",
  "context_lines": "        Default:\n        :str:`wemake_python_styleguide.options.defaults.MAX_ACCESS_LEVEL`\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too deep access level: {0}'\n    code = 219\n\n\n@final\nclass TooDeepNestingViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too deep access level: {0}'\n"
 },
 "30": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "665",
  "column": "4",
  "context": "template = 'Found too deep access level: {0}'\n    code = 219\n\n\n@final\nclass TooDeepNestingViolation(ASTViolatio",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.MAX_ACCESS_LEVEL`\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too deep access level: {0}'\n    code = 219\n\n\n@final\nclass TooDeepNestingViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 219\n"
 },
 "31": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "687",
  "column": "4",
  "context": "0.1.0\n    .. versionchanged:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found too deep nesting: {0}'\n    code = 220\n\n\n@final\nclass LineComplexityViolat",
  "context_lines": "        We can use new functions or different constructions.\n\n    .. versionadded:: 0.1.0\n    .. versionchanged:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found too deep nesting: {0}'\n    code = 220\n\n\n@final\nclass LineComplexityViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too deep nesting: {0}'\n"
 },
 "32": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "688",
  "column": "4",
  "context": "rror_template = 'Found too deep nesting: {0}'\n    code = 220\n\n\n@final\nclass LineComplexityViolation(ASTViolatio",
  "context_lines": "    .. versionadded:: 0.1.0\n    .. versionchanged:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found too deep nesting: {0}'\n    code = 220\n\n\n@final\nclass LineComplexityViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 220\n"
 },
 "33": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "732",
  "column": "4",
  "context": "github.com/Miserlou/JonesComplexity\n\n    \"\"\"\n\n    error_template = 'Found line with high Jones Complexity: {0}'\n    code = 221\n\n\n@final\nclass TooManyConditionsVio",
  "context_lines": "    .. versionadded:: 0.1.0\n\n    See also:\n        https://github.com/Miserlou/JonesComplexity\n\n    \"\"\"\n\n    error_template = 'Found line with high Jones Complexity: {0}'\n    code = 221\n\n\n@final\nclass TooManyConditionsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found line with high Jones Complexity: {0}'\n"
 },
 "34": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "733",
  "column": "4",
  "context": " 'Found line with high Jones Complexity: {0}'\n    code = 221\n\n\n@final\nclass TooManyConditionsViolation(ASTViola",
  "context_lines": "    See also:\n        https://github.com/Miserlou/JonesComplexity\n\n    \"\"\"\n\n    error_template = 'Found line with high Jones Complexity: {0}'\n    code = 221\n\n\n@final\nclass TooManyConditionsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 221\n"
 },
 "35": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "761",
  "column": "4",
  "context": "0.1.0\n    .. versionchanged:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found a condition with too much logic: {0}'\n    code = 222\n\n\n@final\nclass TooManyElifsViolatio",
  "context_lines": "    We count ``and`` and ``or`` keywords as conditions.\n\n    .. versionadded:: 0.1.0\n    .. versionchanged:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found a condition with too much logic: {0}'\n    code = 222\n\n\n@final\nclass TooManyElifsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found a condition with too much logic: {0}'\n"
 },
 "36": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "762",
  "column": "4",
  "context": " 'Found a condition with too much logic: {0}'\n    code = 222\n\n\n@final\nclass TooManyElifsViolation(ASTViolation)",
  "context_lines": "    .. versionadded:: 0.1.0\n    .. versionchanged:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found a condition with too much logic: {0}'\n    code = 222\n\n\n@final\nclass TooManyElifsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 222\n"
 },
 "37": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "789",
  "column": "4",
  "context": "0.1.0\n    .. versionchanged:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found too many `elif` branches: {0}'\n    code = 223\n\n\n@final\nclass TooManyForsInCompreh",
  "context_lines": "        Another option is to separate your ``if`` into multiple functions.\n\n    .. versionadded:: 0.1.0\n    .. versionchanged:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found too many `elif` branches: {0}'\n    code = 223\n\n\n@final\nclass TooManyForsInComprehensionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too many `elif` branches: {0}'\n"
 },
 "38": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "790",
  "column": "4",
  "context": "plate = 'Found too many `elif` branches: {0}'\n    code = 223\n\n\n@final\nclass TooManyForsInComprehensionViolation",
  "context_lines": "    .. versionadded:: 0.1.0\n    .. versionchanged:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found too many `elif` branches: {0}'\n    code = 223\n\n\n@final\nclass TooManyForsInComprehensionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 223\n"
 },
 "39": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "821",
  "column": "4",
  "context": "     ]\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found a comprehension with too many `for` statements'\n    code = 224\n\n\n@final\nclass TooManyExceptCasesVi",
  "context_lines": "            for _ in range(10)\n        ]\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found a comprehension with too many `for` statements'\n    code = 224\n\n\n@final\nclass TooManyExceptCasesViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found a comprehension with too many `for` statements'\n"
 },
 "40": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "822",
  "column": "4",
  "context": "comprehension with too many `for` statements'\n    code = 224\n\n\n@final\nclass TooManyExceptCasesViolation(ASTViol",
  "context_lines": "        ]\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found a comprehension with too many `for` statements'\n    code = 224\n\n\n@final\nclass TooManyExceptCasesViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 224\n"
 },
 "41": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "848",
  "column": "4",
  "context": "tions.\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found too many `except` cases: {0}'\n    code = 225\n\n\n@final\nclass OverusedStringViolat",
  "context_lines": "        ``try`` cases, functions or using a decorator\n        to handle different exceptions.\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found too many `except` cases: {0}'\n    code = 225\n\n\n@final\nclass OverusedStringViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too many `except` cases: {0}'\n"
 },
 "42": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "849",
  "column": "4",
  "context": "mplate = 'Found too many `except` cases: {0}'\n    code = 225\n\n\n@final\nclass OverusedStringViolation(MaybeASTVio",
  "context_lines": "        to handle different exceptions.\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found too many `except` cases: {0}'\n    code = 225\n\n\n@final\nclass OverusedStringViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 225\n"
 },
 "43": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "878",
  "column": "4",
  "context": "AGES`\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    error_template = 'Found string constant over-use: {0}'\n    code = 226\n\n\n@final\nclass TooLongYieldTupleVio",
  "context_lines": "        Default:\n        :str:`wemake_python_styleguide.options.defaults.MAX_STRING_USAGES`\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    error_template = 'Found string constant over-use: {0}'\n    code = 226\n\n\n@final\nclass TooLongYieldTupleViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found string constant over-use: {0}'\n"
 },
 "44": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "879",
  "column": "4",
  "context": "plate = 'Found string constant over-use: {0}'\n    code = 226\n\n\n@final\nclass TooLongYieldTupleViolation(ASTViola",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.MAX_STRING_USAGES`\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    error_template = 'Found string constant over-use: {0}'\n    code = 226\n\n\n@final\nclass TooLongYieldTupleViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 226\n"
 },
 "45": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "898",
  "column": "4",
  "context": "ects.\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    error_template = 'Found too long yield tuple: {0}'\n    code = 227\n\n\n@final\nclass TooLongCompareViolat",
  "context_lines": "    Solution:\n        Use lists of similar type or wrapper objects.\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    error_template = 'Found too long yield tuple: {0}'\n    code = 227\n\n\n@final\nclass TooLongCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too long yield tuple: {0}'\n"
 },
 "46": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "899",
  "column": "4",
  "context": "_template = 'Found too long yield tuple: {0}'\n    code = 227\n\n\n@final\nclass TooLongCompareViolation(ASTViolatio",
  "context_lines": "        Use lists of similar type or wrapper objects.\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    error_template = 'Found too long yield tuple: {0}'\n    code = 227\n\n\n@final\nclass TooLongCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 227\n"
 },
 "47": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "919",
  "column": "4",
  "context": "ions.\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    error_template = 'Found too long compare'\n    code = 228\n\n\n@final\nclass TooLongTryBodyViolat",
  "context_lines": "    Solution:\n        Use several conditions, separate variables, or functions.\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    error_template = 'Found too long compare'\n    code = 228\n\n\n@final\nclass TooLongTryBodyViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too long compare'\n"
 },
 "48": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "920",
  "column": "4",
  "context": "    error_template = 'Found too long compare'\n    code = 228\n\n\n@final\nclass TooLongTryBodyViolation(ASTViolatio",
  "context_lines": "        Use several conditions, separate variables, or functions.\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    error_template = 'Found too long compare'\n    code = 228\n\n\n@final\nclass TooLongTryBodyViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 228\n"
 },
 "49": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "951",
  "column": "4",
  "context": "thon/\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too long ``try`` body length: {0}'\n    code = 229\n\n\n@final\nclass TooManyPublicAttribu",
  "context_lines": "    See also:\n        https://adamj.eu/tech/2019/10/02/limit-your-try-clauses-in-python/\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too long ``try`` body length: {0}'\n    code = 229\n\n\n@final\nclass TooManyPublicAttributesViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too long ``try`` body length: {0}'\n"
 },
 "50": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "952",
  "column": "4",
  "context": "e = 'Found too long ``try`` body length: {0}'\n    code = 229\n\n\n@final\nclass TooManyPublicAttributesViolation(AS",
  "context_lines": "        https://adamj.eu/tech/2019/10/02/limit-your-try-clauses-in-python/\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too long ``try`` body length: {0}'\n    code = 229\n\n\n@final\nclass TooManyPublicAttributesViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 229\n"
 },
 "51": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "991",
  "column": "4",
  "context": "ming)\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too many public instance attributes: {0}'\n    code = 230\n\n\n@final\nclass CognitiveComplexityV",
  "context_lines": "    See also:\n        https://en.wikipedia.org/wiki/Coupling_(computer_programming)\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too many public instance attributes: {0}'\n    code = 230\n\n\n@final\nclass CognitiveComplexityViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too many public instance attributes: {0}'\n"
 },
 "52": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "992",
  "column": "4",
  "context": "und too many public instance attributes: {0}'\n    code = 230\n\n\n@final\nclass CognitiveComplexityViolation(ASTVio",
  "context_lines": "        https://en.wikipedia.org/wiki/Coupling_(computer_programming)\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too many public instance attributes: {0}'\n    code = 230\n\n\n@final\nclass CognitiveComplexityViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 230\n"
 },
 "53": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1024",
  "column": "4",
  "context": "exity\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found function with too much cognitive complexity: {0}'\n    code = 231\n\n\n@final\nclass CognitiveModuleCompl",
  "context_lines": "        https://pypi.org/project/cognitive-complexity/\n        https://github.com/Melevir/flake8-cognitive-complexity\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found function with too much cognitive complexity: {0}'\n    code = 231\n\n\n@final\nclass CognitiveModuleComplexityViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found function with too much cognitive complexity: {0}'\n"
 },
 "54": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1025",
  "column": "4",
  "context": "tion with too much cognitive complexity: {0}'\n    code = 231\n\n\n@final\nclass CognitiveModuleComplexityViolation(",
  "context_lines": "        https://github.com/Melevir/flake8-cognitive-complexity\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found function with too much cognitive complexity: {0}'\n    code = 231\n\n\n@final\nclass CognitiveModuleComplexityViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    code = 231\n"
 },
 "55": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1053",
  "column": "4",
  "context": "exity\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found module cognitive complexity that is too high: {0}'\n    code = 232\n\n\n@final\nclass TooLongCallChainViol",
  "context_lines": "    See also:\n        https://en.wikipedia.org/wiki/Cognitive_complexity\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found module cognitive complexity that is too high: {0}'\n    code = 232\n\n\n@final\nclass TooLongCallChainViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found module cognitive complexity that is too high: {0}'\n"
 },
 "56": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1054",
  "column": "4",
  "context": "e cognitive complexity that is too high: {0}'\n    code = 232\n\n\n@final\nclass TooLongCallChainViolation(ASTViolat",
  "context_lines": "        https://en.wikipedia.org/wiki/Cognitive_complexity\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found module cognitive complexity that is too high: {0}'\n    code = 232\n\n\n@final\nclass TooLongCallChainViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 232\n"
 },
 "57": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1079",
  "column": "4",
  "context": "EVEL`\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found call chain that is too long: {0}'\n    code = 233\n\n\n@final\nclass TooComplexAnnotation",
  "context_lines": "        Default:\n        :str:`wemake_python_styleguide.options.defaults.MAX_CALL_LEVEL`\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found call chain that is too long: {0}'\n    code = 233\n\n\n@final\nclass TooComplexAnnotationViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found call chain that is too long: {0}'\n"
 },
 "58": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1080",
  "column": "4",
  "context": "te = 'Found call chain that is too long: {0}'\n    code = 233\n\n\n@final\nclass TooComplexAnnotationViolation(ASTVi",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.MAX_CALL_LEVEL`\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found call chain that is too long: {0}'\n    code = 233\n\n\n@final\nclass TooComplexAnnotationViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 233\n"
 },
 "59": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1112",
  "column": "4",
  "context": "exity\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found overly complex annotation: {0}'\n    code = 234\n\n\n@final\nclass TooManyImportedModul",
  "context_lines": "        https://mypy.readthedocs.io/en/stable/kinds_of_types.html#type-aliases\n        https://github.com/best-doctor/flake8-annotations-complexity\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found overly complex annotation: {0}'\n    code = 234\n\n\n@final\nclass TooManyImportedModuleMembersViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found overly complex annotation: {0}'\n"
 },
 "60": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1113",
  "column": "4",
  "context": "late = 'Found overly complex annotation: {0}'\n    code = 234\n\n\n@final\nclass TooManyImportedModuleMembersViolati",
  "context_lines": "        https://github.com/best-doctor/flake8-annotations-complexity\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found overly complex annotation: {0}'\n    code = 234\n\n\n@final\nclass TooManyImportedModuleMembersViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 234\n"
 },
 "61": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1147",
  "column": "4",
  "context": "BERS`\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found too many imported names from a module: {0}'\n\n    code = 235\n\n\n@final\nclass TooLongTupleUnpackV",
  "context_lines": "        Default:\n        :str:`wemake_python_styleguide.options.defaults.MAX_IMPORT_FROM_MEMBERS`\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found too many imported names from a module: {0}'\n\n    code = 235\n\n\n@final\nclass TooLongTupleUnpackViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found too many imported names from a module: {0}'\n"
 },
 "62": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1149",
  "column": "4",
  "context": " too many imported names from a module: {0}'\n\n    code = 235\n\n\n@final\nclass TooLongTupleUnpackViolation(ASTViol",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.MAX_IMPORT_FROM_MEMBERS`\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found too many imported names from a module: {0}'\n\n    code = 235\n\n\n@final\nclass TooLongTupleUnpackViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 235\n"
 },
 "63": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1181",
  "column": "4",
  "context": "NGTH`\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found too many variables used to unpack a tuple: {0}'\n    code = 236\n\n\n@final\nclass TooComplexFormattedS",
  "context_lines": "        Default:\n        :str:`wemake_python_styleguide.options.defaults.MAX_TUPLE_UNPACK_LENGTH`\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found too many variables used to unpack a tuple: {0}'\n    code = 236\n\n\n@final\nclass TooComplexFormattedStringViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too many variables used to unpack a tuple: {0}'\n"
 },
 "64": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1182",
  "column": "4",
  "context": "o many variables used to unpack a tuple: {0}'\n    code = 236\n\n\n@final\nclass TooComplexFormattedStringViolation(",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.MAX_TUPLE_UNPACK_LENGTH`\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found too many variables used to unpack a tuple: {0}'\n    code = 236\n\n\n@final\nclass TooComplexFormattedStringViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 236\n"
 },
 "65": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1222",
  "column": "4",
  "context": "ds)}'\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found a too complex `f` string'\n    code = 237\n\n\n@final\nclass TooManyRaisesViolati",
  "context_lines": "        # Wrong:\n        f'{reverse(\"url-name\")}?{\"&\".join(\"user=\"+uid for uid in user_ids)}'\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found a too complex `f` string'\n    code = 237\n\n\n@final\nclass TooManyRaisesViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found a too complex `f` string'\n"
 },
 "66": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1223",
  "column": "4",
  "context": "r_template = 'Found a too complex `f` string'\n    code = 237\n\n\n@final\nclass TooManyRaisesViolation(ASTViolation",
  "context_lines": "        f'{reverse(\"url-name\")}?{\"&\".join(\"user=\"+uid for uid in user_ids)}'\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found a too complex `f` string'\n    code = 237\n\n\n@final\nclass TooManyRaisesViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 237\n"
 },
 "67": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1250",
  "column": "4",
  "context": "ISES`\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found too many raises in a function: {0}'\n    code = 238\n",
  "context_lines": "        Default:\n        :str:`wemake_python_styleguide.options.defaults.MAX_RAISES`\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found too many raises in a function: {0}'\n",
  "slicing": "    error_template = 'Found too many raises in a function: {0}'\n"
 },
 "68": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/complexity.py",
  "lineno": "1251",
  "column": "4",
  "context": " = 'Found too many raises in a function: {0}'\n    code = 238\n",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.MAX_RAISES`\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found too many raises in a function: {0}'\n    code = 238\n",
  "slicing": "    code = 238\n"
 },
 "69": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "188",
  "column": "4",
  "context": "Driver\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found local folder import'\n    code = 300\n\n\n@final\nclass DottedRawImportViola",
  "context_lines": "        from .version import get_version\n        from ..drivers import MySQLDriver\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found local folder import'\n    code = 300\n\n\n@final\nclass DottedRawImportViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found local folder import'\n"
 },
 "70": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "189",
  "column": "4",
  "context": " error_template = 'Found local folder import'\n    code = 300\n\n\n@final\nclass DottedRawImportViolation(ASTViolati",
  "context_lines": "        from ..drivers import MySQLDriver\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found local folder import'\n    code = 300\n\n\n@final\nclass DottedRawImportViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 300\n"
 },
 "71": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "217",
  "column": "4",
  "context": "s.path\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found dotted raw import: {0}'\n    code = 301\n\n\n@final\nclass UnicodeStringViolati",
  "context_lines": "        # Wrong:\n        import os.path\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found dotted raw import: {0}'\n    code = 301\n\n\n@final\nclass UnicodeStringViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found dotted raw import: {0}'\n"
 },
 "72": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "218",
  "column": "4",
  "context": "ror_template = 'Found dotted raw import: {0}'\n    code = 301\n\n\n@final\nclass UnicodeStringViolation(TokenizeViol",
  "context_lines": "        import os.path\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found dotted raw import: {0}'\n    code = 301\n\n\n@final\nclass UnicodeStringViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 301\n"
 },
 "73": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "246",
  "column": "4",
  "context": "olevn'\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 302\n    error_template = 'Found unicode string prefix:",
  "context_lines": "        # Wrong:\n        nickname = u'sobolevn'\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 302\n    error_template = 'Found unicode string prefix: {0}'\n\n\n@final\nclass UnderscoredNumberViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 302\n"
 },
 "74": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "247",
  "column": "4",
  "context": "versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 302\n    error_template = 'Found unicode string prefix: {0}'\n\n\n@final\nclass UnderscoredNumberViolation(Tokenize",
  "context_lines": "        nickname = u'sobolevn'\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 302\n    error_template = 'Found unicode string prefix: {0}'\n\n\n@final\nclass UnderscoredNumberViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found unicode string prefix: {0}'\n"
 },
 "75": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "281",
  "column": "4",
  "context": "_00_00\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 303\n    error_template = 'Found underscored number: {0",
  "context_lines": "        phone = 8_83_134_43\n        million = 100_00_00\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 303\n    error_template = 'Found underscored number: {0}'\n\n\n@final\nclass PartialFloatViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 303\n"
 },
 "76": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "282",
  "column": "4",
  "context": "versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 303\n    error_template = 'Found underscored number: {0}'\n\n\n@final\nclass PartialFloatViolation(TokenizeViola",
  "context_lines": "        million = 100_00_00\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 303\n    error_template = 'Found underscored number: {0}'\n\n\n@final\nclass PartialFloatViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found underscored number: {0}'\n"
 },
 "77": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "313",
  "column": "4",
  "context": " = 10.\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 304\n    error_template = 'Found partial float: {0}'\n\n\n",
  "context_lines": "        half = .5\n        ten_float = 10.\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 304\n    error_template = 'Found partial float: {0}'\n\n\n@final\nclass FormattedStringViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 304\n"
 },
 "78": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "314",
  "column": "4",
  "context": "versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 304\n    error_template = 'Found partial float: {0}'\n\n\n@final\nclass FormattedStringViolation(ASTViolati",
  "context_lines": "        ten_float = 10.\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 304\n    error_template = 'Found partial float: {0}'\n\n\n@final\nclass FormattedStringViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found partial float: {0}'\n"
 },
 "79": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "351",
  "column": "4",
  "context": "levn')\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found `f` string'\n    code = 305\n\n\n@final\nclass RequiredBaseClassVio",
  "context_lines": "        'Result is: {0}'.format(2 + 2)\n        'Hey {user}! How are you?'.format(user='sobolevn')\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found `f` string'\n    code = 305\n\n\n@final\nclass RequiredBaseClassViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found `f` string'\n"
 },
 "80": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "352",
  "column": "4",
  "context": " \"\"\"\n\n    error_template = 'Found `f` string'\n    code = 305\n\n\n@final\nclass RequiredBaseClassViolation(ASTViola",
  "context_lines": "        'Hey {user}! How are you?'.format(user='sobolevn')\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found `f` string'\n    code = 305\n\n\n@final\nclass RequiredBaseClassViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 305\n"
 },
 "81": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "387",
  "column": "4",
  "context": "e: ...\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found class without a base class: {0}'\n    code = 306\n\n\n@final\nclass MultipleIfsInCompreh",
  "context_lines": "        # Wrong:\n        class Some: ...\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found class without a base class: {0}'\n    code = 306\n\n\n@final\nclass MultipleIfsInComprehensionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found class without a base class: {0}'\n"
 },
 "82": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "388",
  "column": "4",
  "context": "ate = 'Found class without a base class: {0}'\n    code = 306\n\n\n@final\nclass MultipleIfsInComprehensionViolation",
  "context_lines": "        class Some: ...\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found class without a base class: {0}'\n    code = 306\n\n\n@final\nclass MultipleIfsInComprehensionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 306\n"
 },
 "83": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "417",
  "column": "4",
  "context": " 'i')]\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found list comprehension with multiple `if`s'\n    code = 307\n\n\n@final\nclass ConstantCompareViola",
  "context_lines": "        # Correct:\n        nodes = [node for node in html if node not in ('b', 'i')]\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found list comprehension with multiple `if`s'\n    code = 307\n\n\n@final\nclass ConstantCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found list comprehension with multiple `if`s'\n"
 },
 "84": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "418",
  "column": "4",
  "context": "Found list comprehension with multiple `if`s'\n    code = 307\n\n\n@final\nclass ConstantCompareViolation(ASTViolati",
  "context_lines": "        nodes = [node for node in html if node not in ('b', 'i')]\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found list comprehension with multiple `if`s'\n    code = 307\n\n\n@final\nclass ConstantCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 307\n"
 },
 "85": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "449",
  "column": "4",
  "context": "else()\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found constant comparison'\n    code = 308\n\n\n@final\nclass CompareOrderViolatio",
  "context_lines": "        # Correct:\n        do_something_else()\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found constant comparison'\n    code = 308\n\n\n@final\nclass CompareOrderViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found constant comparison'\n"
 },
 "86": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "450",
  "column": "4",
  "context": " error_template = 'Found constant comparison'\n    code = 308\n\n\n@final\nclass CompareOrderViolation(ASTViolation)",
  "context_lines": "        do_something_else()\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found constant comparison'\n    code = 308\n\n\n@final\nclass CompareOrderViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 308\n"
 },
 "87": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "479",
  "column": "4",
  "context": "ome_x:\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found reversed compare order'\n    code = 309\n\n\n@final\nclass BadNumberSuffixViola",
  "context_lines": "        # Wrong:\n        if 3 < some_x:\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found reversed compare order'\n    code = 309\n\n\n@final\nclass BadNumberSuffixViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found reversed compare order'\n"
 },
 "88": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "480",
  "column": "4",
  "context": "ror_template = 'Found reversed compare order'\n    code = 309\n\n\n@final\nclass BadNumberSuffixViolation(TokenizeVi",
  "context_lines": "        if 3 < some_x:\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found reversed compare order'\n    code = 309\n\n\n@final\nclass BadNumberSuffixViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 309\n"
 },
 "89": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "517",
  "column": "4",
  "context": ".5E+10\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found bad number suffix: {0}'\n    code = 310\n\n\n@final\nclass MultipleInCompareVio",
  "context_lines": "        binary_number = 0B1001\n        number_with_scientific_notation = 1.5E+10\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found bad number suffix: {0}'\n    code = 310\n\n\n@final\nclass MultipleInCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found bad number suffix: {0}'\n"
 },
 "90": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "518",
  "column": "4",
  "context": "ror_template = 'Found bad number suffix: {0}'\n    code = 310\n\n\n@final\nclass MultipleInCompareViolation(ASTViola",
  "context_lines": "        number_with_scientific_notation = 1.5E+10\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found bad number suffix: {0}'\n    code = 310\n\n\n@final\nclass MultipleInCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 310\n"
 },
 "91": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "548",
  "column": "4",
  "context": ".3.0\n    .. versionchanged:: 0.10.0\n\n    \"\"\"\n\n    error_template = 'Found multiple `in` compares'\n    code = 311\n\n\n@final\nclass UselessCompareViolat",
  "context_lines": "        if x_cord not in line not in square:\n\n    .. versionadded:: 0.3.0\n    .. versionchanged:: 0.10.0\n\n    \"\"\"\n\n    error_template = 'Found multiple `in` compares'\n    code = 311\n\n\n@final\nclass UselessCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found multiple `in` compares'\n"
 },
 "92": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "549",
  "column": "4",
  "context": "ror_template = 'Found multiple `in` compares'\n    code = 311\n\n\n@final\nclass UselessCompareViolation(ASTViolatio",
  "context_lines": "    .. versionadded:: 0.3.0\n    .. versionchanged:: 0.10.0\n\n    \"\"\"\n\n    error_template = 'Found multiple `in` compares'\n    code = 311\n\n\n@final\nclass UselessCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 311\n"
 },
 "93": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "580",
  "column": "4",
  "context": "else()\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found comparison of a variable to itself'\n    code = 312\n\n\n@final\nclass MissingSpaceBetweenK",
  "context_lines": "        else:\n            do_something_else()\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found comparison of a variable to itself'\n    code = 312\n\n\n@final\nclass MissingSpaceBetweenKeywordAndParenViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found comparison of a variable to itself'\n"
 },
 "94": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "581",
  "column": "4",
  "context": " = 'Found comparison of a variable to itself'\n    code = 312\n\n\n@final\nclass MissingSpaceBetweenKeywordAndParenV",
  "context_lines": "            do_something_else()\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found comparison of a variable to itself'\n    code = 312\n\n\n@final\nclass MissingSpaceBetweenKeywordAndParenViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 312\n"
 },
 "95": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "615",
  "column": "4",
  "context": " 2, 3)\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found parenthesis immediately after a keyword'\n    code = 313\n\n\n@final\nclass ConstantConditionVio",
  "context_lines": "            del (a, b)\n            yield (1, 2, 3)\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found parenthesis immediately after a keyword'\n    code = 313\n\n\n@final\nclass ConstantConditionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found parenthesis immediately after a keyword'\n"
 },
 "96": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "616",
  "column": "4",
  "context": "ound parenthesis immediately after a keyword'\n    code = 313\n\n\n@final\nclass ConstantConditionViolation(ASTViola",
  "context_lines": "            yield (1, 2, 3)\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found parenthesis immediately after a keyword'\n    code = 313\n\n\n@final\nclass ConstantConditionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 313\n"
 },
 "97": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "644",
  "column": "4",
  "context": "e: ...\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found conditional that always evaluates the same'\n    code = 314\n\n\n@final\nclass ObjectInBaseClassesL",
  "context_lines": "        # Wrong:\n        if True: ...\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found conditional that always evaluates the same'\n    code = 314\n\n\n@final\nclass ObjectInBaseClassesListViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found conditional that always evaluates the same'\n"
 },
 "98": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "645",
  "column": "4",
  "context": "d conditional that always evaluates the same'\n    code = 314\n\n\n@final\nclass ObjectInBaseClassesListViolation(AS",
  "context_lines": "        if True: ...\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found conditional that always evaluates the same'\n    code = 314\n\n\n@final\nclass ObjectInBaseClassesListViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 314\n"
 },
 "99": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "675",
  "column": "4",
  "context": "): ...\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found extra `object` in parent classes list'\n    code = 315\n\n\n@final\nclass MultipleContextManag",
  "context_lines": "       # Wrong:\n       class SomeClassName(FirstParentClass, SecondParentClass, object): ...\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found extra `object` in parent classes list'\n    code = 315\n\n\n@final\nclass MultipleContextManagerAssignmentsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found extra `object` in parent classes list'\n"
 },
 "100": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "676",
  "column": "4",
  "context": "'Found extra `object` in parent classes list'\n    code = 315\n\n\n@final\nclass MultipleContextManagerAssignmentsVi",
  "context_lines": "       class SomeClassName(FirstParentClass, SecondParentClass, object): ...\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found extra `object` in parent classes list'\n    code = 315\n\n\n@final\nclass MultipleContextManagerAssignmentsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 315\n"
 },
 "101": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "709",
  "column": "4",
  "context": "   ...\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found context manager with too many assignments'\n    code = 316\n\n\n@final\nclass ParametersIndentatio",
  "context_lines": "        with open('') as first, second:\n            ...\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found context manager with too many assignments'\n    code = 316\n\n\n@final\nclass ParametersIndentationViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found context manager with too many assignments'\n"
 },
 "102": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "710",
  "column": "4",
  "context": "nd context manager with too many assignments'\n    code = 316\n\n\n@final\nclass ParametersIndentationViolation(ASTV",
  "context_lines": "            ...\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found context manager with too many assignments'\n    code = 316\n\n\n@final\nclass ParametersIndentationViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 316\n"
 },
 "103": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "785",
  "column": "4",
  "context": "asses.\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect multi-line parameters'\n    code = 317\n\n\n@final\nclass ExtraIndentationViol",
  "context_lines": "    This rule checks: lists, sets, tuples, dicts, calls,\n    functions, methods, and classes.\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect multi-line parameters'\n    code = 317\n\n\n@final\nclass ExtraIndentationViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found incorrect multi-line parameters'\n"
 },
 "104": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "786",
  "column": "4",
  "context": "ate = 'Found incorrect multi-line parameters'\n    code = 317\n\n\n@final\nclass ExtraIndentationViolation(TokenizeV",
  "context_lines": "    functions, methods, and classes.\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect multi-line parameters'\n    code = 317\n\n\n@final\nclass ExtraIndentationViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 317\n"
 },
 "105": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "826",
  "column": "4",
  "context": "t.toml\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found extra indentation'\n    code = 318\n\n\n@final\nclass WrongBracketPosition",
  "context_lines": "        https://github.com/timothycrosley/isort#multi-line-output-modes\n        https://github.com/wemake-services/wemake-python-styleguide/blob/master/styles/isort.toml\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found extra indentation'\n    code = 318\n\n\n@final\nclass WrongBracketPositionViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found extra indentation'\n"
 },
 "106": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "827",
  "column": "4",
  "context": "   error_template = 'Found extra indentation'\n    code = 318\n\n\n@final\nclass WrongBracketPositionViolation(Token",
  "context_lines": "        https://github.com/wemake-services/wemake-python-styleguide/blob/master/styles/isort.toml\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found extra indentation'\n    code = 318\n\n\n@final\nclass WrongBracketPositionViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 318\n"
 },
 "107": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "879",
  "column": "4",
  "context": "ckets.\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found bracket in wrong position'\n    code = 319\n\n\n@final\nclass MultilineFunctionAnn",
  "context_lines": "            ...\n\n    We check round, square, and curly brackets.\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found bracket in wrong position'\n    code = 319\n\n\n@final\nclass MultilineFunctionAnnotationViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found bracket in wrong position'\n"
 },
 "108": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "880",
  "column": "4",
  "context": "_template = 'Found bracket in wrong position'\n    code = 319\n\n\n@final\nclass MultilineFunctionAnnotationViolatio",
  "context_lines": "    We check round, square, and curly brackets.\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found bracket in wrong position'\n    code = 319\n\n\n@final\nclass MultilineFunctionAnnotationViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 319\n"
 },
 "109": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "913",
  "column": "4",
  "context": "tions.\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found multi-line function type annotation'\n    code = 320\n\n\n@final\nclass UppercaseStringModif",
  "context_lines": "            ...\n\n    This rule checks argument and return type annotations.\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found multi-line function type annotation'\n    code = 320\n\n\n@final\nclass UppercaseStringModifierViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found multi-line function type annotation'\n"
 },
 "110": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "914",
  "column": "4",
  "context": "= 'Found multi-line function type annotation'\n    code = 320\n\n\n@final\nclass UppercaseStringModifierViolation(To",
  "context_lines": "    This rule checks argument and return type annotations.\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found multi-line function type annotation'\n    code = 320\n\n\n@final\nclass UppercaseStringModifierViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 320\n"
 },
 "111": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "942",
  "column": "4",
  "context": "B'123'\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found uppercase string modifier: {0}'\n    code = 321\n\n\n@final\nclass WrongMultilineString",
  "context_lines": "        some_string = R'/regex/'\n        some_bytes = B'123'\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found uppercase string modifier: {0}'\n    code = 321\n\n\n@final\nclass WrongMultilineStringViolation(TokenizeViolation):\n    '''\n",
  "slicing": "    error_template = 'Found uppercase string modifier: {0}'\n"
 },
 "112": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "943",
  "column": "4",
  "context": "late = 'Found uppercase string modifier: {0}'\n    code = 321\n\n\n@final\nclass WrongMultilineStringViolation(Token",
  "context_lines": "        some_bytes = B'123'\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found uppercase string modifier: {0}'\n    code = 321\n\n\n@final\nclass WrongMultilineStringViolation(TokenizeViolation):\n    '''\n",
  "slicing": "    code = 321\n"
 },
 "113": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "978",
  "column": "4",
  "context": "rings.\n\n    .. versionadded:: 0.7.0\n\n    '''\n\n    error_template = 'Found incorrect multi-line string'\n    code = 322\n\n\n@final\nclass ModuloStringFormatVi",
  "context_lines": "    Docstrings are ignored from this rule.\n    You must use triple quotes strings for docstrings.\n\n    .. versionadded:: 0.7.0\n\n    '''\n\n    error_template = 'Found incorrect multi-line string'\n    code = 322\n\n\n@final\nclass ModuloStringFormatViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found incorrect multi-line string'\n"
 },
 "114": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "979",
  "column": "4",
  "context": "emplate = 'Found incorrect multi-line string'\n    code = 322\n\n\n@final\nclass ModuloStringFormatViolation(ASTViol",
  "context_lines": "    You must use triple quotes strings for docstrings.\n\n    .. versionadded:: 0.7.0\n\n    '''\n\n    error_template = 'Found incorrect multi-line string'\n    code = 322\n\n\n@final\nclass ModuloStringFormatViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 322\n"
 },
 "115": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1022",
  "column": "4",
  "context": "info/\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found `%` string formatting'\n    code = 323\n\n\n@final\nclass InconsistentReturnVi",
  "context_lines": "        https://docs.python.org/3/library/stdtypes.html#old-string-formatting\n        https://pyformat.info/\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found `%` string formatting'\n    code = 323\n\n\n@final\nclass InconsistentReturnViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found `%` string formatting'\n"
 },
 "116": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1023",
  "column": "4",
  "context": "rror_template = 'Found `%` string formatting'\n    code = 323\n\n\n@final\nclass InconsistentReturnViolation(ASTViol",
  "context_lines": "        https://pyformat.info/\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found `%` string formatting'\n    code = 323\n\n\n@final\nclass InconsistentReturnViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 323\n"
 },
 "117": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1065",
  "column": "4",
  "context": "turn 1\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found inconsistent `return` statement'\n    code = 324\n\n\n@final\nclass InconsistentYieldVio",
  "context_lines": "                return\n            return 1\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found inconsistent `return` statement'\n    code = 324\n\n\n@final\nclass InconsistentYieldViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found inconsistent `return` statement'\n"
 },
 "118": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1066",
  "column": "4",
  "context": "ate = 'Found inconsistent `return` statement'\n    code = 324\n\n\n@final\nclass InconsistentYieldViolation(ASTViola",
  "context_lines": "            return 1\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found inconsistent `return` statement'\n    code = 324\n\n\n@final\nclass InconsistentYieldViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 324\n"
 },
 "119": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1106",
  "column": "4",
  "context": "ield 1\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found inconsistent `yield` statement'\n    code = 325\n\n\n@final\nclass ImplicitStringConcat",
  "context_lines": "                yield\n            yield 1\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found inconsistent `yield` statement'\n    code = 325\n\n\n@final\nclass ImplicitStringConcatenationViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found inconsistent `yield` statement'\n"
 },
 "120": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1107",
  "column": "4",
  "context": "late = 'Found inconsistent `yield` statement'\n    code = 325\n\n\n@final\nclass ImplicitStringConcatenationViolatio",
  "context_lines": "            yield 1\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found inconsistent `yield` statement'\n    code = 325\n\n\n@final\nclass ImplicitStringConcatenationViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 325\n"
 },
 "121": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1136",
  "column": "4",
  "context": "econd'\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found implicit string concatenation'\n    code = 326\n\n\n@final\nclass UselessContinueViola",
  "context_lines": "        # Wrong:\n        text = 'first' 'second'\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found implicit string concatenation'\n    code = 326\n\n\n@final\nclass UselessContinueViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found implicit string concatenation'\n"
 },
 "122": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1137",
  "column": "4",
  "context": "plate = 'Found implicit string concatenation'\n    code = 326\n\n\n@final\nclass UselessContinueViolation(ASTViolati",
  "context_lines": "        text = 'first' 'second'\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found implicit string concatenation'\n    code = 326\n\n\n@final\nclass UselessContinueViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 326\n"
 },
 "123": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1180",
  "column": "4",
  "context": "ntinue\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found useless `continue` at the end of the loop'\n    code = 327\n\n\n@final\nclass UselessNodeViolation",
  "context_lines": "            except Exception:\n                continue\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found useless `continue` at the end of the loop'\n    code = 327\n\n\n@final\nclass UselessNodeViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found useless `continue` at the end of the loop'\n"
 },
 "124": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1181",
  "column": "4",
  "context": "nd useless `continue` at the end of the loop'\n    code = 327\n\n\n@final\nclass UselessNodeViolation(ASTViolation):",
  "context_lines": "                continue\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found useless `continue` at the end of the loop'\n    code = 327\n\n\n@final\nclass UselessNodeViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 327\n"
 },
 "125": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1208",
  "column": "4",
  "context": " break\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found useless node: {0}'\n    code = 328\n\n\n@final\nclass UselessExceptCaseVio",
  "context_lines": "        for number in [1, 2, 3]:\n            break\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found useless node: {0}'\n    code = 328\n\n\n@final\nclass UselessExceptCaseViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found useless node: {0}'\n"
 },
 "126": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1209",
  "column": "4",
  "context": "   error_template = 'Found useless node: {0}'\n    code = 328\n\n\n@final\nclass UselessExceptCaseViolation(ASTViola",
  "context_lines": "            break\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found useless node: {0}'\n    code = 328\n\n\n@final\nclass UselessExceptCaseViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 328\n"
 },
 "127": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1250",
  "column": "4",
  "context": " raise\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found useless `except` case'\n    code = 329\n\n\n@final\nclass UselessOperatorsViol",
  "context_lines": "        except TypeError:\n            raise\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found useless `except` case'\n    code = 329\n\n\n@final\nclass UselessOperatorsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too many raises in a function: {0}'\n"
 },
 "128": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1251",
  "column": "4",
  "context": "rror_template = 'Found useless `except` case'\n    code = 329\n\n\n@final\nclass UselessOperatorsViolation(ASTViolat",
  "context_lines": "            raise\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found useless `except` case'\n    code = 329\n\n\n@final\nclass UselessOperatorsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 238\n"
 },
 "129": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1288",
  "column": "4",
  "context": "ot foo\n\n    .. versionadded:: 0.8.0\n\n    \"\"\"\n\n    code = 330\n    error_template = 'Found unnecessary operator: ",
  "context_lines": "        number = ~~42\n        bar = not not foo\n\n    .. versionadded:: 0.8.0\n\n    \"\"\"\n\n    code = 330\n    error_template = 'Found unnecessary operator: {0}'\n\n\n@final\nclass InconsistentReturnVariableViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 330\n"
 },
 "130": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1289",
  "column": "4",
  "context": "versionadded:: 0.8.0\n\n    \"\"\"\n\n    code = 330\n    error_template = 'Found unnecessary operator: {0}'\n\n\n@final\nclass InconsistentReturnVariableViolation",
  "context_lines": "        bar = not not foo\n\n    .. versionadded:: 0.8.0\n\n    \"\"\"\n\n    code = 330\n    error_template = 'Found unnecessary operator: {0}'\n\n\n@final\nclass InconsistentReturnVariableViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found unnecessary operator: {0}'\n"
 },
 "131": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1334",
  "column": "4",
  "context": ".9.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found variables that are only used for `return`: {0}'\n    code = 331\n\n\n@final\nclass WalrusViolation(ASTV",
  "context_lines": "            return some_value\n\n\n    .. versionadded:: 0.9.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found variables that are only used for `return`: {0}'\n    code = 331\n\n\n@final\nclass WalrusViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found variables that are only used for `return`: {0}'\n"
 },
 "132": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1335",
  "column": "4",
  "context": "riables that are only used for `return`: {0}'\n    code = 331\n\n\n@final\nclass WalrusViolation(ASTViolation):\n    ",
  "context_lines": "    .. versionadded:: 0.9.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found variables that are only used for `return`: {0}'\n    code = 331\n\n\n@final\nclass WalrusViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 331\n"
 },
 "133": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1369",
  "column": "4",
  "context": "some)\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found walrus operator'\n    code = 332\n\n\n@final\nclass ImplicitComplexCompa",
  "context_lines": "        if some := call():\n            print(some)\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found walrus operator'\n    code = 332\n\n\n@final\nclass ImplicitComplexCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found walrus operator'\n"
 },
 "134": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1370",
  "column": "4",
  "context": "\n    error_template = 'Found walrus operator'\n    code = 332\n\n\n@final\nclass ImplicitComplexCompareViolation(AST",
  "context_lines": "            print(some)\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found walrus operator'\n    code = 332\n\n\n@final\nclass ImplicitComplexCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 332\n"
 },
 "135": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1400",
  "column": "4",
  "context": "  ...\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    code = 333\n    error_template = 'Found implicit complex compa",
  "context_lines": "        if one > two and two > three:\n            ...\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    code = 333\n    error_template = 'Found implicit complex compare'\n\n\n@final\nclass ReversedComplexCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 333\n"
 },
 "136": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1401",
  "column": "4",
  "context": "ersionadded:: 0.10.0\n\n    \"\"\"\n\n    code = 333\n    error_template = 'Found implicit complex compare'\n\n\n@final\nclass ReversedComplexCompareViolation(AST",
  "context_lines": "            ...\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    code = 333\n    error_template = 'Found implicit complex compare'\n\n\n@final\nclass ReversedComplexCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found implicit complex compare'\n"
 },
 "137": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1433",
  "column": "4",
  "context": "  ...\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    code = 334\n    error_template = 'Found reversed complex compa",
  "context_lines": "        if one > two > three:\n            ...\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    code = 334\n    error_template = 'Found reversed complex comparison'\n\n\n@final\nclass WrongLoopIterTypeViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 334\n"
 },
 "138": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1434",
  "column": "4",
  "context": "ersionadded:: 0.10.0\n\n    \"\"\"\n\n    code = 334\n    error_template = 'Found reversed complex comparison'\n\n\n@final\nclass WrongLoopIterTypeViolation(ASTViola",
  "context_lines": "            ...\n\n    .. versionadded:: 0.10.0\n\n    \"\"\"\n\n    code = 334\n    error_template = 'Found reversed complex comparison'\n\n\n@final\nclass WrongLoopIterTypeViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found reversed complex comparison'\n"
 },
 "139": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1475",
  "column": "4",
  "context": "10.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    code = 335\n    error_template = 'Found incorrect `for` loop i",
  "context_lines": "            ...\n\n    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    code = 335\n    error_template = 'Found incorrect `for` loop iter type'\n\n\n@final\nclass ExplicitStringConcatViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 335\n"
 },
 "140": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1476",
  "column": "4",
  "context": "sionchanged:: 0.12.0\n\n    \"\"\"\n\n    code = 335\n    error_template = 'Found incorrect `for` loop iter type'\n\n\n@final\nclass ExplicitStringConcatViolation(ASTVi",
  "context_lines": "    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    code = 335\n    error_template = 'Found incorrect `for` loop iter type'\n\n\n@final\nclass ExplicitStringConcatViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found incorrect `for` loop iter type'\n"
 },
 "141": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1507",
  "column": "4",
  "context": "_data\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 336\n    error_template = 'Found explicit string concat",
  "context_lines": "        # Wrong:\n        x = 'a' + 'b: ' + some_data\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 336\n    error_template = 'Found explicit string concatanation'\n\n\n@final\nclass MultilineConditionsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 336\n"
 },
 "142": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1508",
  "column": "4",
  "context": "ersionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 336\n    error_template = 'Found explicit string concatanation'\n\n\n@final\nclass MultilineConditionsViolation(ASTVio",
  "context_lines": "        x = 'a' + 'b: ' + some_data\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 336\n    error_template = 'Found explicit string concatanation'\n\n\n@final\nclass MultilineConditionsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found explicit string concatanation'\n"
 },
 "143": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1543",
  "column": "4",
  "context": ".9.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found multiline conditions'\n    code = 337\n    previous_codes = {465}\n\n\n@final",
  "context_lines": "            ...\n\n    .. versionadded:: 0.9.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found multiline conditions'\n    code = 337\n    previous_codes = {465}\n\n\n@final\nclass WrongMethodOrderViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found multiline conditions'\n"
 },
 "144": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1544",
  "column": "4",
  "context": "error_template = 'Found multiline conditions'\n    code = 337\n    previous_codes = {465}\n\n\n@final\nclass WrongMet",
  "context_lines": "    .. versionadded:: 0.9.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found multiline conditions'\n    code = 337\n    previous_codes = {465}\n\n\n@final\nclass WrongMethodOrderViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 337\n"
 },
 "145": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1577",
  "column": "4",
  "context": "rmat.\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect order of methods in a class'\n    code = 338\n\n\n@final\nclass NumberWithMeaningles",
  "context_lines": "    Solution:\n        Reorder methods inside your class to match our format.\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect order of methods in a class'\n    code = 338\n\n\n@final\nclass NumberWithMeaninglessZeroViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found incorrect order of methods in a class'\n"
 },
 "146": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1578",
  "column": "4",
  "context": "'Found incorrect order of methods in a class'\n    code = 338\n\n\n@final\nclass NumberWithMeaninglessZeroViolation(",
  "context_lines": "        Reorder methods inside your class to match our format.\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect order of methods in a class'\n    code = 338\n\n\n@final\nclass NumberWithMeaninglessZeroViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 338\n"
 },
 "147": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1612",
  "column": "4",
  "context": "e010]\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found number with meaningless zeros: {0}'\n    code = 339\n\n\n@final\nclass PositiveExponentViol",
  "context_lines": "        # Wrong:\n        numbers = [1.50, 0b00000001, 0o0002, 0x05, 10e010]\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found number with meaningless zeros: {0}'\n    code = 339\n\n\n@final\nclass PositiveExponentViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found number with meaningless zeros: {0}'\n"
 },
 "148": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1613",
  "column": "4",
  "context": " = 'Found number with meaningless zeros: {0}'\n    code = 339\n\n\n@final\nclass PositiveExponentViolation(TokenizeV",
  "context_lines": "        numbers = [1.50, 0b00000001, 0o0002, 0x05, 10e010]\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found number with meaningless zeros: {0}'\n    code = 339\n\n\n@final\nclass PositiveExponentViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 339\n"
 },
 "149": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1641",
  "column": "4",
  "context": " 1e+1\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found exponent number with positive exponent: {0}'\n    code = 340\n\n\n@final\nclass WrongHexNumberCaseVi",
  "context_lines": "        # Wrong:\n        number = 1e+1\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found exponent number with positive exponent: {0}'\n    code = 340\n\n\n@final\nclass WrongHexNumberCaseViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found exponent number with positive exponent: {0}'\n"
 },
 "150": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1642",
  "column": "4",
  "context": " exponent number with positive exponent: {0}'\n    code = 340\n\n\n@final\nclass WrongHexNumberCaseViolation(Tokeniz",
  "context_lines": "        number = 1e+1\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found exponent number with positive exponent: {0}'\n    code = 340\n\n\n@final\nclass WrongHexNumberCaseViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 340\n"
 },
 "151": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1669",
  "column": "4",
  "context": "bcdef\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found wrong hex number case: {0}'\n    code = 341\n\n\n@final\nclass ImplicitRawStringVio",
  "context_lines": "        # Wrong:\n        number = 0xabcdef\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found wrong hex number case: {0}'\n    code = 341\n\n\n@final\nclass ImplicitRawStringViolation(TokenizeViolation):\n    r\"\"\"\n",
  "slicing": "    error_template = 'Found wrong hex number case: {0}'\n"
 },
 "152": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1670",
  "column": "4",
  "context": "template = 'Found wrong hex number case: {0}'\n    code = 341\n\n\n@final\nclass ImplicitRawStringViolation(Tokenize",
  "context_lines": "        number = 0xabcdef\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found wrong hex number case: {0}'\n    code = 341\n\n\n@final\nclass ImplicitRawStringViolation(TokenizeViolation):\n    r\"\"\"\n",
  "slicing": "    code = 341\n"
 },
 "153": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1698",
  "column": "4",
  "context": "'\\\\n'\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found implicit raw string: {0}'\n    code = 342\n\n\n@final\nclass BadComplexNumberSuff",
  "context_lines": "        # Wrong:\n        escaped = '\\\\n'\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found implicit raw string: {0}'\n    code = 342\n\n\n@final\nclass BadComplexNumberSuffixViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found implicit raw string: {0}'\n"
 },
 "154": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1699",
  "column": "4",
  "context": "r_template = 'Found implicit raw string: {0}'\n    code = 342\n\n\n@final\nclass BadComplexNumberSuffixViolation(Tok",
  "context_lines": "        escaped = '\\\\n'\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found implicit raw string: {0}'\n    code = 342\n\n\n@final\nclass BadComplexNumberSuffixViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 342\n"
 },
 "155": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1725",
  "column": "4",
  "context": " = 1J\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found wrong complex number suffix: {0}'\n    code = 343\n\n\n@final\nclass ZeroDivisionViolatio",
  "context_lines": "        # Wrong:\n        complex_number = 1J\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found wrong complex number suffix: {0}'\n    code = 343\n\n\n@final\nclass ZeroDivisionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found wrong complex number suffix: {0}'\n"
 },
 "156": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1726",
  "column": "4",
  "context": "te = 'Found wrong complex number suffix: {0}'\n    code = 343\n\n\n@final\nclass ZeroDivisionViolation(ASTViolation)",
  "context_lines": "        complex_number = 1J\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found wrong complex number suffix: {0}'\n    code = 343\n\n\n@final\nclass ZeroDivisionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 343\n"
 },
 "157": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1757",
  "column": "4",
  "context": ".12.0\n    .. versionchanged: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found explicit zero division'\n    code = 344\n\n\n@final\nclass MeaninglessNumberOpe",
  "context_lines": "        1 % 0\n\n    .. versionadded:: 0.12.0\n    .. versionchanged: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found explicit zero division'\n    code = 344\n\n\n@final\nclass MeaninglessNumberOperationViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found explicit zero division'\n"
 },
 "158": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1758",
  "column": "4",
  "context": "ror_template = 'Found explicit zero division'\n    code = 344\n\n\n@final\nclass MeaninglessNumberOperationViolation",
  "context_lines": "    .. versionadded:: 0.12.0\n    .. versionchanged: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found explicit zero division'\n    code = 344\n\n\n@final\nclass MeaninglessNumberOperationViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 344\n"
 },
 "159": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1799",
  "column": "4",
  "context": "12.0\n    .. versionchanged:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found meaningless number operation'\n    code = 345\n\n\n@final\nclass OperationSignNegatio",
  "context_lines": "        three = 3 % 1\n\n    .. versionadded:: 0.12.0\n    .. versionchanged:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found meaningless number operation'\n    code = 345\n\n\n@final\nclass OperationSignNegationViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found meaningless number operation'\n"
 },
 "160": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1800",
  "column": "4",
  "context": "mplate = 'Found meaningless number operation'\n    code = 345\n\n\n@final\nclass OperationSignNegationViolation(ASTV",
  "context_lines": "    .. versionadded:: 0.12.0\n    .. versionchanged:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found meaningless number operation'\n    code = 345\n\n\n@final\nclass OperationSignNegationViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 345\n"
 },
 "161": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1834",
  "column": "4",
  "context": "+= -2\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found wrong operation sign'\n    code = 346\n\n\n@final\nclass VagueImportViolation",
  "context_lines": "        number -= -6\n        number += -2\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found wrong operation sign'\n    code = 346\n\n\n@final\nclass VagueImportViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found wrong operation sign'\n"
 },
 "162": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1835",
  "column": "4",
  "context": "error_template = 'Found wrong operation sign'\n    code = 346\n\n\n@final\nclass VagueImportViolation(ASTViolation):",
  "context_lines": "        number += -2\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found wrong operation sign'\n    code = 346\n\n\n@final\nclass VagueImportViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 346\n"
 },
 "163": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1877",
  "column": "4",
  "context": "13.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found vague import that may cause confusion: {0}'\n    code = 347\n\n\n@final\nclass LineStartsWithDotVio",
  "context_lines": "        from json import loads\n\n    .. versionadded:: 0.13.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found vague import that may cause confusion: {0}'\n    code = 347\n\n\n@final\nclass LineStartsWithDotViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found vague import that may cause confusion: {0}'\n"
 },
 "164": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1878",
  "column": "4",
  "context": "d vague import that may cause confusion: {0}'\n    code = 347\n\n\n@final\nclass LineStartsWithDotViolation(Tokenize",
  "context_lines": "    .. versionadded:: 0.13.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found vague import that may cause confusion: {0}'\n    code = 347\n\n\n@final\nclass LineStartsWithDotViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 347\n"
 },
 "165": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1916",
  "column": "4",
  "context": "    )\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found a line that starts with a dot'\n    code = 348\n\n\n@final\nclass RedundantSubscriptVi",
  "context_lines": "                .annotate(...)\n        )\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found a line that starts with a dot'\n    code = 348\n\n\n@final\nclass RedundantSubscriptViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found a line that starts with a dot'\n"
 },
 "166": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1917",
  "column": "4",
  "context": "plate = 'Found a line that starts with a dot'\n    code = 348\n\n\n@final\nclass RedundantSubscriptViolation(ASTViol",
  "context_lines": "        )\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found a line that starts with a dot'\n    code = 348\n\n\n@final\nclass RedundantSubscriptViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 348\n"
 },
 "167": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1942",
  "column": "4",
  "context": "None]\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found redundant subscript slice'\n    code = 349\n\n\n@final\nclass AugmentedAssignPatte",
  "context_lines": "        x[0:7]\n        x[3:None]\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found redundant subscript slice'\n    code = 349\n\n\n@final\nclass AugmentedAssignPatternViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found redundant subscript slice'\n"
 },
 "168": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1943",
  "column": "4",
  "context": "_template = 'Found redundant subscript slice'\n    code = 349\n\n\n@final\nclass AugmentedAssignPatternViolation(AST",
  "context_lines": "        x[3:None]\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found redundant subscript slice'\n    code = 349\n\n\n@final\nclass AugmentedAssignPatternViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 349\n"
 },
 "169": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1967",
  "column": "4",
  "context": "a + b\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found usable augmented assign pattern'\n    code = 350\n\n\n@final\nclass UnnecessaryLiteralsV",
  "context_lines": "        # Wrong:\n        a = a + b\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found usable augmented assign pattern'\n    code = 350\n\n\n@final\nclass UnnecessaryLiteralsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found usable augmented assign pattern'\n"
 },
 "170": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1968",
  "column": "4",
  "context": "ate = 'Found usable augmented assign pattern'\n    code = 350\n\n\n@final\nclass UnnecessaryLiteralsViolation(ASTVio",
  "context_lines": "        a = a + b\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found usable augmented assign pattern'\n    code = 350\n\n\n@final\nclass UnnecessaryLiteralsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 350\n"
 },
 "171": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1995",
  "column": "4",
  "context": "int()\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found unnecessary literals'\n    code = 351\n\n\n@final\nclass MultilineLoopViolati",
  "context_lines": "        # Wrong:\n        default = int()\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found unnecessary literals'\n    code = 351\n\n\n@final\nclass MultilineLoopViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found unnecessary literals'\n"
 },
 "172": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "1996",
  "column": "4",
  "context": "error_template = 'Found unnecessary literals'\n    code = 351\n\n\n@final\nclass MultilineLoopViolation(ASTViolation",
  "context_lines": "        default = int()\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found unnecessary literals'\n    code = 351\n\n\n@final\nclass MultilineLoopViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 351\n"
 },
 "173": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2028",
  "column": "4",
  "context": "  ...\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found multiline loop'\n    code = 352\n\n\n@final\nclass IncorrectYieldFromTa",
  "context_lines": "        ):\n            ...\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found multiline loop'\n    code = 352\n\n\n@final\nclass IncorrectYieldFromTargetViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found multiline loop'\n"
 },
 "174": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2029",
  "column": "4",
  "context": "\n\n    error_template = 'Found multiline loop'\n    code = 352\n\n\n@final\nclass IncorrectYieldFromTargetViolation(A",
  "context_lines": "            ...\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found multiline loop'\n    code = 352\n\n\n@final\nclass IncorrectYieldFromTargetViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 352\n"
 },
 "175": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2062",
  "column": "4",
  "context": "2, 3]\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect `yield from` target'\n    code = 353\n\n\n@final\nclass ConsecutiveYieldsVio",
  "context_lines": "        # Wrong:\n        yield from [1, 2, 3]\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect `yield from` target'\n    code = 353\n\n\n@final\nclass ConsecutiveYieldsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found incorrect `yield from` target'\n"
 },
 "176": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2063",
  "column": "4",
  "context": "plate = 'Found incorrect `yield from` target'\n    code = 353\n\n\n@final\nclass ConsecutiveYieldsViolation(ASTViola",
  "context_lines": "        yield from [1, 2, 3]\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect `yield from` target'\n    code = 353\n\n\n@final\nclass ConsecutiveYieldsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 353\n"
 },
 "177": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2085",
  "column": "4",
  "context": "rmat.\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found consecutive `yield` expressions'\n    code = 354\n\n\n@final\nclass BracketBlankLineViol",
  "context_lines": "    Solution:\n        It can be easily changed to ``yield from (...)`` format.\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found consecutive `yield` expressions'\n    code = 354\n\n\n@final\nclass BracketBlankLineViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found consecutive `yield` expressions'\n"
 },
 "178": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2086",
  "column": "4",
  "context": "ate = 'Found consecutive `yield` expressions'\n    code = 354\n\n\n@final\nclass BracketBlankLineViolation(TokenizeV",
  "context_lines": "        It can be easily changed to ``yield from (...)`` format.\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found consecutive `yield` expressions'\n    code = 354\n\n\n@final\nclass BracketBlankLineViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 354\n"
 },
 "179": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2120",
  "column": "4",
  "context": "    ]\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found an unnecessary blank line before a bracket'\n    code = 355\n\n\n@final\nclass IterableUnpackingVio",
  "context_lines": "            2,\n\n        ]\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found an unnecessary blank line before a bracket'\n    code = 355\n\n\n@final\nclass IterableUnpackingViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found an unnecessary blank line before a bracket'\n"
 },
 "180": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2121",
  "column": "4",
  "context": "d an unnecessary blank line before a bracket'\n    code = 355\n\n\n@final\nclass IterableUnpackingViolation(ASTViola",
  "context_lines": "        ]\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found an unnecessary blank line before a bracket'\n    code = 355\n\n\n@final\nclass IterableUnpackingViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 355\n"
 },
 "181": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2151",
  "column": "4",
  "context": "rable\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found an unnecessary iterable unpacking'\n    code = 356\n\n\n@final\nclass LineCompriseCarriage",
  "context_lines": "        [*iterable]\n        *iterable, = other_iterable\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found an unnecessary iterable unpacking'\n    code = 356\n\n\n@final\nclass LineCompriseCarriageReturnViolation(TokenizeViolation):\n    r\"\"\"\n",
  "slicing": "    error_template = 'Found an unnecessary iterable unpacking'\n"
 },
 "182": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2152",
  "column": "4",
  "context": "e = 'Found an unnecessary iterable unpacking'\n    code = 356\n\n\n@final\nclass LineCompriseCarriageReturnViolation",
  "context_lines": "        *iterable, = other_iterable\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found an unnecessary iterable unpacking'\n    code = 356\n\n\n@final\nclass LineCompriseCarriageReturnViolation(TokenizeViolation):\n    r\"\"\"\n",
  "slicing": "    code = 356\n"
 },
 "183": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2172",
  "column": "4",
  "context": "ines.\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = r'Found a ``\\r`` (carriage return) line break'\n    code = 357\n\n\n@final\nclass FloatZeroViolation(T",
  "context_lines": "    Solution:\n        Use only ``\\n`` (not ``\\r\\n`` or ``\\r``) to break lines.\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = r'Found a ``\\r`` (carriage return) line break'\n    code = 357\n\n\n@final\nclass FloatZeroViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = r'Found a ``\\r`` (carriage return) line break'\n"
 },
 "184": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2173",
  "column": "4",
  "context": "'Found a ``\\r`` (carriage return) line break'\n    code = 357\n\n\n@final\nclass FloatZeroViolation(TokenizeViolatio",
  "context_lines": "        Use only ``\\n`` (not ``\\r\\n`` or ``\\r``) to break lines.\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = r'Found a ``\\r`` (carriage return) line break'\n    code = 357\n\n\n@final\nclass FloatZeroViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 357\n"
 },
 "185": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2202",
  "column": "4",
  "context": "= 0.0\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    code = 358\n    error_template = 'Found a float zero (0.0)'\n\n\n",
  "context_lines": "        # Wrong:\n        zero = 0.0\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    code = 358\n    error_template = 'Found a float zero (0.0)'\n\n\n@final\nclass UnpackingIterableToListViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 358\n"
 },
 "186": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2203",
  "column": "4",
  "context": "ersionadded:: 0.15.0\n\n    \"\"\"\n\n    code = 358\n    error_template = 'Found a float zero (0.0)'\n\n\n@final\nclass UnpackingIterableToListViolation(AS",
  "context_lines": "        zero = 0.0\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    code = 358\n    error_template = 'Found a float zero (0.0)'\n\n\n@final\nclass UnpackingIterableToListViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found a float zero (0.0)'\n"
 },
 "187": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2231",
  "column": "4",
  "context": "rable\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found an iterable unpacking to list'\n    code = 359\n\n\n@final\nclass RawStringNotNeededVi",
  "context_lines": "        [first, second] = (7, 4)\n        [first, *iterable] = other_iterable\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found an iterable unpacking to list'\n    code = 359\n\n\n@final\nclass RawStringNotNeededViolation(TokenizeViolation):\n    r\"\"\"\n",
  "slicing": "    error_template = 'Found an iterable unpacking to list'\n"
 },
 "188": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2232",
  "column": "4",
  "context": "plate = 'Found an iterable unpacking to list'\n    code = 359\n\n\n@final\nclass RawStringNotNeededViolation(Tokeniz",
  "context_lines": "        [first, *iterable] = other_iterable\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found an iterable unpacking to list'\n    code = 359\n\n\n@final\nclass RawStringNotNeededViolation(TokenizeViolation):\n    r\"\"\"\n",
  "slicing": "    code = 359\n"
 },
 "189": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2258",
  "column": "4",
  "context": "h r.'\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found an unnecessary use of a raw string: {0}'\n    code = 360\n",
  "context_lines": "        # Wrong:\n        r'This string should not be prefixed with r.'\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found an unnecessary use of a raw string: {0}'\n",
  "slicing": "    error_template = 'Found an unnecessary use of a raw string: {0}'\n"
 },
 "190": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/consistency.py",
  "lineno": "2259",
  "column": "4",
  "context": "ound an unnecessary use of a raw string: {0}'\n    code = 360\n",
  "context_lines": "        r'This string should not be prefixed with r.'\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found an unnecessary use of a raw string: {0}'\n    code = 360\n",
  "slicing": "    code = 360\n"
 },
 "191": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "208",
  "column": "4",
  "context": "utils/\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong module name'\n    code = 100\n\n\n@final\nclass WrongModuleMagicName",
  "context_lines": "    See also:\n        https://tonsky.me/blog/utils/\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong module name'\n    code = 100\n\n\n@final\nclass WrongModuleMagicNameViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found wrong module name'\n"
 },
 "192": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "209",
  "column": "4",
  "context": "   error_template = 'Found wrong module name'\n    code = 100\n\n\n@final\nclass WrongModuleMagicNameViolation(Simpl",
  "context_lines": "        https://tonsky.me/blog/utils/\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong module name'\n    code = 100\n\n\n@final\nclass WrongModuleMagicNameViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    code = 100\n"
 },
 "193": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "238",
  "column": "4",
  "context": "n__.py\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong module magic name'\n    code = 101\n\n\n@final\nclass WrongModuleNamePatte",
  "context_lines": "        # Wrong:\n        __version__.py\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong module magic name'\n    code = 101\n\n\n@final\nclass WrongModuleNamePatternViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found wrong module magic name'\n"
 },
 "194": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "239",
  "column": "4",
  "context": "or_template = 'Found wrong module magic name'\n    code = 101\n\n\n@final\nclass WrongModuleNamePatternViolation(Sim",
  "context_lines": "        __version__.py\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong module magic name'\n    code = 101\n\n\n@final\nclass WrongModuleNamePatternViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    code = 101\n"
 },
 "195": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "273",
  "column": "4",
  "context": "ion.py\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect module name pattern'\n    code = 102\n\n\n# General names:\n\n@final\nclass Wr",
  "context_lines": "        MyModule.py\n        0001_migration.py\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect module name pattern'\n    code = 102\n\n\n# General names:\n\n@final\nclass WrongVariableNameViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found incorrect module name pattern'\n"
 },
 "196": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "274",
  "column": "4",
  "context": "plate = 'Found incorrect module name pattern'\n    code = 102\n\n\n# General names:\n\n@final\nclass WrongVariableName",
  "context_lines": "        0001_migration.py\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect module name pattern'\n    code = 102\n\n\n# General names:\n\n@final\nclass WrongVariableNameViolation(ASTViolation):\n",
  "slicing": "    code = 102\n"
 },
 "197": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "323",
  "column": "4",
  "context": "LIST`.\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong variable name: {0}'\n    code = 110\n\n\n@final\nclass TooShortNameViolatio",
  "context_lines": "        blacklist starting from\n        :py:data:`~wemake_python_styleguide.constants.VARIABLE_NAMES_BLACKLIST`.\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong variable name: {0}'\n    code = 110\n\n\n@final\nclass TooShortNameViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found wrong variable name: {0}'\n"
 },
 "198": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "324",
  "column": "4",
  "context": "r_template = 'Found wrong variable name: {0}'\n    code = 110\n\n\n@final\nclass TooShortNameViolation(MaybeASTViola",
  "context_lines": "        :py:data:`~wemake_python_styleguide.constants.VARIABLE_NAMES_BLACKLIST`.\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong variable name: {0}'\n    code = 110\n\n\n@final\nclass TooShortNameViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 110\n"
 },
 "199": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "365",
  "column": "4",
  "context": ".4.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too short name: {0}'\n    code = 111\n    postfix_template = ViolationPos",
  "context_lines": "    .. versionadded:: 0.1.0\n    .. versionchanged:: 0.4.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too short name: {0}'\n    code = 111\n    postfix_template = ViolationPostfixes.less_than\n\n\n@final\nclass PrivateNameViolation(MaybeASTViolation):\n",
  "slicing": "    error_template = 'Found too short name: {0}'\n"
 },
 "200": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "366",
  "column": "4",
  "context": " error_template = 'Found too short name: {0}'\n    code = 111\n    postfix_template = ViolationPostfixes.less_tha",
  "context_lines": "    .. versionchanged:: 0.4.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too short name: {0}'\n    code = 111\n    postfix_template = ViolationPostfixes.less_than\n\n\n@final\nclass PrivateNameViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 111\n"
 },
 "201": {
  "name": "postfix_template",
  "type": "wemake_python_styleguide.violations.base.ViolationPostfixes",
  "class": "imported",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "367",
  "column": "4",
  "context": " = 'Found too short name: {0}'\n    code = 111\n    postfix_template = ViolationPostfixes.less_than\n\n\n@final\nclass PrivateNameViolation(MaybeASTViolat",
  "context_lines": "    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found too short name: {0}'\n    code = 111\n    postfix_template = ViolationPostfixes.less_than\n\n\n@final\nclass PrivateNameViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": [
   "    postfix_template = ViolationPostfixes.less_than\n"
  ]
 },
 "202": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "401",
  "column": "4",
  "context": ".4.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found private name pattern: {0}'\n    code = 112\n\n\n@final\nclass SameAliasImportViola",
  "context_lines": "    .. versionadded:: 0.1.0\n    .. versionchanged:: 0.4.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found private name pattern: {0}'\n    code = 112\n\n\n@final\nclass SameAliasImportViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found private name pattern: {0}'\n"
 },
 "203": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "402",
  "column": "4",
  "context": "_template = 'Found private name pattern: {0}'\n    code = 112\n\n\n@final\nclass SameAliasImportViolation(ASTViolati",
  "context_lines": "    .. versionchanged:: 0.4.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found private name pattern: {0}'\n    code = 112\n\n\n@final\nclass SameAliasImportViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 112\n"
 },
 "204": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "438",
  "column": "4",
  "context": "13.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found same alias import: {0}'\n    code = 113\n\n\n@final\nclass UnderscoredNumberNam",
  "context_lines": "    .. versionadded:: 0.1.0\n    .. versionchanged:: 0.13.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found same alias import: {0}'\n    code = 113\n\n\n@final\nclass UnderscoredNumberNameViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found same alias import: {0}'\n"
 },
 "205": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "439",
  "column": "4",
  "context": "ror_template = 'Found same alias import: {0}'\n    code = 113\n\n\n@final\nclass UnderscoredNumberNameViolation(Mayb",
  "context_lines": "    .. versionchanged:: 0.13.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found same alias import: {0}'\n    code = 113\n\n\n@final\nclass UnderscoredNumberNameViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 113\n"
 },
 "206": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "475",
  "column": "4",
  "context": "0.3.0\n    .. versionchanged:: 0.4.0\n\n    \"\"\"\n\n    error_template = 'Found underscored number name pattern: {0}'\n    code = 114\n\n\n@final\nclass UpperCaseAttributeVi",
  "context_lines": "        iso_123_456 = 'some data'\n\n    .. versionadded:: 0.3.0\n    .. versionchanged:: 0.4.0\n\n    \"\"\"\n\n    error_template = 'Found underscored number name pattern: {0}'\n    code = 114\n\n\n@final\nclass UpperCaseAttributeViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found underscored number name pattern: {0}'\n"
 },
 "207": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "476",
  "column": "4",
  "context": " 'Found underscored number name pattern: {0}'\n    code = 114\n\n\n@final\nclass UpperCaseAttributeViolation(ASTViol",
  "context_lines": "    .. versionadded:: 0.3.0\n    .. versionchanged:: 0.4.0\n\n    \"\"\"\n\n    error_template = 'Found underscored number name pattern: {0}'\n    code = 114\n\n\n@final\nclass UpperCaseAttributeViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 114\n"
 },
 "208": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "507",
  "column": "4",
  "context": "T = 42\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found upper-case constant in a class: {0}'\n    code = 115\n\n\n@final\nclass ConsecutiveUnderscor",
  "context_lines": "        class A(object):\n            MY_CONSTANT = 42\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found upper-case constant in a class: {0}'\n    code = 115\n\n\n@final\nclass ConsecutiveUnderscoresInNameViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found upper-case constant in a class: {0}'\n"
 },
 "209": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "508",
  "column": "4",
  "context": "= 'Found upper-case constant in a class: {0}'\n    code = 115\n\n\n@final\nclass ConsecutiveUnderscoresInNameViolati",
  "context_lines": "            MY_CONSTANT = 42\n\n    .. versionadded:: 0.3.0\n\n    \"\"\"\n\n    error_template = 'Found upper-case constant in a class: {0}'\n    code = 115\n\n\n@final\nclass ConsecutiveUnderscoresInNameViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 115\n"
 },
 "210": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "536",
  "column": "4",
  "context": "0.3.0\n    .. versionchanged:: 0.4.0\n\n    \"\"\"\n\n    error_template = 'Found consecutive underscores name: {0}'\n    code = 116\n\n\n@final\nclass ReservedArgumentName",
  "context_lines": "    This rule checks: modules, variables, attributes, functions, and methods.\n\n    .. versionadded:: 0.3.0\n    .. versionchanged:: 0.4.0\n\n    \"\"\"\n\n    error_template = 'Found consecutive underscores name: {0}'\n    code = 116\n\n\n@final\nclass ReservedArgumentNameViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found consecutive underscores name: {0}'\n"
 },
 "211": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "537",
  "column": "4",
  "context": "e = 'Found consecutive underscores name: {0}'\n    code = 116\n\n\n@final\nclass ReservedArgumentNameViolation(ASTVi",
  "context_lines": "    .. versionadded:: 0.3.0\n    .. versionchanged:: 0.4.0\n\n    \"\"\"\n\n    error_template = 'Found consecutive underscores name: {0}'\n    code = 116\n\n\n@final\nclass ReservedArgumentNameViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 116\n"
 },
 "212": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "567",
  "column": "4",
  "context": "lowed.\n\n    .. versionadded:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found name reserved for first argument: {0}'\n    code = 117\n\n\n@final\nclass TooLongNameViolation",
  "context_lines": "    This rule checks: functions and methods.\n    Having any reserved names in ``lambda`` functions is not allowed.\n\n    .. versionadded:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found name reserved for first argument: {0}'\n    code = 117\n\n\n@final\nclass TooLongNameViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found name reserved for first argument: {0}'\n"
 },
 "213": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "568",
  "column": "4",
  "context": "'Found name reserved for first argument: {0}'\n    code = 117\n\n\n@final\nclass TooLongNameViolation(MaybeASTViolat",
  "context_lines": "    Having any reserved names in ``lambda`` functions is not allowed.\n\n    .. versionadded:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found name reserved for first argument: {0}'\n    code = 117\n\n\n@final\nclass TooLongNameViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 117\n"
 },
 "214": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "607",
  "column": "4",
  "context": "ENGTH`\n\n    .. versionadded:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found too long name: {0}'\n    code = 118\n\n\n@final\nclass UnicodeNameViolation",
  "context_lines": "        Default:\n        :str:`wemake_python_styleguide.options.defaults.MAX_NAME_LENGTH`\n\n    .. versionadded:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found too long name: {0}'\n    code = 118\n\n\n@final\nclass UnicodeNameViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found too long name: {0}'\n"
 },
 "215": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "608",
  "column": "4",
  "context": "  error_template = 'Found too long name: {0}'\n    code = 118\n\n\n@final\nclass UnicodeNameViolation(MaybeASTViolat",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.MAX_NAME_LENGTH`\n\n    .. versionadded:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found too long name: {0}'\n    code = 118\n\n\n@final\nclass UnicodeNameViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 118\n"
 },
 "216": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "638",
  "column": "4",
  "context": "量 = ''\n\n    .. versionadded:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found unicode name: {0}'\n    code = 119\n\n\n@final\nclass TrailingUnderscoreVi",
  "context_lines": "        переменная = 42\n        some_變量 = ''\n\n    .. versionadded:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found unicode name: {0}'\n    code = 119\n\n\n@final\nclass TrailingUnderscoreViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found unicode name: {0}'\n"
 },
 "217": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "639",
  "column": "4",
  "context": "   error_template = 'Found unicode name: {0}'\n    code = 119\n\n\n@final\nclass TrailingUnderscoreViolation(ASTViol",
  "context_lines": "        some_變量 = ''\n\n    .. versionadded:: 0.5.0\n\n    \"\"\"\n\n    error_template = 'Found unicode name: {0}'\n    code = 119\n\n\n@final\nclass TrailingUnderscoreViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 119\n"
 },
 "218": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "671",
  "column": "4",
  "context": "e_ = 1\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found regular name with trailing underscore: {0}'\n    code = 120\n\n\n@final\nclass UnusedVariableIsUsed",
  "context_lines": "        # Wrong:\n        some_variable_ = 1\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found regular name with trailing underscore: {0}'\n    code = 120\n\n\n@final\nclass UnusedVariableIsUsedViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found regular name with trailing underscore: {0}'\n"
 },
 "219": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "672",
  "column": "4",
  "context": "d regular name with trailing underscore: {0}'\n    code = 120\n\n\n@final\nclass UnusedVariableIsUsedViolation(ASTVi",
  "context_lines": "        some_variable_ = 1\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found regular name with trailing underscore: {0}'\n    code = 120\n\n\n@final\nclass UnusedVariableIsUsedViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 120\n"
 },
 "220": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "718",
  "column": "4",
  "context": "12.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found usage of a variable marked as unused: {0}'\n    code = 121\n\n\n@final\nclass UnusedVariableIsDefi",
  "context_lines": "    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.12.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found usage of a variable marked as unused: {0}'\n    code = 121\n\n\n@final\nclass UnusedVariableIsDefinedViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found usage of a variable marked as unused: {0}'\n"
 },
 "221": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "719",
  "column": "4",
  "context": "nd usage of a variable marked as unused: {0}'\n    code = 121\n\n\n@final\nclass UnusedVariableIsDefinedViolation(AS",
  "context_lines": "    .. versionchanged:: 0.12.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found usage of a variable marked as unused: {0}'\n    code = 121\n\n\n@final\nclass UnusedVariableIsDefinedViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 121\n"
 },
 "222": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "754",
  "column": "4",
  "context": "uses.\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found all unused variables definition: {0}'\n    code = 122\n\n\n@final\nclass WrongUnusedVariableN",
  "context_lines": "        _first, _second = some_tuple()\n\n    This rule checks: assigns, context managers, except clauses.\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found all unused variables definition: {0}'\n    code = 122\n\n\n@final\nclass WrongUnusedVariableNameViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found all unused variables definition: {0}'\n"
 },
 "223": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "755",
  "column": "4",
  "context": " 'Found all unused variables definition: {0}'\n    code = 122\n\n\n@final\nclass WrongUnusedVariableNameViolation(AS",
  "context_lines": "    This rule checks: assigns, context managers, except clauses.\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found all unused variables definition: {0}'\n    code = 122\n\n\n@final\nclass WrongUnusedVariableNameViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 122\n"
 },
 "224": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "785",
  "column": "4",
  "context": "ple()\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found wrong unused variable name: {0}'\n    code = 123\n\n\n@final\nclass UnreadableNameViolat",
  "context_lines": "        # Wrong:\n        some_element, _, __  = some_tuple()\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found wrong unused variable name: {0}'\n    code = 123\n\n\n@final\nclass UnreadableNameViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found incorrect multi-line parameters'\n"
 },
 "225": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "786",
  "column": "4",
  "context": "ate = 'Found wrong unused variable name: {0}'\n    code = 123\n\n\n@final\nclass UnreadableNameViolation(MaybeASTVio",
  "context_lines": "        some_element, _, __  = some_tuple()\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found wrong unused variable name: {0}'\n    code = 123\n\n\n@final\nclass UnreadableNameViolation(MaybeASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 317\n"
 },
 "226": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "822",
  "column": "4",
  "context": "0Output\n\n    .. versionadded:: 0.14\n\n    \"\"\"\n\n    error_template = 'Found unreadable characters combination: {0}'\n    code = 124\n\n\n@final\nclass BuiltinShadowingViol",
  "context_lines": "        # Wrong:\n        Memo0Output\n\n    .. versionadded:: 0.14\n\n    \"\"\"\n\n    error_template = 'Found unreadable characters combination: {0}'\n    code = 124\n\n\n@final\nclass BuiltinShadowingViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found unreadable characters combination: {0}'\n"
 },
 "227": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "823",
  "column": "4",
  "context": "Found unreadable characters combination: {0}'\n    code = 124\n\n\n@final\nclass BuiltinShadowingViolation(ASTViolat",
  "context_lines": "        Memo0Output\n\n    .. versionadded:: 0.14\n\n    \"\"\"\n\n    error_template = 'Found unreadable characters combination: {0}'\n    code = 124\n\n\n@final\nclass BuiltinShadowingViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 124\n"
 },
 "228": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "861",
  "column": "4",
  "context": "aution.\n\n    .. versionadded:: 0.14\n\n    \"\"\"\n\n    error_template = 'Found builtin shadowing: {0}'\n    code = 125\n",
  "context_lines": "    If you feel it is still necessary to use such a class attribute,\n    consider using a `noqa` comment with caution.\n\n    .. versionadded:: 0.14\n\n    \"\"\"\n\n    error_template = 'Found builtin shadowing: {0}'\n",
  "slicing": "    error_template = 'Found builtin shadowing: {0}'\n"
 },
 "229": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/naming.py",
  "lineno": "862",
  "column": "4",
  "context": "ror_template = 'Found builtin shadowing: {0}'\n    code = 125\n",
  "context_lines": "    consider using a `noqa` comment with caution.\n\n    .. versionadded:: 0.14\n\n    \"\"\"\n\n    error_template = 'Found builtin shadowing: {0}'\n    code = 125\n",
  "slicing": "    code = 125\n"
 },
 "230": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "136",
  "column": "4",
  "context": ".3.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found `else` in a loop without `break`'\n    code = 500\n    previous_codes = {436}\n\n\n@final",
  "context_lines": "            print('always called')\n\n    .. versionadded:: 0.3.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found `else` in a loop without `break`'\n    code = 500\n    previous_codes = {436}\n\n\n@final\nclass UselessFinallyViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found `else` in a loop without `break`'\n"
 },
 "231": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "137",
  "column": "4",
  "context": "te = 'Found `else` in a loop without `break`'\n    code = 500\n    previous_codes = {436}\n\n\n@final\nclass UselessF",
  "context_lines": "    .. versionadded:: 0.3.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found `else` in a loop without `break`'\n    code = 500\n    previous_codes = {436}\n\n\n@final\nclass UselessFinallyViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": [
   "function_def1 = 'def {0}():'\n",
   "function_template1 = \"\"\"\n",
   "function_template2 = \"\"\"\n",
   "method_template1 = \"\"\"\n",
   "method_template2 = \"\"\"\n",
   "    function_def1,\n",
   "    function_template1,\n",
   "    function_template2,\n",
   "    code = context.format(\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [BlockAndLocalOverlapViolation])\n",
   "    assert_error_text(visitor, variable_name)\n",
   "    function_def1,\n",
   "    method_template1,\n",
   "    method_template2,\n",
   "    code = context.format(\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [])\n",
   "    function_def1,\n",
   "    function_template1,\n",
   "    function_template2,\n",
   "    method_template1,\n",
   "    method_template2,\n",
   "    code = context.format(\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [])\n",
   "    function_def1,\n",
   "    function_template1,\n",
   "    function_template2,\n",
   "    method_template1,\n",
   "    method_template2,\n",
   "    code = context.format(\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [])\n",
   "pipeline = \"\"\"\n",
   "overload_template = \"\"\"\n",
   "    code = overload_template.format(import_overload, pipeline)\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [])\n",
   "    code = overload_template.format(decorator_template, pipeline)\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [BlockAndLocalOverlapViolation])\n",
   "method_setter_template = \"\"\"\n",
   "    code = method_setter_template.format('func')\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [])\n"
  ]
 },
 "232": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "177",
  "column": "4",
  "context": "11.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found `finally` in `try` block without `except`'\n    code = 501\n    previous_codes = {437}\n\n\n@final",
  "context_lines": "    .. versionadded:: 0.3.0\n    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found `finally` in `try` block without `except`'\n    code = 501\n    previous_codes = {437}\n\n\n@final\nclass SimplifiableIfViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found `finally` in `try` block without `except`'\n"
 },
 "233": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "178",
  "column": "4",
  "context": "nd `finally` in `try` block without `except`'\n    code = 501\n    previous_codes = {437}\n\n\n@final\nclass Simplifi",
  "context_lines": "    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found `finally` in `try` block without `except`'\n    code = 501\n    previous_codes = {437}\n\n\n@final\nclass SimplifiableIfViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 501\n"
 },
 "234": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "213",
  "column": "4",
  "context": ".7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found simplifiable `if` condition'\n    code = 502\n    previous_codes = {451}\n\n\n@final",
  "context_lines": "    We check both ``if`` nodes and ``if`` expressions.\n\n    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found simplifiable `if` condition'\n    code = 502\n    previous_codes = {451}\n\n\n@final\nclass UselessReturningElseViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found simplifiable `if` condition'\n"
 },
 "235": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "214",
  "column": "4",
  "context": "emplate = 'Found simplifiable `if` condition'\n    code = 502\n    previous_codes = {451}\n\n\n@final\nclass UselessR",
  "context_lines": "    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found simplifiable `if` condition'\n    code = 502\n    previous_codes = {451}\n\n\n@final\nclass UselessReturningElseViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 502\n"
 },
 "236": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "256",
  "column": "4",
  "context": ".7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found useless returning `else` statement'\n    code = 503\n    previous_codes = {457}\n\n\n@final",
  "context_lines": "                raise ValueError('nope')\n\n    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found useless returning `else` statement'\n    code = 503\n    previous_codes = {457}\n\n\n@final\nclass NegatedConditionsViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found useless returning `else` statement'\n"
 },
 "237": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "257",
  "column": "4",
  "context": " = 'Found useless returning `else` statement'\n    code = 503\n    previous_codes = {457}\n\n\n@final\nclass NegatedC",
  "context_lines": "    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found useless returning `else` statement'\n    code = 503\n    previous_codes = {457}\n\n\n@final\nclass NegatedConditionsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 503\n"
 },
 "238": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "300",
  "column": "4",
  "context": ".8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found negated condition'\n    code = 504\n    previous_codes = {463}\n\n\n@final",
  "context_lines": "             ...\n\n    .. versionadded:: 0.8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found negated condition'\n    code = 504\n    previous_codes = {463}\n\n\n@final\nclass NestedTryViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found negated condition'\n"
 },
 "239": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "301",
  "column": "4",
  "context": "   error_template = 'Found negated condition'\n    code = 504\n    previous_codes = {463}\n\n\n@final\nclass NestedTr",
  "context_lines": "    .. versionadded:: 0.8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found negated condition'\n    code = 504\n    previous_codes = {463}\n\n\n@final\nclass NestedTryViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 504\n"
 },
 "240": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "350",
  "column": "4",
  "context": ".8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found nested `try` block'\n    code = 505\n    previous_codes = {464}\n\n\n@final",
  "context_lines": "                ...\n\n    .. versionadded:: 0.8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found nested `try` block'\n    code = 505\n    previous_codes = {464}\n\n\n@final\nclass UselessLambdaViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found nested `try` block'\n"
 },
 "241": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "351",
  "column": "4",
  "context": "  error_template = 'Found nested `try` block'\n    code = 505\n    previous_codes = {464}\n\n\n@final\nclass UselessL",
  "context_lines": "    .. versionadded:: 0.8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found nested `try` block'\n    code = 505\n    previous_codes = {464}\n\n\n@final\nclass UselessLambdaViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 505\n"
 },
 "242": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "382",
  "column": "4",
  "context": "10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found useless lambda declaration'\n    code = 506\n    previous_codes = {467}\n\n\n@final",
  "context_lines": "        numbers = map(lambda string: int(string), ['1', '2'])\n\n    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found useless lambda declaration'\n    code = 506\n    previous_codes = {467}\n\n\n@final\nclass UselessLenCompareViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found useless lambda declaration'\n"
 },
 "243": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "383",
  "column": "4",
  "context": "template = 'Found useless lambda declaration'\n    code = 506\n    previous_codes = {467}\n\n\n@final\nclass UselessL",
  "context_lines": "    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found useless lambda declaration'\n    code = 506\n    previous_codes = {467}\n\n\n@final\nclass UselessLenCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 506\n"
 },
 "244": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "418",
  "column": "4",
  "context": "10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found useless `len()` compare'\n    code = 507\n    previous_codes = {468}\n\n\n@final",
  "context_lines": "            ...\n\n    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found useless `len()` compare'\n    code = 507\n    previous_codes = {468}\n\n\n@final\nclass NotOperatorWithCompareViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found useless `len()` compare'\n"
 },
 "245": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "419",
  "column": "4",
  "context": "or_template = 'Found useless `len()` compare'\n    code = 507\n    previous_codes = {468}\n\n\n@final\nclass NotOpera",
  "context_lines": "    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found useless `len()` compare'\n    code = 507\n    previous_codes = {468}\n\n\n@final\nclass NotOperatorWithCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 507\n"
 },
 "246": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "450",
  "column": "4",
  "context": "10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect `not` with compare usage'\n    code = 508\n    previous_codes = {470}\n\n\n@final",
  "context_lines": "            ...\n\n    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect `not` with compare usage'\n    code = 508\n    previous_codes = {470}\n\n\n@final\nclass NestedTernaryViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found incorrect `not` with compare usage'\n"
 },
 "247": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "451",
  "column": "4",
  "context": " = 'Found incorrect `not` with compare usage'\n    code = 508\n    previous_codes = {470}\n\n\n@final\nclass NestedTe",
  "context_lines": "    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect `not` with compare usage'\n    code = 508\n    previous_codes = {470}\n\n\n@final\nclass NestedTernaryViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 508\n"
 },
 "248": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "488",
  "column": "4",
  "context": "10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found incorrectly nested ternary'\n    code = 509\n    previous_codes = {472}\n\n\n@final",
  "context_lines": "            ...\n\n    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found incorrectly nested ternary'\n    code = 509\n    previous_codes = {472}\n\n\n@final\nclass WrongInCompareTypeViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found incorrectly nested ternary'\n"
 },
 "249": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "489",
  "column": "4",
  "context": "template = 'Found incorrectly nested ternary'\n    code = 509\n    previous_codes = {472}\n\n\n@final\nclass WrongInC",
  "context_lines": "    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found incorrectly nested ternary'\n    code = 509\n    previous_codes = {472}\n\n\n@final\nclass WrongInCompareTypeViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 509\n"
 },
 "250": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "527",
  "column": "4",
  "context": "11.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found `in` used with a non-set container'\n    code = 510\n    previous_codes = {473}\n\n\n@final",
  "context_lines": "    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found `in` used with a non-set container'\n    code = 510\n    previous_codes = {473}\n\n\n@final\nclass UnmergedIsinstanceCallsViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found `in` used with a non-set container'\n"
 },
 "251": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "528",
  "column": "4",
  "context": " = 'Found `in` used with a non-set container'\n    code = 510\n    previous_codes = {473}\n\n\n@final\nclass Unmerged",
  "context_lines": "    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found `in` used with a non-set container'\n    code = 510\n    previous_codes = {473}\n\n\n@final\nclass UnmergedIsinstanceCallsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 510\n"
 },
 "252": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "561",
  "column": "4",
  "context": "10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = (\n        'Found separate `isinstance` calls that ca",
  "context_lines": "        https://docs.python.org/3/library/functions.html#isinstance\n\n    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = (\n        'Found separate `isinstance` calls that can be merged for: {0}'\n    )\n    code = 511\n    previous_codes = {474}\n\n\n",
  "slicing": "    error_template = 'Too many decorators: {0}'\n"
 },
 "253": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "564",
  "column": "4",
  "context": "nce` calls that can be merged for: {0}'\n    )\n    code = 511\n    previous_codes = {474}\n\n\n@final\nclass WrongIsi",
  "context_lines": "    \"\"\"\n\n    error_template = (\n        'Found separate `isinstance` calls that can be merged for: {0}'\n    )\n    code = 511\n    previous_codes = {474}\n\n\n@final\nclass WrongIsinstanceWithTupleViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 511\n"
 },
 "254": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "596",
  "column": "4",
  "context": "10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found `isinstance` call with a single element tuple'\n    code = 512\n    previous_codes = {475}\n\n\n@final",
  "context_lines": "    See: https://docs.python.org/3/library/functions.html#isinstance\n\n    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found `isinstance` call with a single element tuple'\n    code = 512\n    previous_codes = {475}\n\n\n@final\nclass ImplicitElifViolation(TokenizeViolation):\n",
  "slicing": "    error_template = 'Found `isinstance` call with a single element tuple'\n"
 },
 "255": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "597",
  "column": "4",
  "context": "isinstance` call with a single element tuple'\n    code = 512\n    previous_codes = {475}\n\n\n@final\nclass Implicit",
  "context_lines": "    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found `isinstance` call with a single element tuple'\n    code = 512\n    previous_codes = {475}\n\n\n@final\nclass ImplicitElifViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 512\n"
 },
 "256": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "632",
  "column": "4",
  "context": "  ...\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found implicit `elif` condition'\n    code = 513\n\n\n@final\nclass ImplicitInConditionV",
  "context_lines": "            if other:\n                ...\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found implicit `elif` condition'\n    code = 513\n\n\n@final\nclass ImplicitInConditionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found implicit `elif` condition'\n"
 },
 "257": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "633",
  "column": "4",
  "context": "_template = 'Found implicit `elif` condition'\n    code = 513\n\n\n@final\nclass ImplicitInConditionViolation(ASTVio",
  "context_lines": "                ...\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found implicit `elif` condition'\n    code = 513\n\n\n@final\nclass ImplicitInConditionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 513\n"
 },
 "258": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "666",
  "column": "4",
  "context": "10.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    code = 514\n    error_template = 'Found implicit `in` conditio",
  "context_lines": "        print(some != 'first' and some != 'second')\n\n    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    code = 514\n    error_template = 'Found implicit `in` condition'\n    previous_codes = {336}\n\n\n@final\nclass OpenWithoutContextManagerViolation(ASTViolation):\n",
  "slicing": "    code = 514\n"
 },
 "259": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "667",
  "column": "4",
  "context": "sionchanged:: 0.12.0\n\n    \"\"\"\n\n    code = 514\n    error_template = 'Found implicit `in` condition'\n    previous_codes = {336}\n\n\n@final\nclass OpenWith",
  "context_lines": "    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    code = 514\n    error_template = 'Found implicit `in` condition'\n    previous_codes = {336}\n\n\n@final\nclass OpenWithoutContextManagerViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found implicit `in` condition'\n"
 },
 "260": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "698",
  "column": "4",
  "context": "name)\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 515\n    error_template = 'Found `open()` used without ",
  "context_lines": "        # Wrong:\n        file_obj = open(filename)\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 515\n    error_template = 'Found `open()` used without a context manager'\n\n\n@final\nclass TypeCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 515\n"
 },
 "261": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "699",
  "column": "4",
  "context": "ersionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 515\n    error_template = 'Found `open()` used without a context manager'\n\n\n@final\nclass TypeCompareViolation(ASTViolation):",
  "context_lines": "        file_obj = open(filename)\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 515\n    error_template = 'Found `open()` used without a context manager'\n\n\n@final\nclass TypeCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found `open()` used without a context manager'\n"
 },
 "262": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "728",
  "column": "4",
  "context": "  ...\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 516\n    error_template = 'Found `type()` used to compa",
  "context_lines": "        if type(something) == int:\n            ...\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 516\n    error_template = 'Found `type()` used to compare types'\n\n\n@final\nclass PointlessStarredViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 516\n"
 },
 "263": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "729",
  "column": "4",
  "context": "ersionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 516\n    error_template = 'Found `type()` used to compare types'\n\n\n@final\nclass PointlessStarredViolation(ASTViolat",
  "context_lines": "            ...\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 516\n    error_template = 'Found `type()` used to compare types'\n\n\n@final\nclass PointlessStarredViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found `type()` used to compare types'\n"
 },
 "264": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "759",
  "column": "4",
  "context": "{{}})\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 517\n    error_template = 'Found pointless starred expr",
  "context_lines": "        # Wrong:\n        print(*[1, 2, 3], **{{}})\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 517\n    error_template = 'Found pointless starred expression'\n\n\n@final\nclass ImplicitEnumerateViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 517\n"
 },
 "265": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "760",
  "column": "4",
  "context": "ersionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 517\n    error_template = 'Found pointless starred expression'\n\n\n@final\nclass ImplicitEnumerateViolation(ASTViola",
  "context_lines": "        print(*[1, 2, 3], **{{}})\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 517\n    error_template = 'Found pointless starred expression'\n\n\n@final\nclass ImplicitEnumerateViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found pointless starred expression'\n"
 },
 "266": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "792",
  "column": "4",
  "context": "erate\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 518\n    error_template = 'Found implicit `enumerate()`",
  "context_lines": "    See also:\n        https://docs.python.org/3/library/functions.html#enumerate\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 518\n    error_template = 'Found implicit `enumerate()` call'\n\n\n@final\nclass ImplicitSumViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 518\n"
 },
 "267": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "793",
  "column": "4",
  "context": "ersionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 518\n    error_template = 'Found implicit `enumerate()` call'\n\n\n@final\nclass ImplicitSumViolation(ASTViolation):",
  "context_lines": "        https://docs.python.org/3/library/functions.html#enumerate\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 518\n    error_template = 'Found implicit `enumerate()` call'\n\n\n@final\nclass ImplicitSumViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found implicit `enumerate()` call'\n"
 },
 "268": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "832",
  "column": "4",
  "context": ".join\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 519\n    error_template = 'Found implicit `sum()` call'",
  "context_lines": "        https://docs.python.org/3/library/functions.html#sum\n        https://docs.python.org/3/library/stdtypes.html#str.join\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 519\n    error_template = 'Found implicit `sum()` call'\n\n\n@final\nclass FalsyConstantCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 519\n"
 },
 "269": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "833",
  "column": "4",
  "context": "ersionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 519\n    error_template = 'Found implicit `sum()` call'\n\n\n@final\nclass FalsyConstantCompareViolation(ASTVi",
  "context_lines": "        https://docs.python.org/3/library/stdtypes.html#str.join\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 519\n    error_template = 'Found implicit `sum()` call'\n\n\n@final\nclass FalsyConstantCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found implicit `sum()` call'\n"
 },
 "270": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "872",
  "column": "4",
  "context": "  ...\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 520\n    error_template = 'Found compare with falsy con",
  "context_lines": "        if my_check == []:\n            ...\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 520\n    error_template = 'Found compare with falsy constant'\n\n\n@final\nclass WrongIsCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 520\n"
 },
 "271": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "873",
  "column": "4",
  "context": "ersionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 520\n    error_template = 'Found compare with falsy constant'\n\n\n@final\nclass WrongIsCompareViolation(ASTViolatio",
  "context_lines": "            ...\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 520\n    error_template = 'Found compare with falsy constant'\n\n\n@final\nclass WrongIsCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found compare with falsy constant'\n"
 },
 "272": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "909",
  "column": "4",
  "context": "42742\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 521\n    error_template = 'Found wrong `is` compare'\n\n\n",
  "context_lines": "    See also:\n        https://stackoverflow.com/a/33130014/4842742\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 521\n    error_template = 'Found wrong `is` compare'\n\n\n@final\nclass ImplicitPrimitiveViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 521\n"
 },
 "273": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "910",
  "column": "4",
  "context": "ersionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 521\n    error_template = 'Found wrong `is` compare'\n\n\n@final\nclass ImplicitPrimitiveViolation(ASTViola",
  "context_lines": "        https://stackoverflow.com/a/33130014/4842742\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    code = 521\n    error_template = 'Found wrong `is` compare'\n\n\n@final\nclass ImplicitPrimitiveViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found wrong `is` compare'\n"
 },
 "274": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "939",
  "column": "4",
  "context": "a: 0)\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    code = 522\n    error_template = 'Found implicit primitive in ",
  "context_lines": "        # Wrong:\n        defaultdict(lambda: 0)\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    code = 522\n    error_template = 'Found implicit primitive in a form of `lambda`'\n\n\n@final\nclass AlmostSwappedViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 522\n"
 },
 "275": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "940",
  "column": "4",
  "context": "ersionadded:: 0.13.0\n\n    \"\"\"\n\n    code = 522\n    error_template = 'Found implicit primitive in a form of `lambda`'\n\n\n@final\nclass AlmostSwappedViolation(ASTViolation",
  "context_lines": "        defaultdict(lambda: 0)\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    code = 522\n    error_template = 'Found implicit primitive in a form of `lambda`'\n\n\n@final\nclass AlmostSwappedViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found implicit primitive in a form of `lambda`'\n"
 },
 "276": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "973",
  "column": "4",
  "context": " temp\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found incorrectly swapped variables'\n    code = 523\n\n\n@final\nclass MisrefactoredAssignm",
  "context_lines": "        a = b\n        b = temp\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found incorrectly swapped variables'\n    code = 523\n\n\n@final\nclass MisrefactoredAssignmentViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found incorrectly swapped variables'\n"
 },
 "277": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "974",
  "column": "4",
  "context": "plate = 'Found incorrectly swapped variables'\n    code = 523\n\n\n@final\nclass MisrefactoredAssignmentViolation(AS",
  "context_lines": "        b = temp\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found incorrectly swapped variables'\n    code = 523\n\n\n@final\nclass MisrefactoredAssignmentViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 523\n"
 },
 "278": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1006",
  "column": "4",
  "context": " for.\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found self assignment  with refactored assignment'\n    code = 524\n\n\n@final\nclass InCompareWithSingleI",
  "context_lines": "    :py:data:`~wemake_python_styleguide.constants.MATH_APPROXIMATE_CONSTANTS`\n    for full list of math constants that we check for.\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found self assignment  with refactored assignment'\n    code = 524\n\n\n@final\nclass InCompareWithSingleItemContainerViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found self assignment  with refactored assignment'\n"
 },
 "279": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1007",
  "column": "4",
  "context": " self assignment  with refactored assignment'\n    code = 524\n\n\n@final\nclass InCompareWithSingleItemContainerVio",
  "context_lines": "    for full list of math constants that we check for.\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found self assignment  with refactored assignment'\n    code = 524\n\n\n@final\nclass InCompareWithSingleItemContainerViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 524\n"
 },
 "280": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1034",
  "column": "4",
  "context": "{'s'}\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found wrong `in` compare with single item container'\n    code = 525\n\n\n@final\nclass ImplicitYieldFromVio",
  "context_lines": "        # Wrong:\n        a in {'s'}\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found wrong `in` compare with single item container'\n    code = 525\n\n\n@final\nclass ImplicitYieldFromViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found wrong `in` compare with single item container'\n"
 },
 "281": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1035",
  "column": "4",
  "context": "rong `in` compare with single item container'\n    code = 525\n\n\n@final\nclass ImplicitYieldFromViolation(ASTViola",
  "context_lines": "        a in {'s'}\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found wrong `in` compare with single item container'\n    code = 525\n\n\n@final\nclass ImplicitYieldFromViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 525\n"
 },
 "282": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1071",
  "column": "4",
  "context": "index\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found implicit `yield from` usage'\n    code = 526\n\n\n@final\nclass NotATupleArgumentVio",
  "context_lines": "        for index in chunk:\n            yield index\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found implicit `yield from` usage'\n    code = 526\n\n\n@final\nclass NotATupleArgumentViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found implicit `yield from` usage'\n"
 },
 "283": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1072",
  "column": "4",
  "context": "emplate = 'Found implicit `yield from` usage'\n    code = 526\n\n\n@final\nclass NotATupleArgumentViolation(ASTViola",
  "context_lines": "            yield index\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found implicit `yield from` usage'\n    code = 526\n\n\n@final\nclass NotATupleArgumentViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 526\n"
 },
 "284": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1103",
  "column": "4",
  "context": " for.\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found not a tuple used as an argument'\n    code = 527\n\n\n@final\nclass ImplicitItemsIterato",
  "context_lines": "    :py:data:`~wemake_python_styleguide.constants.TUPLE_ARGUMENTS_METHODS`\n    for full list of methods that we check for.\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found not a tuple used as an argument'\n    code = 527\n\n\n@final\nclass ImplicitItemsIteratorViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found not a tuple used as an argument'\n"
 },
 "285": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1104",
  "column": "4",
  "context": "ate = 'Found not a tuple used as an argument'\n    code = 527\n\n\n@final\nclass ImplicitItemsIteratorViolation(ASTV",
  "context_lines": "    for full list of methods that we check for.\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found not a tuple used as an argument'\n    code = 527\n\n\n@final\nclass ImplicitItemsIteratorViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 527\n"
 },
 "286": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1135",
  "column": "4",
  "context": "key])\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found implicit `.items()` usage'\n    code = 528\n\n\n@final\nclass ImplicitDictGetViola",
  "context_lines": "        for some_key in collection:\n            print(some_key, collection[some_key])\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found implicit `.items()` usage'\n    code = 528\n\n\n@final\nclass ImplicitDictGetViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found implicit `.items()` usage'\n"
 },
 "287": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1136",
  "column": "4",
  "context": "_template = 'Found implicit `.items()` usage'\n    code = 528\n\n\n@final\nclass ImplicitDictGetViolation(ASTViolati",
  "context_lines": "            print(some_key, collection[some_key])\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found implicit `.items()` usage'\n    code = 528\n\n\n@final\nclass ImplicitDictGetViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 528\n"
 },
 "288": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1168",
  "column": "4",
  "context": "key])\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found implicit `.get()` dict usage'\n    code = 529\n\n\n@final\nclass ImplicitNegativeInde",
  "context_lines": "        if key in collection:\n            print(collection[key])\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found implicit `.get()` dict usage'\n    code = 529\n\n\n@final\nclass ImplicitNegativeIndexViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found implicit `.get()` dict usage'\n"
 },
 "289": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1169",
  "column": "4",
  "context": "mplate = 'Found implicit `.get()` dict usage'\n    code = 529\n\n\n@final\nclass ImplicitNegativeIndexViolation(ASTV",
  "context_lines": "            print(collection[key])\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found implicit `.get()` dict usage'\n    code = 529\n\n\n@final\nclass ImplicitNegativeIndexViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 529\n"
 },
 "290": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1197",
  "column": "4",
  "context": " - 1]\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found implicit negative index'\n    code = 530\n\n\n@final\nclass SimplifiableReturnin",
  "context_lines": "        # Wrong:\n        some_list[len(some_list) - 1]\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found implicit negative index'\n    code = 530\n\n\n@final\nclass SimplifiableReturningIfViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found implicit negative index'\n"
 },
 "291": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1198",
  "column": "4",
  "context": "or_template = 'Found implicit negative index'\n    code = 530\n\n\n@final\nclass SimplifiableReturningIfViolation(AS",
  "context_lines": "        some_list[len(some_list) - 1]\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found implicit negative index'\n    code = 530\n\n\n@final\nclass SimplifiableReturningIfViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 530\n"
 },
 "292": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1232",
  "column": "4",
  "context": "False\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found simplifiable returning `if` condition in a function'\n    code = 531\n",
  "context_lines": "            else:\n                return False\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found simplifiable returning `if` condition in a function'\n",
  "slicing": "    error_template = 'Found simplifiable returning `if` condition in a function'\n"
 },
 "293": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/refactoring.py",
  "lineno": "1233",
  "column": "4",
  "context": "iable returning `if` condition in a function'\n    code = 531\n",
  "context_lines": "                return False\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found simplifiable returning `if` condition in a function'\n    code = 531\n",
  "slicing": "    code = 531\n"
 },
 "294": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "91",
  "column": "4",
  "context": "10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found subclassing a builtin: {0}'\n    code = 600\n    previous_codes = {426}\n\n\n@final",
  "context_lines": "        class MyInt(int): ...\n\n    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found subclassing a builtin: {0}'\n    code = 600\n    previous_codes = {426}\n\n\n@final\nclass ShadowedClassAttributeViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found subclassing a builtin: {0}'\n"
 },
 "295": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "92",
  "column": "4",
  "context": "template = 'Found subclassing a builtin: {0}'\n    code = 600\n    previous_codes = {426}\n\n\n@final\nclass Shadowed",
  "context_lines": "    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found subclassing a builtin: {0}'\n    code = 600\n    previous_codes = {426}\n\n\n@final\nclass ShadowedClassAttributeViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 600\n"
 },
 "296": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "145",
  "column": "4",
  "context": "b.com/python/mypy/tree/master/mypyc\n\n    \"\"\"\n\n    error_template = 'Found shadowed class attribute: {0}'\n    code = 601\n    previous_codes = {427}\n\n\n@final",
  "context_lines": "    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.14.0\n    .. _mypyc: https://github.com/python/mypy/tree/master/mypyc\n\n    \"\"\"\n\n    error_template = 'Found shadowed class attribute: {0}'\n    code = 601\n    previous_codes = {427}\n\n\n@final\nclass StaticMethodViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found module with high Jones Complexity score: {0}'\n"
 },
 "297": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "146",
  "column": "4",
  "context": "plate = 'Found shadowed class attribute: {0}'\n    code = 601\n    previous_codes = {427}\n\n\n@final\nclass StaticMe",
  "context_lines": "    .. versionchanged:: 0.14.0\n    .. _mypyc: https://github.com/python/mypy/tree/master/mypyc\n\n    \"\"\"\n\n    error_template = 'Found shadowed class attribute: {0}'\n    code = 601\n    previous_codes = {427}\n\n\n@final\nclass StaticMethodViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": [
   "except_block1 = 'except Exception as {0}:'\n",
   "except_block2 = 'except (TypeError, ValueError) as {0}:'\n",
   "try_template1 = \"\"\"\n",
   "try_template2 = \"\"\"\n",
   "try_template3 = \"\"\"\n",
   "try_template4 = \"\"\"\n",
   "try_template5 = \"\"\"\n",
   "try_template6 = \"\"\"\n",
   "try_template7 = \"\"\"\n",
   "try_template8 = \"\"\"\n",
   "try_template9 = \"\"\"\n",
   "    except_block1,\n",
   "    except_block2,\n",
   "    try_template1,\n",
   "    try_template2,\n",
   "    try_template3,\n",
   "    try_template4,\n",
   "    try_template5,\n",
   "    try_template6,\n",
   "    try_template7,\n",
   "    try_template8,\n",
   "    try_template9,\n",
   "    code = context.format(\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [BlockAndLocalOverlapViolation])\n",
   "    assert_error_text(visitor, variable_name)\n",
   "    except_block1,\n",
   "    except_block2,\n",
   "    try_template1,\n",
   "    try_template2,\n",
   "    try_template3,\n",
   "    try_template4,\n",
   "    try_template5,\n",
   "    try_template6,\n",
   "    try_template7,\n",
   "    try_template8,\n",
   "    try_template9,\n",
   "    code = context.format(\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [])\n",
   "    except_block1,\n",
   "    except_block2,\n",
   "    try_template1,\n",
   "    try_template2,\n",
   "    try_template3,\n",
   "    try_template4,\n",
   "    try_template5,\n",
   "    try_template6,\n",
   "    try_template7,\n",
   "    try_template8,\n",
   "    try_template9,\n",
   "    code = context.format(\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [])\n",
   "    tree = parse_ast_tree(code)\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, violations)\n"
  ]
 },
 "298": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "167",
  "column": "4",
  "context": ".1.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found using `@staticmethod`'\n    code = 602\n    previous_codes = {433}\n\n\n@final",
  "context_lines": "        Use instance methods, ``@classmethod``, or functions instead.\n\n    .. versionadded:: 0.1.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found using `@staticmethod`'\n    code = 602\n    previous_codes = {433}\n\n\n@final\nclass BadMagicMethodViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found using `@staticmethod`'\n"
 },
 "299": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "168",
  "column": "4",
  "context": "rror_template = 'Found using `@staticmethod`'\n    code = 602\n    previous_codes = {433}\n\n\n@final\nclass BadMagic",
  "context_lines": "    .. versionadded:: 0.1.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found using `@staticmethod`'\n    code = 602\n    previous_codes = {433}\n\n\n@final\nclass BadMagicMethodViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 602\n"
 },
 "300": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "198",
  "column": "4",
  "context": "www.youtube.com/watch?v=F6u5rhUQ6dU\n\n    \"\"\"\n\n    error_template = 'Found using restricted magic method: {0}'\n    code = 603\n    previous_codes = {434}\n\n\n@final",
  "context_lines": "    .. versionchanged:: 0.11.0\n\n    See also:\n        https://www.youtube.com/watch?v=F6u5rhUQ6dU\n\n    \"\"\"\n\n    error_template = 'Found using restricted magic method: {0}'\n    code = 603\n    previous_codes = {434}\n\n\n@final\nclass WrongClassBodyContentViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found using restricted magic method: {0}'\n"
 },
 "301": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "199",
  "column": "4",
  "context": " = 'Found using restricted magic method: {0}'\n    code = 603\n    previous_codes = {434}\n\n\n@final\nclass WrongCla",
  "context_lines": "    See also:\n        https://www.youtube.com/watch?v=F6u5rhUQ6dU\n\n    \"\"\"\n\n    error_template = 'Found using restricted magic method: {0}'\n    code = 603\n    previous_codes = {434}\n\n\n@final\nclass WrongClassBodyContentViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 603\n"
 },
 "302": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "235",
  "column": "4",
  "context": ".7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect node inside `class` body'\n    code = 604\n    previous_codes = {452}\n\n\n@final",
  "context_lines": "    check out :class:`NestedClassViolation` for more information.\n\n    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect node inside `class` body'\n    code = 604\n    previous_codes = {452}\n\n\n@final\nclass MethodWithoutArgumentsViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found incorrect node inside `class` body'\n"
 },
 "303": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "236",
  "column": "4",
  "context": " = 'Found incorrect node inside `class` body'\n    code = 604\n    previous_codes = {452}\n\n\n@final\nclass MethodWi",
  "context_lines": "    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect node inside `class` body'\n    code = 604\n    previous_codes = {452}\n\n\n@final\nclass MethodWithoutArgumentsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 604\n"
 },
 "304": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "271",
  "column": "4",
  "context": ".7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found method without arguments: {0}'\n    code = 605\n    previous_codes = {453}\n\n\n@final",
  "context_lines": "            def method(): ...\n\n    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found method without arguments: {0}'\n    code = 605\n    previous_codes = {453}\n\n\n@final\nclass WrongBaseClassViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found method without arguments: {0}'\n"
 },
 "305": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "272",
  "column": "4",
  "context": "plate = 'Found method without arguments: {0}'\n    code = 605\n    previous_codes = {453}\n\n\n@final\nclass WrongBas",
  "context_lines": "    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found method without arguments: {0}'\n    code = 605\n    previous_codes = {453}\n\n\n@final\nclass WrongBaseClassViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 605\n"
 },
 "306": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "309",
  "column": "4",
  "context": "11.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect base class'\n    code = 606\n    previous_codes = {454}\n\n\n@final",
  "context_lines": "    .. versionchanged:: 0.7.1\n    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect base class'\n    code = 606\n    previous_codes = {454}\n\n\n@final\nclass WrongSlotsViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found incorrect base class'\n"
 },
 "307": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "310",
  "column": "4",
  "context": "error_template = 'Found incorrect base class'\n    code = 606\n    previous_codes = {454}\n\n\n@final\nclass WrongSlo",
  "context_lines": "    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect base class'\n    code = 606\n    previous_codes = {454}\n\n\n@final\nclass WrongSlotsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 606\n"
 },
 "308": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "357",
  "column": "4",
  "context": "11.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect `__slots__` syntax'\n    code = 607\n    previous_codes = {455}\n\n\n@final",
  "context_lines": "    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect `__slots__` syntax'\n    code = 607\n    previous_codes = {455}\n\n\n@final\nclass WrongSuperCallViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found incorrect `__slots__` syntax'\n"
 },
 "309": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "358",
  "column": "4",
  "context": "mplate = 'Found incorrect `__slots__` syntax'\n    code = 607\n    previous_codes = {455}\n\n\n@final\nclass WrongSup",
  "context_lines": "    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect `__slots__` syntax'\n    code = 607\n    previous_codes = {455}\n\n\n@final\nclass WrongSuperCallViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 607\n"
 },
 "310": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "389",
  "column": "4",
  "context": ".7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect `super()` call: {0}'\n    code = 608\n    previous_codes = {456}\n\n\n@final",
  "context_lines": "        super(ClassName, self).__init__()\n\n    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect `super()` call: {0}'\n    code = 608\n    previous_codes = {456}\n\n\n@final\nclass DirectMagicAttributeAccessViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found incorrect `super()` call: {0}'\n"
 },
 "311": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "390",
  "column": "4",
  "context": "plate = 'Found incorrect `super()` call: {0}'\n    code = 608\n    previous_codes = {456}\n\n\n@final\nclass DirectMa",
  "context_lines": "    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect `super()` call: {0}'\n    code = 608\n    previous_codes = {456}\n\n\n@final\nclass DirectMagicAttributeAccessViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 608\n"
 },
 "312": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "425",
  "column": "4",
  "context": ".8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found direct magic attribute usage: {0}'\n    code = 609\n    previous_codes = {462}\n\n\n@final",
  "context_lines": "    We allow this because a lot of internal logic relies on these methods.\n\n    .. versionadded:: 0.8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found direct magic attribute usage: {0}'\n    code = 609\n    previous_codes = {462}\n\n\n@final\nclass AsyncMagicMethodViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found direct magic attribute usage: {0}'\n"
 },
 "313": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "426",
  "column": "4",
  "context": "e = 'Found direct magic attribute usage: {0}'\n    code = 609\n    previous_codes = {462}\n\n\n@final\nclass AsyncMag",
  "context_lines": "    .. versionadded:: 0.8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found direct magic attribute usage: {0}'\n    code = 609\n    previous_codes = {462}\n\n\n@final\nclass AsyncMagicMethodViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 609\n"
 },
 "314": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "466",
  "column": "4",
  "context": ".html\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found forbidden `async` magic method usage: {0}'\n    code = 610\n\n\n@final\nclass YieldMagicMethodViol",
  "context_lines": "    See also:\n        https://docs.python.org/3/reference/datamodel.html\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found forbidden `async` magic method usage: {0}'\n    code = 610\n\n\n@final\nclass YieldMagicMethodViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found forbidden `async` magic method usage: {0}'\n"
 },
 "315": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "467",
  "column": "4",
  "context": "nd forbidden `async` magic method usage: {0}'\n    code = 610\n\n\n@final\nclass YieldMagicMethodViolation(ASTViolat",
  "context_lines": "        https://docs.python.org/3/reference/datamodel.html\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found forbidden `async` magic method usage: {0}'\n    code = 610\n\n\n@final\nclass YieldMagicMethodViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 610\n"
 },
 "316": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "510",
  "column": "4",
  "context": "11.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found forbidden `yield` magic method usage'\n    code = 611\n    previous_codes = {439, 435}\n\n\n@",
  "context_lines": "    .. versionadded:: 0.3.0\n    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found forbidden `yield` magic method usage'\n    code = 611\n    previous_codes = {439, 435}\n\n\n@final\nclass UselessOverwrittenMethodViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found forbidden `yield` magic method usage'\n"
 },
 "317": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "511",
  "column": "4",
  "context": " 'Found forbidden `yield` magic method usage'\n    code = 611\n    previous_codes = {439, 435}\n\n\n@final\nclass Use",
  "context_lines": "    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found forbidden `yield` magic method usage'\n    code = 611\n    previous_codes = {439, 435}\n\n\n@final\nclass UselessOverwrittenMethodViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 611\n"
 },
 "318": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "546",
  "column": "4",
  "context": "ent)\n\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found useless overwritten method: {0}'\n    code = 612\n\n\n@final\nclass WrongSuperCallAccess",
  "context_lines": "            def method(self, argument):\n                return super().method(argument)\n\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found useless overwritten method: {0}'\n    code = 612\n\n\n@final\nclass WrongSuperCallAccessViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found useless overwritten method: {0}'\n"
 },
 "319": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "547",
  "column": "4",
  "context": "ate = 'Found useless overwritten method: {0}'\n    code = 612\n\n\n@final\nclass WrongSuperCallAccessViolation(ASTVi",
  "context_lines": "                return super().method(argument)\n\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found useless overwritten method: {0}'\n    code = 612\n\n\n@final\nclass WrongSuperCallAccessViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 612\n"
 },
 "320": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "580",
  "column": "4",
  "context": "od()\n\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = (\n        'Found incorrect `super()` call context: i",
  "context_lines": "            def some_method(self):\n                other = super().other_method()\n\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = (\n        'Found incorrect `super()` call context: incorrect name access'\n    )\n    code = 613\n\n\n@final\n",
  "slicing": "    error_template = 'Found comparison of a variable to itself'\n"
 },
 "321": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "583",
  "column": "4",
  "context": ")` call context: incorrect name access'\n    )\n    code = 613\n\n\n@final\nclass WrongDescriptorDecoratorViolation(A",
  "context_lines": "    \"\"\"\n\n    error_template = (\n        'Found incorrect `super()` call context: incorrect name access'\n    )\n    code = 613\n\n\n@final\nclass WrongDescriptorDecoratorViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 613\n"
 },
 "322": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "619",
  "column": "4",
  "context": "on():\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found descriptor applied on a function'\n    code = 614\n",
  "context_lines": "        @property\n        def myFunction():\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found descriptor applied on a function'\n",
  "slicing": "    error_template = 'Found descriptor applied on a function'\n"
 },
 "323": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/oop.py",
  "lineno": "620",
  "column": "4",
  "context": "te = 'Found descriptor applied on a function'\n    code = 614\n",
  "context_lines": "        def myFunction():\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found descriptor applied on a function'\n    code = 614\n",
  "slicing": "    code = 614\n"
 },
 "324": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/system.py",
  "lineno": "45",
  "column": "4",
  "context": "ssues\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = (\n        'Internal error happened, see log. Please,",
  "context_lines": "    See also:\n        https://github.com/wemake-services/wemake-python-styleguide/issues\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = (\n        'Internal error happened, see log. Please, take some time to report it'\n    )\n",
  "slicing": "    error_template = (\n"
 },
 "325": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/system.py",
  "lineno": "48",
  "column": "4",
  "context": "g. Please, take some time to report it'\n    )\n    code = 0\n",
  "context_lines": "    \"\"\"\n\n    error_template = (\n        'Internal error happened, see log. Please, take some time to report it'\n    )\n    code = 0\n",
  "slicing": "    code = 0\n"
 },
 "326": {
  "name": "bigger_than",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/base.py",
  "lineno": "75",
  "column": "4",
  "context": "f postfixes used for violation baselines.\"\"\"\n\n    bigger_than = ' > {0}'\n    less_than = ' < {0}'\n\n\nclass BaseViolation(obj",
  "context_lines": "ErrorCallback = Callable[['BaseViolation'], None]\n\n\n@enum.unique\nclass ViolationPostfixes(enum.Enum):\n    \"\"\"String values of postfixes used for violation baselines.\"\"\"\n\n    bigger_than = ' > {0}'\n    less_than = ' < {0}'\n\n\nclass BaseViolation(object, metaclass=abc.ABCMeta):\n    \"\"\"\n    Abstract base class for all style violations.\n\n",
  "slicing": "    bigger_than = ' > {0}'\n"
 },
 "327": {
  "name": "less_than",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/base.py",
  "lineno": "76",
  "column": "4",
  "context": "ion baselines.\"\"\"\n\n    bigger_than = ' > {0}'\n    less_than = ' < {0}'\n\n\nclass BaseViolation(object, metaclass=abc.ABCMet",
  "context_lines": "@enum.unique\nclass ViolationPostfixes(enum.Enum):\n    \"\"\"String values of postfixes used for violation baselines.\"\"\"\n\n    bigger_than = ' > {0}'\n    less_than = ' < {0}'\n\n\nclass BaseViolation(object, metaclass=abc.ABCMeta):\n    \"\"\"\n    Abstract base class for all style violations.\n\n",
  "slicing": "    less_than = ' < {0}'\n"
 },
 "328": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "211",
  "column": "4",
  "context": "e: int\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 400\n    error_template = 'Found wrong magic comment: {",
  "context_lines": "        type = MyClass.get_type()  # noqa\n        coordinate = 10  # type: int\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 400\n    error_template = 'Found wrong magic comment: {0}'\n\n\n@final\nclass WrongDocCommentViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": [
   "function_def1 = 'def {0}():'\n",
   "function_template1 = \"\"\"\n",
   "function_template2 = \"\"\"\n",
   "method_template1 = \"\"\"\n",
   "method_template2 = \"\"\"\n",
   "    function_def1,\n",
   "    function_template1,\n",
   "    function_template2,\n",
   "    code = context.format(\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [BlockAndLocalOverlapViolation])\n",
   "    assert_error_text(visitor, variable_name)\n",
   "    function_def1,\n",
   "    method_template1,\n",
   "    method_template2,\n",
   "    code = context.format(\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [])\n",
   "    function_def1,\n",
   "    function_template1,\n",
   "    function_template2,\n",
   "    method_template1,\n",
   "    method_template2,\n",
   "    code = context.format(\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [])\n",
   "    function_def1,\n",
   "    function_template1,\n",
   "    function_template2,\n",
   "    method_template1,\n",
   "    method_template2,\n",
   "    code = context.format(\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [])\n",
   "pipeline = \"\"\"\n",
   "overload_template = \"\"\"\n",
   "    code = overload_template.format(import_overload, pipeline)\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [])\n",
   "    code = overload_template.format(decorator_template, pipeline)\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [BlockAndLocalOverlapViolation])\n",
   "method_setter_template = \"\"\"\n",
   "    code = method_setter_template.format('func')\n",
   "    tree = parse_ast_tree(mode(code))\n",
   "    visitor = BlockVariableVisitor(default_options, tree=tree)\n",
   "    visitor.run()\n",
   "    assert_errors(visitor, [])\n"
  ]
 },
 "329": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "212",
  "column": "4",
  "context": "versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 400\n    error_template = 'Found wrong magic comment: {0}'\n\n\n@final\nclass WrongDocCommentViolation(TokenizeVi",
  "context_lines": "        coordinate = 10  # type: int\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 400\n    error_template = 'Found wrong magic comment: {0}'\n\n\n@final\nclass WrongDocCommentViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found wrong magic comment: {0}'\n"
 },
 "330": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "244",
  "column": "4",
  "context": "arch']\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 401\n    error_template = 'Found wrong doc comment'\n\n\n@",
  "context_lines": "        #:\n        NAMES_WHITELIST = ['feature', 'bug', 'research']\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 401\n    error_template = 'Found wrong doc comment'\n\n\n@final\nclass OveruseOfNoqaCommentViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    code = 401\n"
 },
 "331": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "245",
  "column": "4",
  "context": "versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 401\n    error_template = 'Found wrong doc comment'\n\n\n@final\nclass OveruseOfNoqaCommentViolation(Simpl",
  "context_lines": "        NAMES_WHITELIST = ['feature', 'bug', 'research']\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    code = 401\n    error_template = 'Found wrong doc comment'\n\n\n@final\nclass OveruseOfNoqaCommentViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found wrong doc comment'\n"
 },
 "332": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "273",
  "column": "4",
  "context": "MENTS`\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found `noqa` comments overuse: {0}'\n    code = 402\n\n\n@final\nclass OveruseOfNoCoverComm",
  "context_lines": "        Default:\n        :str:`wemake_python_styleguide.options.defaults.MAX_NOQA_COMMENTS`\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found `noqa` comments overuse: {0}'\n    code = 402\n\n\n@final\nclass OveruseOfNoCoverCommentViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found incorrect module name pattern'\n"
 },
 "333": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "274",
  "column": "4",
  "context": "mplate = 'Found `noqa` comments overuse: {0}'\n    code = 402\n\n\n@final\nclass OveruseOfNoCoverCommentViolation(Si",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.MAX_NOQA_COMMENTS`\n\n    .. versionadded:: 0.7.0\n\n    \"\"\"\n\n    error_template = 'Found `noqa` comments overuse: {0}'\n    code = 402\n\n\n@final\nclass OveruseOfNoCoverCommentViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    code = 102\n"
 },
 "334": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "300",
  "column": "4",
  "context": "hecks.\n\n    .. versionadded:: 0.8.0\n\n    \"\"\"\n\n    error_template = 'Found `noqa` comments overuse: {0}'\n    code = 403\n\n\n@final\nclass ComplexDefaultValueV",
  "context_lines": "        Refactor your code to match the style.\n        Or use a config file to switch off some checks.\n\n    .. versionadded:: 0.8.0\n\n    \"\"\"\n\n    error_template = 'Found `noqa` comments overuse: {0}'\n    code = 403\n\n\n@final\nclass ComplexDefaultValueViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found negated condition'\n"
 },
 "335": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "301",
  "column": "4",
  "context": "mplate = 'Found `noqa` comments overuse: {0}'\n    code = 403\n\n\n@final\nclass ComplexDefaultValueViolation(ASTVio",
  "context_lines": "        Or use a config file to switch off some checks.\n\n    .. versionadded:: 0.8.0\n\n    \"\"\"\n\n    error_template = 'Found `noqa` comments overuse: {0}'\n    code = 403\n\n\n@final\nclass ComplexDefaultValueViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 504\n"
 },
 "336": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "334",
  "column": "4",
  "context": ".8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found complex default value'\n    code = 404\n    previous_codes = {459}\n\n\n@final",
  "context_lines": "        def __init__(self, with_doctest='PYFLAKES_DOCTEST' in os.environ):\n\n    .. versionadded:: 0.8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found complex default value'\n    code = 404\n    previous_codes = {459}\n\n\n@final\nclass LoopVariableDefinitionViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found complex default value'\n"
 },
 "337": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "335",
  "column": "4",
  "context": "rror_template = 'Found complex default value'\n    code = 404\n    previous_codes = {459}\n\n\n@final\nclass LoopVari",
  "context_lines": "    .. versionadded:: 0.8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found complex default value'\n    code = 404\n    previous_codes = {459}\n\n\n@final\nclass LoopVariableDefinitionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 404\n"
 },
 "338": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "368",
  "column": "4",
  "context": ".8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found wrong `for` loop variable definition'\n    code = 405\n    previous_codes = {460}\n\n\n@final",
  "context_lines": "            ...\n\n    .. versionadded:: 0.8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found wrong `for` loop variable definition'\n    code = 405\n    previous_codes = {460}\n\n\n@final\nclass ContextManagerVariableDefinitionViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found wrong `for` loop variable definition'\n"
 },
 "339": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "369",
  "column": "4",
  "context": " 'Found wrong `for` loop variable definition'\n    code = 405\n    previous_codes = {460}\n\n\n@final\nclass ContextM",
  "context_lines": "    .. versionadded:: 0.8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found wrong `for` loop variable definition'\n    code = 405\n    previous_codes = {460}\n\n\n@final\nclass ContextManagerVariableDefinitionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 405\n"
 },
 "340": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "402",
  "column": "4",
  "context": ".8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found wrong context manager variable definition'\n    code = 406\n    previous_codes = {461}\n\n\n@final",
  "context_lines": "            ...\n\n    .. versionadded:: 0.8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found wrong context manager variable definition'\n    code = 406\n    previous_codes = {461}\n\n\n@final\nclass MutableModuleConstantViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found wrong context manager variable definition'\n"
 },
 "341": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "403",
  "column": "4",
  "context": "nd wrong context manager variable definition'\n    code = 406\n    previous_codes = {461}\n\n\n@final\nclass MutableM",
  "context_lines": "    .. versionadded:: 0.8.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found wrong context manager variable definition'\n    code = 406\n    previous_codes = {461}\n\n\n@final\nclass MutableModuleConstantViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 406\n"
 },
 "342": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "439",
  "column": "4",
  "context": "10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found mutable module constant'\n    code = 407\n    previous_codes = {466}\n\n\n@final",
  "context_lines": "        CONST3 = {'key': 'value'}\n\n    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found mutable module constant'\n    code = 407\n    previous_codes = {466}\n\n\n@final\nclass SameElementsInConditionViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found mutable module constant'\n"
 },
 "343": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "440",
  "column": "4",
  "context": "or_template = 'Found mutable module constant'\n    code = 407\n    previous_codes = {466}\n\n\n@final\nclass SameElem",
  "context_lines": "    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found mutable module constant'\n    code = 407\n    previous_codes = {466}\n\n\n@final\nclass SameElementsInConditionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 407\n"
 },
 "344": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "473",
  "column": "4",
  "context": "11.0\n    .. versionchanged:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found duplicate logical condition'\n    code = 408\n    previous_codes = {469}\n\n\n@final",
  "context_lines": "    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found duplicate logical condition'\n    code = 408\n    previous_codes = {469}\n\n\n@final\nclass HeterogeneousCompareViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found duplicate logical condition'\n"
 },
 "345": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "474",
  "column": "4",
  "context": "emplate = 'Found duplicate logical condition'\n    code = 408\n    previous_codes = {469}\n\n\n@final\nclass Heteroge",
  "context_lines": "    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found duplicate logical condition'\n    code = 408\n    previous_codes = {469}\n\n\n@final\nclass HeterogeneousCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 408\n"
 },
 "346": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "514",
  "column": "4",
  "context": "10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found heterogeneous compare'\n    code = 409\n    previous_codes = {471}\n\n\n@final",
  "context_lines": "            ...\n\n    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found heterogeneous compare'\n    code = 409\n    previous_codes = {471}\n\n\n@final\nclass WrongModuleMetadataViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found heterogeneous compare'\n"
 },
 "347": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "515",
  "column": "4",
  "context": "rror_template = 'Found heterogeneous compare'\n    code = 409\n    previous_codes = {471}\n\n\n@final\nclass WrongMod",
  "context_lines": "    .. versionadded:: 0.10.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found heterogeneous compare'\n    code = 409\n    previous_codes = {471}\n\n\n@final\nclass WrongModuleMetadataViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 409\n"
 },
 "348": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "549",
  "column": "4",
  "context": " 0.1.2\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong metadata variable: {0}'\n    code = 410\n\n\n@final\nclass EmptyModuleViolation",
  "context_lines": "        __author__ = 'Nikita Sobolev'\n        __version__ = 0.1.2\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong metadata variable: {0}'\n    code = 410\n\n\n@final\nclass EmptyModuleViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found wrong metadata variable: {0}'\n"
 },
 "349": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "550",
  "column": "4",
  "context": "mplate = 'Found wrong metadata variable: {0}'\n    code = 410\n\n\n@final\nclass EmptyModuleViolation(SimpleViolatio",
  "context_lines": "        __version__ = 0.1.2\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong metadata variable: {0}'\n    code = 410\n\n\n@final\nclass EmptyModuleViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    code = 410\n"
 },
 "350": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "571",
  "column": "4",
  "context": " there\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found empty module'\n    code = 411\n\n\n@final\nclass InitModuleHasLogicVi",
  "context_lines": "        1. delete it\n        2. drop some documentation in it, so you will explain why it is there\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found empty module'\n    code = 411\n\n\n@final\nclass InitModuleHasLogicViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found empty module'\n"
 },
 "351": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "572",
  "column": "4",
  "context": "\"\"\n\n    error_template = 'Found empty module'\n    code = 411\n\n\n@final\nclass InitModuleHasLogicViolation(SimpleV",
  "context_lines": "        2. drop some documentation in it, so you will explain why it is there\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found empty module'\n    code = 411\n\n\n@final\nclass InitModuleHasLogicViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    code = 411\n"
 },
 "352": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "611",
  "column": "4",
  "context": "_CODE`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found `__init__.py` module with logic'\n    code = 412\n\n\n@final\nclass BadMagicModuleFuncti",
  "context_lines": "        Default:\n        :str:`wemake_python_styleguide.options.defaults.I_CONTROL_CODE`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found `__init__.py` module with logic'\n    code = 412\n\n\n@final\nclass BadMagicModuleFunctionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found `__init__.py` module with logic'\n"
 },
 "353": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "612",
  "column": "4",
  "context": "ate = 'Found `__init__.py` module with logic'\n    code = 412\n\n\n@final\nclass BadMagicModuleFunctionViolation(AST",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.I_CONTROL_CODE`\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found `__init__.py` module with logic'\n    code = 412\n\n\n@final\nclass BadMagicModuleFunctionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 412\n"
 },
 "354": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "637",
  "column": "4",
  "context": "_CODE`\n\n    .. versionadded:: 0.9.0\n\n    \"\"\"\n\n    error_template = 'Found bad magic module function: {0}'\n    code = 413\n\n\n@final\nclass WrongUnpackingViolat",
  "context_lines": "    Default:\n        :str:`wemake_python_styleguide.options.defaults.I_CONTROL_CODE`\n\n    .. versionadded:: 0.9.0\n\n    \"\"\"\n\n    error_template = 'Found bad magic module function: {0}'\n    code = 413\n\n\n@final\nclass WrongUnpackingViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found bad magic module function: {0}'\n"
 },
 "355": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "638",
  "column": "4",
  "context": "late = 'Found bad magic module function: {0}'\n    code = 413\n\n\n@final\nclass WrongUnpackingViolation(ASTViolatio",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.I_CONTROL_CODE`\n\n    .. versionadded:: 0.9.0\n\n    \"\"\"\n\n    error_template = 'Found bad magic module function: {0}'\n    code = 413\n\n\n@final\nclass WrongUnpackingViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 413\n"
 },
 "356": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "678",
  "column": "4",
  "context": ".6.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect unpacking target'\n    code = 414\n    previous_codes = {446}\n\n\n@final",
  "context_lines": "        self.writer = writer\n\n    .. versionadded:: 0.6.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect unpacking target'\n    code = 414\n    previous_codes = {446}\n\n\n@final\nclass DuplicateExceptionViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found incorrect unpacking target'\n"
 },
 "357": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "679",
  "column": "4",
  "context": "template = 'Found incorrect unpacking target'\n    code = 414\n    previous_codes = {446}\n\n\n@final\nclass Duplicat",
  "context_lines": "    .. versionadded:: 0.6.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect unpacking target'\n    code = 414\n    previous_codes = {446}\n\n\n@final\nclass DuplicateExceptionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 414\n"
 },
 "358": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "717",
  "column": "4",
  "context": ".6.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found duplicate exception: {0}'\n    code = 415\n    previous_codes = {447}\n\n\n@final",
  "context_lines": "            ...\n\n    .. versionadded:: 0.6.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found duplicate exception: {0}'\n    code = 415\n    previous_codes = {447}\n\n\n@final\nclass YieldInComprehensionViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found duplicate exception: {0}'\n"
 },
 "359": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "718",
  "column": "4",
  "context": "r_template = 'Found duplicate exception: {0}'\n    code = 415\n    previous_codes = {447}\n\n\n@final\nclass YieldInC",
  "context_lines": "    .. versionadded:: 0.6.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found duplicate exception: {0}'\n    code = 415\n    previous_codes = {447}\n\n\n@final\nclass YieldInComprehensionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 415\n"
 },
 "360": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "755",
  "column": "4",
  "context": ".7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found `yield` inside comprehension'\n    code = 416\n    previous_codes = {448}\n\n\n@final",
  "context_lines": "        https://github.com/satwikkansal/wtfPython#-yielding-none\n\n    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found `yield` inside comprehension'\n    code = 416\n    previous_codes = {448}\n\n\n@final\nclass NonUniqueItemsInHashViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found `yield` inside comprehension'\n"
 },
 "361": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "756",
  "column": "4",
  "context": "mplate = 'Found `yield` inside comprehension'\n    code = 416\n    previous_codes = {448}\n\n\n@final\nclass NonUniqu",
  "context_lines": "    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found `yield` inside comprehension'\n    code = 416\n    previous_codes = {448}\n\n\n@final\nclass NonUniqueItemsInHashViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 416\n"
 },
 "362": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "797",
  "column": "4",
  "context": "11.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found non-unique item in hash: {0}'\n    code = 417\n    previous_codes = {449}\n\n\n@final",
  "context_lines": "    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found non-unique item in hash: {0}'\n    code = 417\n    previous_codes = {449}\n\n\n@final\nclass BaseExceptionSubclassViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found non-unique item in hash: {0}'\n"
 },
 "363": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "798",
  "column": "4",
  "context": "mplate = 'Found non-unique item in hash: {0}'\n    code = 417\n    previous_codes = {449}\n\n\n@final\nclass BaseExce",
  "context_lines": "    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found non-unique item in hash: {0}'\n    code = 417\n    previous_codes = {449}\n\n\n@final\nclass BaseExceptionSubclassViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 417\n"
 },
 "364": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "834",
  "column": "4",
  "context": ".7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found exception inherited from `BaseException`'\n    code = 418\n    previous_codes = {450}\n\n\n@final",
  "context_lines": "        https://docs.python.org/3/library/exceptions.html#exception-hierarchy\n\n    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found exception inherited from `BaseException`'\n    code = 418\n    previous_codes = {450}\n\n\n@final\nclass TryExceptMultipleReturnPathViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found exception inherited from `BaseException`'\n"
 },
 "365": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "835",
  "column": "4",
  "context": "und exception inherited from `BaseException`'\n    code = 418\n    previous_codes = {450}\n\n\n@final\nclass TryExcep",
  "context_lines": "    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found exception inherited from `BaseException`'\n    code = 418\n    previous_codes = {450}\n\n\n@final\nclass TryExceptMultipleReturnPathViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 418\n"
 },
 "366": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "890",
  "column": "4",
  "context": "11.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found `try`/`else`/`finally` with multiple return paths'\n    code = 419\n    previous_codes = {458}\n\n\n@final",
  "context_lines": "    .. versionadded:: 0.7.0\n    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found `try`/`else`/`finally` with multiple return paths'\n    code = 419\n    previous_codes = {458}\n\n\n@final\nclass WrongKeywordViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found `try`/`else`/`finally` with multiple return paths'\n"
 },
 "367": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "891",
  "column": "4",
  "context": "/`else`/`finally` with multiple return paths'\n    code = 419\n    previous_codes = {458}\n\n\n@final\nclass WrongKey",
  "context_lines": "    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found `try`/`else`/`finally` with multiple return paths'\n    code = 419\n    previous_codes = {458}\n\n\n@final\nclass WrongKeywordViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 419\n"
 },
 "368": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "927",
  "column": "4",
  "context": "tored.\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong keyword: {0}'\n    code = 420\n\n\n@final\nclass WrongFunctionCallVio",
  "context_lines": "        ``del`` should be replaced with specialized methods like ``.pop()``.\n        ``global`` and ``nonlocal`` usages should be refactored.\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong keyword: {0}'\n    code = 420\n\n\n@final\nclass WrongFunctionCallViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found wrong keyword: {0}'\n"
 },
 "369": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "928",
  "column": "4",
  "context": "  error_template = 'Found wrong keyword: {0}'\n    code = 420\n\n\n@final\nclass WrongFunctionCallViolation(ASTViola",
  "context_lines": "        ``global`` and ``nonlocal`` usages should be refactored.\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong keyword: {0}'\n    code = 420\n\n\n@final\nclass WrongFunctionCallViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 420\n"
 },
 "370": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "952",
  "column": "4",
  "context": "rOOSuI\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong function call: {0}'\n    code = 421\n\n\n@final\nclass FutureImportViolatio",
  "context_lines": "    See also:\n        https://www.youtube.com/watch?v=YjHsOrOOSuI\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong function call: {0}'\n    code = 421\n\n\n@final\nclass FutureImportViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found wrong function call: {0}'\n"
 },
 "371": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "953",
  "column": "4",
  "context": "r_template = 'Found wrong function call: {0}'\n    code = 421\n\n\n@final\nclass FutureImportViolation(ASTViolation)",
  "context_lines": "        https://www.youtube.com/watch?v=YjHsOrOOSuI\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found wrong function call: {0}'\n    code = 421\n\n\n@final\nclass FutureImportViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 421\n"
 },
 "372": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "985",
  "column": "4",
  "context": "nction\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found future import: {0}'\n    code = 422\n\n\n@final\nclass RaiseNotImplementedV",
  "context_lines": "        # Wrong:\n        from __future__ import print_function\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found future import: {0}'\n    code = 422\n\n\n@final\nclass RaiseNotImplementedViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found future import: {0}'\n"
 },
 "373": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "986",
  "column": "4",
  "context": "  error_template = 'Found future import: {0}'\n    code = 422\n\n\n@final\nclass RaiseNotImplementedViolation(ASTVio",
  "context_lines": "        from __future__ import print_function\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found future import: {0}'\n    code = 422\n\n\n@final\nclass RaiseNotImplementedViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 422\n"
 },
 "374": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1018",
  "column": "4",
  "context": "tackoverflow.com/a/44575926/4842742\n\n    \"\"\"\n\n    error_template = 'Found raise NotImplemented'\n    code = 423\n\n\n@final\nclass BaseExceptionViolati",
  "context_lines": "    .. versionadded:: 0.1.0\n\n    See also:\n        https://stackoverflow.com/a/44575926/4842742\n\n    \"\"\"\n\n    error_template = 'Found raise NotImplemented'\n    code = 423\n\n\n@final\nclass BaseExceptionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found raise NotImplemented'\n"
 },
 "375": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1019",
  "column": "4",
  "context": "error_template = 'Found raise NotImplemented'\n    code = 423\n\n\n@final\nclass BaseExceptionViolation(ASTViolation",
  "context_lines": "    See also:\n        https://stackoverflow.com/a/44575926/4842742\n\n    \"\"\"\n\n    error_template = 'Found raise NotImplemented'\n    code = 423\n\n\n@final\nclass BaseExceptionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 423\n"
 },
 "376": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1053",
  "column": "4",
  "context": "ages/viewpage.action?pageId=1608527\n\n    \"\"\"\n\n    error_template = 'Found except `BaseException`'\n    code = 424\n\n\n@final\nclass BooleanPositionalArg",
  "context_lines": "    See also:\n        https://docs.python.org/3/library/exceptions.html#exception-hierarchy\n        https://help.semmle.com/wiki/pages/viewpage.action?pageId=1608527\n\n    \"\"\"\n\n    error_template = 'Found except `BaseException`'\n    code = 424\n\n\n@final\nclass BooleanPositionalArgumentViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found module cognitive complexity that is too high: {0}'\n"
 },
 "377": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1054",
  "column": "4",
  "context": "ror_template = 'Found except `BaseException`'\n    code = 424\n\n\n@final\nclass BooleanPositionalArgumentViolation(",
  "context_lines": "        https://docs.python.org/3/library/exceptions.html#exception-hierarchy\n        https://help.semmle.com/wiki/pages/viewpage.action?pageId=1608527\n\n    \"\"\"\n\n    error_template = 'Found except `BaseException`'\n    code = 424\n\n\n@final\nclass BooleanPositionalArgumentViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 232\n"
 },
 "378": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1089",
  "column": "4",
  "context": " True)\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found boolean non-keyword argument: {0}'\n    code = 425\n\n\n@final\nclass LambdaInsideLoopViol",
  "context_lines": "        # Wrong:\n        UsersRepository.add(user, True)\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found boolean non-keyword argument: {0}'\n    code = 425\n\n\n@final\nclass LambdaInsideLoopViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found boolean non-keyword argument: {0}'\n"
 },
 "379": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1090",
  "column": "4",
  "context": "e = 'Found boolean non-keyword argument: {0}'\n    code = 425\n\n\n@final\nclass LambdaInsideLoopViolation(ASTViolat",
  "context_lines": "        UsersRepository.add(user, True)\n\n    .. versionadded:: 0.6.0\n\n    \"\"\"\n\n    error_template = 'Found boolean non-keyword argument: {0}'\n    code = 425\n\n\n@final\nclass LambdaInsideLoopViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 425\n"
 },
 "380": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1129",
  "column": "4",
  "context": "ting/gotchas/#late-binding-closures\n\n    \"\"\"\n\n    error_template = \"Found `lambda` in loop's body\"\n    code = 426\n    previous_codes = {442}\n\n\n@final",
  "context_lines": "    .. versionchanged:: 0.14.0\n\n    See also:\n        https://docs.python-guide.org/writing/gotchas/#late-binding-closures\n\n    \"\"\"\n\n    error_template = \"Found `lambda` in loop's body\"\n    code = 426\n    previous_codes = {442}\n\n\n@final\nclass UnreachableCodeViolation(ASTViolation):\n",
  "slicing": "    error_template = \"Found `lambda` in loop's body\"\n"
 },
 "381": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1130",
  "column": "4",
  "context": "or_template = \"Found `lambda` in loop's body\"\n    code = 426\n    previous_codes = {442}\n\n\n@final\nclass Unreacha",
  "context_lines": "    See also:\n        https://docs.python-guide.org/writing/gotchas/#late-binding-closures\n\n    \"\"\"\n\n    error_template = \"Found `lambda` in loop's body\"\n    code = 426\n    previous_codes = {442}\n\n\n@final\nclass UnreachableCodeViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 426\n"
 },
 "382": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1175",
  "column": "4",
  "context": ".5.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found unreachable code'\n    code = 427\n    previous_codes = {443}\n\n\n@final",
  "context_lines": "            print('This line is unreachable')\n\n    .. versionadded:: 0.5.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found unreachable code'\n    code = 427\n    previous_codes = {443}\n\n\n@final\nclass StatementHasNoEffectViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found unreachable code'\n"
 },
 "383": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1176",
  "column": "4",
  "context": "    error_template = 'Found unreachable code'\n    code = 427\n    previous_codes = {443}\n\n\n@final\nclass Statemen",
  "context_lines": "    .. versionadded:: 0.5.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found unreachable code'\n    code = 427\n    previous_codes = {443}\n\n\n@final\nclass StatementHasNoEffectViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 427\n"
 },
 "384": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1211",
  "column": "4",
  "context": "0.5.0\n    .. versionchanged:: 0.11.0\n    \"\"\"\n\n    error_template = 'Found statement that has no effect'\n    code = 428\n    previous_codes = {444}\n\n\n@final",
  "context_lines": "            print\n\n    .. versionadded:: 0.5.0\n    .. versionchanged:: 0.11.0\n    \"\"\"\n\n    error_template = 'Found statement that has no effect'\n    code = 428\n    previous_codes = {444}\n\n\n@final\nclass MultipleAssignmentsViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found statement that has no effect'\n"
 },
 "385": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1212",
  "column": "4",
  "context": "mplate = 'Found statement that has no effect'\n    code = 428\n    previous_codes = {444}\n\n\n@final\nclass Multiple",
  "context_lines": "    .. versionadded:: 0.5.0\n    .. versionchanged:: 0.11.0\n    \"\"\"\n\n    error_template = 'Found statement that has no effect'\n    code = 428\n    previous_codes = {444}\n\n\n@final\nclass MultipleAssignmentsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 428\n"
 },
 "386": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1243",
  "column": "4",
  "context": ".6.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found multiple assign targets'\n    code = 429\n    previous_codes = {445}\n\n\n@final",
  "context_lines": "        a = b = 1\n\n    .. versionadded:: 0.6.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found multiple assign targets'\n    code = 429\n    previous_codes = {445}\n\n\n@final\nclass NestedFunctionViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found multiple assign targets'\n"
 },
 "387": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1244",
  "column": "4",
  "context": "or_template = 'Found multiple assign targets'\n    code = 429\n    previous_codes = {445}\n\n\n@final\nclass NestedFu",
  "context_lines": "    .. versionadded:: 0.6.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found multiple assign targets'\n    code = 429\n    previous_codes = {445}\n\n\n@final\nclass NestedFunctionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 429\n"
 },
 "388": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1284",
  "column": "4",
  "context": "   ...\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found nested function: {0}'\n    code = 430\n\n\n@final\nclass NestedClassViolation",
  "context_lines": "            def inner():\n                ...\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found nested function: {0}'\n    code = 430\n\n\n@final\nclass NestedClassViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found nested function: {0}'\n"
 },
 "389": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1285",
  "column": "4",
  "context": "error_template = 'Found nested function: {0}'\n    code = 430\n\n\n@final\nclass NestedClassViolation(ASTViolation):",
  "context_lines": "                ...\n\n    .. versionadded:: 0.1.0\n\n    \"\"\"\n\n    error_template = 'Found nested function: {0}'\n    code = 430\n\n\n@final\nclass NestedClassViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 430\n"
 },
 "390": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1324",
  "column": "4",
  "context": ".1.0\n    .. versionchanged:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found nested class: {0}'\n    code = 431\n\n\n@final\nclass MagicNumberViolation",
  "context_lines": "                ...\n\n    .. versionadded:: 0.1.0\n    .. versionchanged:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found nested class: {0}'\n    code = 431\n\n\n@final\nclass MagicNumberViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found nested class: {0}'\n"
 },
 "391": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1325",
  "column": "4",
  "context": "   error_template = 'Found nested class: {0}'\n    code = 431\n\n\n@final\nclass MagicNumberViolation(ASTViolation):",
  "context_lines": "    .. versionadded:: 0.1.0\n    .. versionchanged:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found nested class: {0}'\n    code = 431\n\n\n@final\nclass MagicNumberViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 431\n"
 },
 "392": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1369",
  "column": "4",
  "context": "org/wiki/Magic_number_(programming)\n\n    \"\"\"\n\n    code = 432\n    error_template = 'Found magic number: {0}'\n\n\n@",
  "context_lines": "    .. versionadded:: 0.1.0\n\n    See also:\n        https://en.wikipedia.org/wiki/Magic_number_(programming)\n\n    \"\"\"\n\n    code = 432\n    error_template = 'Found magic number: {0}'\n\n\n@final\nclass NestedImportViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 432\n"
 },
 "393": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1370",
  "column": "4",
  "context": "number_(programming)\n\n    \"\"\"\n\n    code = 432\n    error_template = 'Found magic number: {0}'\n\n\n@final\nclass NestedImportViolation(ASTViolation)",
  "context_lines": "    See also:\n        https://en.wikipedia.org/wiki/Magic_number_(programming)\n\n    \"\"\"\n\n    code = 432\n    error_template = 'Found magic number: {0}'\n\n\n@final\nclass NestedImportViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found magic number: {0}'\n"
 },
 "394": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1406",
  "column": "4",
  "context": "://github.com/seddonym/layer_linter\n\n    \"\"\"\n\n    error_template = 'Found nested import'\n    code = 433\n    previous_codes = {435}\n\n\n@final",
  "context_lines": "    .. versionchanged:: 0.11.0\n\n    See also:\n        https://github.com/seddonym/layer_linter\n\n    \"\"\"\n\n    error_template = 'Found nested import'\n    code = 433\n    previous_codes = {435}\n\n\n@final\nclass ReassigningVariableToItselfViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found nested import'\n"
 },
 "395": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1407",
  "column": "4",
  "context": "\"\n\n    error_template = 'Found nested import'\n    code = 433\n    previous_codes = {435}\n\n\n@final\nclass Reassign",
  "context_lines": "    See also:\n        https://github.com/seddonym/layer_linter\n\n    \"\"\"\n\n    error_template = 'Found nested import'\n    code = 433\n    previous_codes = {435}\n\n\n@final\nclass ReassigningVariableToItselfViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 433\n"
 },
 "396": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1435",
  "column": "4",
  "context": ".3.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found reassigning variable to itself: {0}'\n    code = 434\n    previous_codes = {438}\n\n\n@final",
  "context_lines": "        x_coord, y_coord = x_coord, y_coord\n\n    .. versionadded:: 0.3.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found reassigning variable to itself: {0}'\n    code = 434\n    previous_codes = {438}\n\n\n@final\nclass ListMultiplyViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found reassigning variable to itself: {0}'\n"
 },
 "397": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1436",
  "column": "4",
  "context": "= 'Found reassigning variable to itself: {0}'\n    code = 434\n    previous_codes = {438}\n\n\n@final\nclass ListMult",
  "context_lines": "    .. versionadded:: 0.3.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found reassigning variable to itself: {0}'\n    code = 434\n    previous_codes = {438}\n\n\n@final\nclass ListMultiplyViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 434\n"
 },
 "398": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1465",
  "column": "4",
  "context": "ion-8\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found list multiply'\n    code = 435\n\n\n@final\nclass ProtectedModuleViola",
  "context_lines": "    See also:\n        https://github.com/satwikkansal/wtfPython#-explanation-8\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found list multiply'\n    code = 435\n\n\n@final\nclass ProtectedModuleViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found list multiply'\n"
 },
 "399": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1466",
  "column": "4",
  "context": "\"\n\n    error_template = 'Found list multiply'\n    code = 435\n\n\n@final\nclass ProtectedModuleViolation(ASTViolati",
  "context_lines": "        https://github.com/satwikkansal/wtfPython#-explanation-8\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found list multiply'\n    code = 435\n\n\n@final\nclass ProtectedModuleViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 435\n"
 },
 "400": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1502",
  "column": "4",
  "context": "11.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found protected module import: {0}'\n    code = 436\n    previous_codes = {440}\n\n\n@final",
  "context_lines": "    .. versionadded:: 0.3.0\n    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found protected module import: {0}'\n    code = 436\n    previous_codes = {440}\n\n\n@final\nclass ProtectedAttributeViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found protected module import: {0}'\n"
 },
 "401": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1503",
  "column": "4",
  "context": "mplate = 'Found protected module import: {0}'\n    code = 436\n    previous_codes = {440}\n\n\n@final\nclass Protecte",
  "context_lines": "    .. versionchanged:: 0.11.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found protected module import: {0}'\n    code = 436\n    previous_codes = {440}\n\n\n@final\nclass ProtectedAttributeViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 436\n"
 },
 "402": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1546",
  "column": "4",
  "context": ".3.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found protected attribute usage: {0}'\n    code = 437\n    previous_codes = {441}\n\n\n@final",
  "context_lines": "    This is how protected attributes should be used.\n\n    .. versionadded:: 0.3.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found protected attribute usage: {0}'\n    code = 437\n    previous_codes = {441}\n\n\n@final\nclass StopIterationInsideGeneratorViolation(ASTViolation):\n",
  "slicing": "    error_template = 'Found protected attribute usage: {0}'\n"
 },
 "403": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1547",
  "column": "4",
  "context": "late = 'Found protected attribute usage: {0}'\n    code = 437\n    previous_codes = {441}\n\n\n@final\nclass StopIter",
  "context_lines": "    .. versionadded:: 0.3.0\n    .. versionchanged:: 0.11.0\n\n    \"\"\"\n\n    error_template = 'Found protected attribute usage: {0}'\n    code = 437\n    previous_codes = {441}\n\n\n@final\nclass StopIterationInsideGeneratorViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 437\n"
 },
 "404": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1583",
  "column": "4",
  "context": "ation\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found `StopIteration` raising inside generator'\n    code = 438\n\n\n@final\nclass WrongUnicodeEscapeVi",
  "context_lines": "    See also:\n        https://docs.python.org/3/library/exceptions.html#StopIteration\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found `StopIteration` raising inside generator'\n    code = 438\n\n\n@final\nclass WrongUnicodeEscapeViolation(TokenizeViolation):\n    r\"\"\"\n",
  "slicing": "    error_template = 'Found `StopIteration` raising inside generator'\n"
 },
 "405": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1584",
  "column": "4",
  "context": "und `StopIteration` raising inside generator'\n    code = 438\n\n\n@final\nclass WrongUnicodeEscapeViolation(Tokeniz",
  "context_lines": "        https://docs.python.org/3/library/exceptions.html#StopIteration\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found `StopIteration` raising inside generator'\n    code = 438\n\n\n@final\nclass WrongUnicodeEscapeViolation(TokenizeViolation):\n    r\"\"\"\n",
  "slicing": "    code = 438\n"
 },
 "406": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1612",
  "column": "4",
  "context": "0040'\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found unicode escape in a binary string: {0}'\n    code = 439\n\n\n@final\nclass BlockAndLocalOverlap",
  "context_lines": "        # Wrong:\n        escaped = b'\\u0040'  # equals to b'\\\\u0040'\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found unicode escape in a binary string: {0}'\n    code = 439\n\n\n@final\nclass BlockAndLocalOverlapViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found number with meaningless zeros: {0}'\n"
 },
 "407": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1613",
  "column": "4",
  "context": "Found unicode escape in a binary string: {0}'\n    code = 439\n\n\n@final\nclass BlockAndLocalOverlapViolation(ASTVi",
  "context_lines": "        escaped = b'\\u0040'  # equals to b'\\\\u0040'\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found unicode escape in a binary string: {0}'\n    code = 439\n\n\n@final\nclass BlockAndLocalOverlapViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 339\n"
 },
 "408": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1654",
  "column": "4",
  "context": "on-20\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found block variables overlap: {0}'\n    code = 440\n\n\n@final\nclass ControlVarUsedAfterB",
  "context_lines": "    See also:\n        https://github.com/satwikkansal/wtfPython#-explanation-20\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found block variables overlap: {0}'\n    code = 440\n\n\n@final\nclass ControlVarUsedAfterBlockViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found block variables overlap: {0}'\n"
 },
 "409": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1655",
  "column": "4",
  "context": "mplate = 'Found block variables overlap: {0}'\n    code = 440\n\n\n@final\nclass ControlVarUsedAfterBlockViolation(A",
  "context_lines": "        https://github.com/satwikkansal/wtfPython#-explanation-20\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found block variables overlap: {0}'\n    code = 440\n\n\n@final\nclass ControlVarUsedAfterBlockViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 440\n"
 },
 "410": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1696",
  "column": "4",
  "context": "12.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found control variable used after block: {0}'\n    code = 441\n\n\n@final\nclass OuterScopeShadowingV",
  "context_lines": "        https://github.com/satwikkansal/wtfPython#-explanation-32\n\n    .. versionadded:: 0.12.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found control variable used after block: {0}'\n    code = 441\n\n\n@final\nclass OuterScopeShadowingViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found control variable used after block: {0}'\n"
 },
 "411": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1697",
  "column": "4",
  "context": "Found control variable used after block: {0}'\n    code = 441\n\n\n@final\nclass OuterScopeShadowingViolation(ASTVio",
  "context_lines": "    .. versionadded:: 0.12.0\n    .. versionchanged:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found control variable used after block: {0}'\n    code = 441\n\n\n@final\nclass OuterScopeShadowingViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 441\n"
 },
 "412": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1735",
  "column": "4",
  "context": "ction\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found outer scope names shadowing: {0}'\n    code = 442\n\n\n@final\nclass UnhashableTypeInHash",
  "context_lines": "        def other():\n            test = 1  # shadows `test()` function\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found outer scope names shadowing: {0}'\n    code = 442\n\n\n@final\nclass UnhashableTypeInHashViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found outer scope names shadowing: {0}'\n"
 },
 "413": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1736",
  "column": "4",
  "context": "te = 'Found outer scope names shadowing: {0}'\n    code = 442\n\n\n@final\nclass UnhashableTypeInHashViolation(ASTVi",
  "context_lines": "            test = 1  # shadows `test()` function\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found outer scope names shadowing: {0}'\n    code = 442\n\n\n@final\nclass UnhashableTypeInHashViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 442\n"
 },
 "414": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1762",
  "column": "4",
  "context": ", 2}}\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found unhashable item'\n    code = 443\n\n\n@final\nclass WrongKeywordConditio",
  "context_lines": "        # Wrong:\n        my_dict = {[1, 2]: [], {2, 3}: {1, 2}}\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found unhashable item'\n    code = 443\n\n\n@final\nclass WrongKeywordConditionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found unhashable item'\n"
 },
 "415": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1763",
  "column": "4",
  "context": "\n    error_template = 'Found unhashable item'\n    code = 443\n\n\n@final\nclass WrongKeywordConditionViolation(ASTV",
  "context_lines": "        my_dict = {[1, 2]: [], {2, 3}: {1, 2}}\n\n    .. versionadded:: 0.12.0\n\n    \"\"\"\n\n    error_template = 'Found unhashable item'\n    code = 443\n\n\n@final\nclass WrongKeywordConditionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 443\n"
 },
 "416": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1805",
  "column": "4",
  "context": "12.0\n    .. versionchanged:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect keyword condition'\n    code = 444\n\n\n@final\nclass WrongNamedKeywordVio",
  "context_lines": "            ...\n\n    .. versionadded:: 0.12.0\n    .. versionchanged:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect keyword condition'\n    code = 444\n\n\n@final\nclass WrongNamedKeywordViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found incorrect keyword condition'\n"
 },
 "417": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1806",
  "column": "4",
  "context": "emplate = 'Found incorrect keyword condition'\n    code = 444\n\n\n@final\nclass WrongNamedKeywordViolation(ASTViola",
  "context_lines": "    .. versionadded:: 0.12.0\n    .. versionchanged:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect keyword condition'\n    code = 444\n\n\n@final\nclass WrongNamedKeywordViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 444\n"
 },
 "418": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1833",
  "column": "4",
  "context": "'|'})\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    code = 445\n    error_template = 'Found incorrectly named keyw",
  "context_lines": "        # Wrong:\n        print(**{'3end': '|'})\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    code = 445\n    error_template = 'Found incorrectly named keyword in the starred dict'\n\n\n@final\nclass ApproximateConstantViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 445\n"
 },
 "419": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1834",
  "column": "4",
  "context": "ersionadded:: 0.13.0\n\n    \"\"\"\n\n    code = 445\n    error_template = 'Found incorrectly named keyword in the starred dict'\n\n\n@final\nclass ApproximateConstantViolation(ASTVio",
  "context_lines": "        print(**{'3end': '|'})\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    code = 445\n    error_template = 'Found incorrectly named keyword in the starred dict'\n\n\n@final\nclass ApproximateConstantViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found wrong operation sign'\n"
 },
 "420": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1872",
  "column": "4",
  "context": "tants\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    code = 446\n    error_template = 'Found approximate constant: ",
  "context_lines": "    See also:\n        https://docs.python.org/3/library/math.html#constants\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    code = 446\n    error_template = 'Found approximate constant: {0}'\n\n\n@final\nclass StringConstantRedefinedViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 446\n"
 },
 "421": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1873",
  "column": "4",
  "context": "ersionadded:: 0.13.0\n\n    \"\"\"\n\n    code = 446\n    error_template = 'Found approximate constant: {0}'\n\n\n@final\nclass StringConstantRedefinedViolation(AS",
  "context_lines": "        https://docs.python.org/3/library/math.html#constants\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    code = 446\n    error_template = 'Found approximate constant: {0}'\n\n\n@final\nclass StringConstantRedefinedViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found approximate constant: {0}'\n"
 },
 "422": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1906",
  "column": "4",
  "context": "wxyz\"\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found alphabet as strings: {0}'\n    code = 447\n\n\n@final\nclass IncorrectExceptOrder",
  "context_lines": "        UPPERCASE_ALPH = \"ABCD...WXYZ\"\n        LOWERCASE_ALPH = \"abcd...wxyz\"\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found alphabet as strings: {0}'\n    code = 447\n\n\n@final\nclass IncorrectExceptOrderViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found alphabet as strings: {0}'\n"
 },
 "423": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1907",
  "column": "4",
  "context": "r_template = 'Found alphabet as strings: {0}'\n    code = 447\n\n\n@final\nclass IncorrectExceptOrderViolation(ASTVi",
  "context_lines": "        LOWERCASE_ALPH = \"abcd...wxyz\"\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found alphabet as strings: {0}'\n    code = 447\n\n\n@final\nclass IncorrectExceptOrderViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 447\n"
 },
 "424": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1951",
  "column": "4",
  "context": "MHlzw\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect exception order'\n    code = 448\n\n\n@final\nclass FloatKeyViolation(AS",
  "context_lines": "    See also:\n        https://bit.ly/36MHlzw\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect exception order'\n    code = 448\n\n\n@final\nclass FloatKeyViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found incorrect exception order'\n"
 },
 "425": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1952",
  "column": "4",
  "context": "_template = 'Found incorrect exception order'\n    code = 448\n\n\n@final\nclass FloatKeyViolation(ASTViolation):\n  ",
  "context_lines": "        https://bit.ly/36MHlzw\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found incorrect exception order'\n    code = 448\n\n\n@final\nclass FloatKeyViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 448\n"
 },
 "426": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1983",
  "column": "4",
  "context": "[1.0]\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found float used as a key'\n    code = 449\n\n\n@final\nclass ProtectedModuleMembe",
  "context_lines": "        some = {1.0: 'a'}\n        some[1.0]\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found float used as a key'\n    code = 449\n\n\n@final\nclass ProtectedModuleMemberViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found float used as a key'\n"
 },
 "427": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "1984",
  "column": "4",
  "context": " error_template = 'Found float used as a key'\n    code = 449\n\n\n@final\nclass ProtectedModuleMemberViolation(ASTV",
  "context_lines": "        some[1.0]\n\n    .. versionadded:: 0.13.0\n\n    \"\"\"\n\n    error_template = 'Found float used as a key'\n    code = 449\n\n\n@final\nclass ProtectedModuleMemberViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 449\n"
 },
 "428": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2016",
  "column": "4",
  "context": "ected\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found protected object import: {0}'\n    code = 450\n\n\n@final\nclass PositionalOnlyArgume",
  "context_lines": "        from some.module import _protected\n        from some.module import _protected as not_protected\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found protected object import: {0}'\n    code = 450\n\n\n@final\nclass PositionalOnlyArgumentsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found protected object import: {0}'\n"
 },
 "429": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2017",
  "column": "4",
  "context": "mplate = 'Found protected object import: {0}'\n    code = 450\n\n\n@final\nclass PositionalOnlyArgumentsViolation(AS",
  "context_lines": "        from some.module import _protected as not_protected\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found protected object import: {0}'\n    code = 450\n\n\n@final\nclass PositionalOnlyArgumentsViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 450\n"
 },
 "430": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2056",
  "column": "4",
  "context": "0570/\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found positional-only argument'\n    code = 451\n\n\nclass LoopControlFinallyViolation",
  "context_lines": "    See also:\n        https://www.python.org/dev/peps/pep-0570/\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found positional-only argument'\n    code = 451\n\n\nclass LoopControlFinallyViolation(ASTViolation):\n    \"\"\"\n    Forbid ``break`` and ``continue`` in a ``finally`` block.\n\n",
  "slicing": "    error_template = 'Found positional-only argument'\n"
 },
 "431": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2057",
  "column": "4",
  "context": "r_template = 'Found positional-only argument'\n    code = 451\n\n\nclass LoopControlFinallyViolation(ASTViolation):",
  "context_lines": "        https://www.python.org/dev/peps/pep-0570/\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found positional-only argument'\n    code = 451\n\n\nclass LoopControlFinallyViolation(ASTViolation):\n    \"\"\"\n    Forbid ``break`` and ``continue`` in a ``finally`` block.\n\n",
  "slicing": "    code = 451\n"
 },
 "432": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2099",
  "column": "4",
  "context": "tinue\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found `break` or `continue` in `finally` block'\n    code = 452\n\n\n@final\nclass ShebangViolation(Sim",
  "context_lines": "        finally:\n            continue\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found `break` or `continue` in `finally` block'\n    code = 452\n\n\n@final\nclass ShebangViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found `break` or `continue` in `finally` block'\n"
 },
 "433": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2100",
  "column": "4",
  "context": "und `break` or `continue` in `finally` block'\n    code = 452\n\n\n@final\nclass ShebangViolation(SimpleViolation):\n",
  "context_lines": "            continue\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found `break` or `continue` in `finally` block'\n    code = 452\n\n\n@final\nclass ShebangViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    code = 452\n"
 },
 "434": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2135",
  "column": "4",
  "context": "ython\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found executable mismatch: {0}'\n    code = 453\n\n\n@final\nclass BaseExceptionRaiseVi",
  "context_lines": "        #!/usr/bin/env\n            #!/usr/bin/env python\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found executable mismatch: {0}'\n    code = 453\n\n\n@final\nclass BaseExceptionRaiseViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found executable mismatch: {0}'\n"
 },
 "435": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2136",
  "column": "4",
  "context": "r_template = 'Found executable mismatch: {0}'\n    code = 453\n\n\n@final\nclass BaseExceptionRaiseViolation(ASTViol",
  "context_lines": "            #!/usr/bin/env python\n\n    .. versionadded:: 0.14.0\n\n    \"\"\"\n\n    error_template = 'Found executable mismatch: {0}'\n    code = 453\n\n\n@final\nclass BaseExceptionRaiseViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 453\n"
 },
 "436": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2171",
  "column": "4",
  "context": "tions\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found wrong `raise` exception type: {0}'\n    code = 454\n\n\n@final\nclass NonTrivialExceptViol",
  "context_lines": "        https://docs.python.org/3/library/exceptions.html#exception-hierarchy\n        https://docs.python.org/3/tutorial/errors.html#user-defined-exceptions\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found wrong `raise` exception type: {0}'\n    code = 454\n\n\n@final\nclass NonTrivialExceptViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found wrong `raise` exception type: {0}'\n"
 },
 "437": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2172",
  "column": "4",
  "context": "e = 'Found wrong `raise` exception type: {0}'\n    code = 454\n\n\n@final\nclass NonTrivialExceptViolation(ASTViolat",
  "context_lines": "        https://docs.python.org/3/tutorial/errors.html#user-defined-exceptions\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found wrong `raise` exception type: {0}'\n    code = 454\n\n\n@final\nclass NonTrivialExceptViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 454\n"
 },
 "438": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2214",
  "column": "4",
  "context": "  ...\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found non-trivial expression as an argument for \"except\"'\n    code = 455\n\n\n@final\nclass FloatingNanViolation",
  "context_lines": "        except TypeError or ValueError:\n            ...\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found non-trivial expression as an argument for \"except\"'\n    code = 455\n\n\n@final\nclass FloatingNanViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found non-trivial expression as an argument for \"except\"'\n"
 },
 "439": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2215",
  "column": "4",
  "context": "ivial expression as an argument for \"except\"'\n    code = 455\n\n\n@final\nclass FloatingNanViolation(ASTViolation):",
  "context_lines": "            ...\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found non-trivial expression as an argument for \"except\"'\n    code = 455\n\n\n@final\nclass FloatingNanViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 455\n"
 },
 "440": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2242",
  "column": "4",
  "context": "), 3)\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found \"NaN\" as argument to float()'\n    code = 456\n\n\n@final\nclass InfiniteWhileLoopVio",
  "context_lines": "        # Wrong:\n        min(float(\"NAN\"), 3)\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found \"NaN\" as argument to float()'\n    code = 456\n\n\n@final\nclass InfiniteWhileLoopViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found \"NaN\" as argument to float()'\n"
 },
 "441": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2243",
  "column": "4",
  "context": "mplate = 'Found \"NaN\" as argument to float()'\n    code = 456\n\n\n@final\nclass InfiniteWhileLoopViolation(ASTViola",
  "context_lines": "        min(float(\"NAN\"), 3)\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found \"NaN\" as argument to float()'\n    code = 456\n\n\n@final\nclass InfiniteWhileLoopViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 456\n"
 },
 "442": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2272",
  "column": "4",
  "context": "ver')\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found an infinite while loop'\n    code = 457\n\n\n@final\nclass ImportCollisionViola",
  "context_lines": "        while True:\n            print('forever')\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found an infinite while loop'\n    code = 457\n\n\n@final\nclass ImportCollisionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found an infinite while loop'\n"
 },
 "443": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2273",
  "column": "4",
  "context": "ror_template = 'Found an infinite while loop'\n    code = 457\n\n\n@final\nclass ImportCollisionViolation(ASTViolati",
  "context_lines": "            print('forever')\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found an infinite while loop'\n    code = 457\n\n\n@final\nclass ImportCollisionViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 457\n"
 },
 "444": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2309",
  "column": "4",
  "context": "egies\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found imports collision: {0}'\n    code = 458\n\n\n@final\nclass FloatComplexCompareV",
  "context_lines": "        import hypothesis\n        from hypothesis import strategies\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found imports collision: {0}'\n    code = 458\n\n\n@final\nclass FloatComplexCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found imports collision: {0}'\n"
 },
 "445": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2310",
  "column": "4",
  "context": "ror_template = 'Found imports collision: {0}'\n    code = 458\n\n\n@final\nclass FloatComplexCompareViolation(ASTVio",
  "context_lines": "        from hypothesis import strategies\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found imports collision: {0}'\n    code = 458\n\n\n@final\nclass FloatComplexCompareViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 458\n"
 },
 "446": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2344",
  "column": "4",
  "context": "/ 0.1\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found comparison with float or complex number'\n    code = 459\n\n\n@final\nclass SingleElementDestruc",
  "context_lines": "        3.0 == 0.3 / 0.1\n        3 + 4j == (0.3 + 0.4j) / 0.1\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found comparison with float or complex number'\n    code = 459\n\n\n@final\nclass SingleElementDestructuringViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found comparison with float or complex number'\n"
 },
 "447": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2345",
  "column": "4",
  "context": "ound comparison with float or complex number'\n    code = 459\n\n\n@final\nclass SingleElementDestructuringViolation",
  "context_lines": "        3 + 4j == (0.3 + 0.4j) / 0.1\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found comparison with float or complex number'\n    code = 459\n\n\n@final\nclass SingleElementDestructuringViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 459\n"
 },
 "448": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2371",
  "column": "4",
  "context": "= [1]\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found single element destructuring'\n    code = 460\n\n\n@final\nclass ForbiddenInlineIgnor",
  "context_lines": "        # Wrong:\n        (first,) = [1]\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found single element destructuring'\n    code = 460\n\n\n@final\nclass ForbiddenInlineIgnoreViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found single element destructuring'\n"
 },
 "449": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2372",
  "column": "4",
  "context": "mplate = 'Found single element destructuring'\n    code = 460\n\n\n@final\nclass ForbiddenInlineIgnoreViolation(Simp",
  "context_lines": "        (first,) = [1]\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found single element destructuring'\n    code = 460\n\n\n@final\nclass ForbiddenInlineIgnoreViolation(SimpleViolation):\n    \"\"\"\n",
  "slicing": "    code = 460\n"
 },
 "450": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2399",
  "column": "4",
  "context": "NORE`\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Forbidden inline ignore: {0}'\n    code = 461\n\n\n@final\nclass WrongMultilineString",
  "context_lines": "        Default:\n        :str:`wemake_python_styleguide.options.defaults.FORBIDDEN_INLINE_IGNORE`\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Forbidden inline ignore: {0}'\n    code = 461\n\n\n@final\nclass WrongMultilineStringUseViolation(TokenizeViolation):\n    '''\n",
  "slicing": "    error_template = 'Forbidden inline ignore: {0}'\n"
 },
 "451": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2400",
  "column": "4",
  "context": "ror_template = 'Forbidden inline ignore: {0}'\n    code = 461\n\n\n@final\nclass WrongMultilineStringUseViolation(To",
  "context_lines": "        :str:`wemake_python_styleguide.options.defaults.FORBIDDEN_INLINE_IGNORE`\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Forbidden inline ignore: {0}'\n    code = 461\n\n\n@final\nclass WrongMultilineStringUseViolation(TokenizeViolation):\n    '''\n",
  "slicing": "    code = 461\n"
 },
 "452": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2437",
  "column": "4",
  "context": " \"\"\")\n\n    .. versionadded:: 0.15.0\n\n    '''\n\n    error_template = 'Wrong multiline string usage'\n    code = 462\n\n\n@final\nclass GetterWithoutReturnV",
  "context_lines": "            abc\n        \"\"\")\n\n    .. versionadded:: 0.15.0\n\n    '''\n\n    error_template = 'Wrong multiline string usage'\n    code = 462\n\n\n@final\nclass GetterWithoutReturnViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Wrong multiline string usage'\n"
 },
 "453": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2438",
  "column": "4",
  "context": "ror_template = 'Wrong multiline string usage'\n    code = 462\n\n\n@final\nclass GetterWithoutReturnViolation(ASTVio",
  "context_lines": "        \"\"\")\n\n    .. versionadded:: 0.15.0\n\n    '''\n\n    error_template = 'Wrong multiline string usage'\n    code = 462\n\n\n@final\nclass GetterWithoutReturnViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 462\n"
 },
 "454": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2470",
  "column": "4",
  "context": "ue!')\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found a getter without a return value'\n    code = 463\n\n\n@final\nclass EmptyCommentViolatio",
  "context_lines": "        def get_random_number():\n             print('I do not return a value!')\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found a getter without a return value'\n    code = 463\n\n\n@final\nclass EmptyCommentViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found a getter without a return value'\n"
 },
 "455": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2471",
  "column": "4",
  "context": "ate = 'Found a getter without a return value'\n    code = 463\n\n\n@final\nclass EmptyCommentViolation(TokenizeViola",
  "context_lines": "             print('I do not return a value!')\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found a getter without a return value'\n    code = 463\n\n\n@final\nclass EmptyCommentViolation(TokenizeViolation):\n    \"\"\"\n",
  "slicing": "    code = 463\n"
 },
 "456": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2507",
  "column": "4",
  "context": "r = 1\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found empty comment'\n    code = 464\n\n\n@final\nclass BitwiseAndBooleanMix",
  "context_lines": "        #\n        my_var = 1\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found empty comment'\n    code = 464\n\n\n@final\nclass BitwiseAndBooleanMixupViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    error_template = 'Found empty comment'\n"
 },
 "457": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2508",
  "column": "4",
  "context": "\"\n\n    error_template = 'Found empty comment'\n    code = 464\n\n\n@final\nclass BitwiseAndBooleanMixupViolation(AST",
  "context_lines": "        my_var = 1\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Found empty comment'\n    code = 464\n\n\n@final\nclass BitwiseAndBooleanMixupViolation(ASTViolation):\n    \"\"\"\n",
  "slicing": "    code = 464\n"
 },
 "458": {
  "name": "error_template",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2539",
  "column": "4",
  "context": "alse)\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Likely bitwise and boolean operation mixup'\n    code = 465\n",
  "context_lines": "        # Wrong:\n\n        result = ((first > 0) & False)\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Likely bitwise and boolean operation mixup'\n",
  "slicing": "    error_template = 'Likely bitwise and boolean operation mixup'\n"
 },
 "459": {
  "name": "code",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "wemake-python-styleguide/wemake_python_styleguide/violations/best_practices.py",
  "lineno": "2540",
  "column": "4",
  "context": " 'Likely bitwise and boolean operation mixup'\n    code = 465\n",
  "context_lines": "        result = ((first > 0) & False)\n\n    .. versionadded:: 0.15.0\n\n    \"\"\"\n\n    error_template = 'Likely bitwise and boolean operation mixup'\n    code = 465\n",
  "slicing": "    code = 465\n"
 }
}