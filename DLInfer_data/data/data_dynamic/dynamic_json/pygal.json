{
 "1": {
  "name": "r",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "40",
  "column": "4",
  "context": "\n    r = r or 0\n    g = g or 0\n    b = b or 0\n    r /= 255\n    g /= 255\n    b /= 255\n    max_ = max((r, g, b)",
  "context_lines": "    \"\"\"Convert a color in r, g, b to a color in h, s, l\"\"\"\n    r = r or 0\n    g = g or 0\n    b = b or 0\n    r /= 255\n    g /= 255\n    b /= 255\n    max_ = max((r, g, b))\n    min_ = min((r, g, b))\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "2": {
  "name": "g",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "41",
  "column": "4",
  "context": " 0\n    g = g or 0\n    b = b or 0\n    r /= 255\n    g /= 255\n    b /= 255\n    max_ = max((r, g, b))\n    min_ = ",
  "context_lines": "    r = r or 0\n    g = g or 0\n    b = b or 0\n    r /= 255\n    g /= 255\n    b /= 255\n    max_ = max((r, g, b))\n    min_ = min((r, g, b))\n    d = max_ - min_\n\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "3": {
  "name": "b",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "42",
  "column": "4",
  "context": "or 0\n    b = b or 0\n    r /= 255\n    g /= 255\n    b /= 255\n    max_ = max((r, g, b))\n    min_ = min((r, g, b)",
  "context_lines": "    g = g or 0\n    b = b or 0\n    r /= 255\n    g /= 255\n    b /= 255\n    max_ = max((r, g, b))\n    min_ = min((r, g, b))\n    d = max_ - min_\n\n    if not d:\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "4": {
  "name": "max_",
  "type": "float",
  "class": "build-in",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "43",
  "column": "4",
  "context": "b or 0\n    r /= 255\n    g /= 255\n    b /= 255\n    max_ = max((r, g, b))\n    min_ = min((r, g, b))\n    d = max_ - min_\n\n   ",
  "context_lines": "    b = b or 0\n    r /= 255\n    g /= 255\n    b /= 255\n    max_ = max((r, g, b))\n    min_ = min((r, g, b))\n    d = max_ - min_\n\n    if not d:\n        h = 0\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "5": {
  "name": "min_",
  "type": "float",
  "class": "build-in",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "44",
  "column": "4",
  "context": "/= 255\n    b /= 255\n    max_ = max((r, g, b))\n    min_ = min((r, g, b))\n    d = max_ - min_\n\n    if not d:\n        h = 0\n ",
  "context_lines": "    r /= 255\n    g /= 255\n    b /= 255\n    max_ = max((r, g, b))\n    min_ = min((r, g, b))\n    d = max_ - min_\n\n    if not d:\n        h = 0\n    elif r is max_:\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "6": {
  "name": "h",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "48",
  "column": "8",
  "context": "g, b))\n    d = max_ - min_\n\n    if not d:\n        h = 0\n    elif r is max_:\n        h = 60 * (g - b) / d\n ",
  "context_lines": "    max_ = max((r, g, b))\n    min_ = min((r, g, b))\n    d = max_ - min_\n\n    if not d:\n        h = 0\n    elif r is max_:\n        h = 60 * (g - b) / d\n    elif g is max_:\n        h = 60 * (b - r) / d + 120\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "7": {
  "name": "l",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "56",
  "column": "4",
  "context": "    else:\n        h = 60 * (r - g) / d + 240\n\n    l = .5 * (max_ + min_)\n    if not d:\n        s = 0\n    elif l < 0.5:\n    ",
  "context_lines": "    elif g is max_:\n        h = 60 * (b - r) / d + 120\n    else:\n        h = 60 * (r - g) / d + 240\n\n    l = .5 * (max_ + min_)\n    if not d:\n        s = 0\n    elif l < 0.5:\n        s = .5 * d / l\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "8": {
  "name": "s",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "58",
  "column": "8",
  "context": "\n    l = .5 * (max_ + min_)\n    if not d:\n        s = 0\n    elif l < 0.5:\n        s = .5 * d / l\n    else:",
  "context_lines": "    else:\n        h = 60 * (r - g) / d + 240\n\n    l = .5 * (max_ + min_)\n    if not d:\n        s = 0\n    elif l < 0.5:\n        s = .5 * d / l\n    else:\n        s = .5 * d / (1 - l)\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "9": {
  "name": "h",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "50",
  "column": "8",
  "context": " not d:\n        h = 0\n    elif r is max_:\n        h = 60 * (g - b) / d\n    elif g is max_:\n        h = 60 * (b - r) / d +",
  "context_lines": "    d = max_ - min_\n\n    if not d:\n        h = 0\n    elif r is max_:\n        h = 60 * (g - b) / d\n    elif g is max_:\n        h = 60 * (b - r) / d + 120\n    else:\n        h = 60 * (r - g) / d + 240\n\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "10": {
  "name": "h",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "52",
  "column": "8",
  "context": " h = 60 * (g - b) / d\n    elif g is max_:\n        h = 60 * (b - r) / d + 120\n    else:\n        h = 60 * (r - g) / d + 240\n\n    ",
  "context_lines": "        h = 0\n    elif r is max_:\n        h = 60 * (g - b) / d\n    elif g is max_:\n        h = 60 * (b - r) / d + 120\n    else:\n        h = 60 * (r - g) / d + 240\n\n    l = .5 * (max_ + min_)\n    if not d:\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "11": {
  "name": "h",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "54",
  "column": "8",
  "context": "     h = 60 * (b - r) / d + 120\n    else:\n        h = 60 * (r - g) / d + 240\n\n    l = .5 * (max_ + min_)\n    if not d:\n        ",
  "context_lines": "        h = 60 * (g - b) / d\n    elif g is max_:\n        h = 60 * (b - r) / d + 120\n    else:\n        h = 60 * (r - g) / d + 240\n\n    l = .5 * (max_ + min_)\n    if not d:\n        s = 0\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "12": {
  "name": "s",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "60",
  "column": "8",
  "context": "if not d:\n        s = 0\n    elif l < 0.5:\n        s = .5 * d / l\n    else:\n        s = .5 * d / (1 - l)\n    return ",
  "context_lines": "    l = .5 * (max_ + min_)\n    if not d:\n        s = 0\n    elif l < 0.5:\n        s = .5 * d / l\n    else:\n        s = .5 * d / (1 - l)\n    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n\n\ndef hsl_to_rgb(h, s, l):\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "13": {
  "name": "s",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "62",
  "column": "8",
  "context": "l < 0.5:\n        s = .5 * d / l\n    else:\n        s = .5 * d / (1 - l)\n    return tuple(map(normalize_float, (h % 360, s ",
  "context_lines": "        s = 0\n    elif l < 0.5:\n        s = .5 * d / l\n    else:\n        s = .5 * d / (1 - l)\n    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n\n\ndef hsl_to_rgb(h, s, l):\n    \"\"\"Convert a color in h, s, l to a color in r, g, b\"\"\"\n    h /= 360\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "14": {
  "name": "h",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "68",
  "column": "4",
  "context": "t a color in h, s, l to a color in r, g, b\"\"\"\n    h /= 360\n    s /= 100\n    l /= 100\n\n    m2 = l * (s + 1) if",
  "context_lines": "        s = .5 * d / (1 - l)\n    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n\n\ndef hsl_to_rgb(h, s, l):\n    \"\"\"Convert a color in h, s, l to a color in r, g, b\"\"\"\n    h /= 360\n    s /= 100\n    l /= 100\n\n    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n    m1 = 2 * l - m2\n\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "15": {
  "name": "s",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "69",
  "column": "4",
  "context": "h, s, l to a color in r, g, b\"\"\"\n    h /= 360\n    s /= 100\n    l /= 100\n\n    m2 = l * (s + 1) if l <= .5 else",
  "context_lines": "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n\n\ndef hsl_to_rgb(h, s, l):\n    \"\"\"Convert a color in h, s, l to a color in r, g, b\"\"\"\n    h /= 360\n    s /= 100\n    l /= 100\n\n    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n    m1 = 2 * l - m2\n\n    def h_to_rgb(h):\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "16": {
  "name": "l",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "70",
  "column": "4",
  "context": "color in r, g, b\"\"\"\n    h /= 360\n    s /= 100\n    l /= 100\n\n    m2 = l * (s + 1) if l <= .5 else l + s - l * ",
  "context_lines": "def hsl_to_rgb(h, s, l):\n    \"\"\"Convert a color in h, s, l to a color in r, g, b\"\"\"\n    h /= 360\n    s /= 100\n    l /= 100\n\n    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n    m1 = 2 * l - m2\n\n    def h_to_rgb(h):\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "17": {
  "name": "m2",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "72",
  "column": "4",
  "context": " b\"\"\"\n    h /= 360\n    s /= 100\n    l /= 100\n\n    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n    m1 = 2 * l - m2\n\n    def h_to_rgb(h):\n        ",
  "context_lines": "    \"\"\"Convert a color in h, s, l to a color in r, g, b\"\"\"\n    h /= 360\n    s /= 100\n    l /= 100\n\n    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n    m1 = 2 * l - m2\n\n    def h_to_rgb(h):\n        h = h % 1\n        if 6 * h < 1:\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "18": {
  "name": "m1",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "73",
  "column": "4",
  "context": "2 = l * (s + 1) if l <= .5 else l + s - l * s\n    m1 = 2 * l - m2\n\n    def h_to_rgb(h):\n        h = h % 1\n        if",
  "context_lines": "    h /= 360\n    s /= 100\n    l /= 100\n\n    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n    m1 = 2 * l - m2\n\n    def h_to_rgb(h):\n        h = h % 1\n        if 6 * h < 1:\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "19": {
  "name": "h",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "76",
  "column": "8",
  "context": "    m1 = 2 * l - m2\n\n    def h_to_rgb(h):\n        h = h % 1\n        if 6 * h < 1:\n            return m1 + 6 * ",
  "context_lines": "    l /= 100\n\n    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n    m1 = 2 * l - m2\n\n    def h_to_rgb(h):\n        h = h % 1\n        if 6 * h < 1:\n            return m1 + 6 * h * (m2 - m1)\n        if 2 * h < 1:\n            return m2\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "20": {
  "name": "r",
  "type": "int",
  "class": "build-in",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "85",
  "column": "4",
  "context": " * (2 / 3 - h) * (m2 - m1)\n        return m1\n\n    r, g, b = map(\n        lambda x: round(x * 255), map(h_to_rgb, (h",
  "context_lines": "            return m2\n        if 3 * h < 2:\n            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n        return m1\n\n    r, g, b = map(\n        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n    )\n\n    return r, g, b\n\n\ndef parse_color(color):\n",
  "slicing": [
   "    r, g, b = map(\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "21": {
  "name": "g",
  "type": "int",
  "class": "build-in",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "85",
  "column": "7",
  "context": "(2 / 3 - h) * (m2 - m1)\n        return m1\n\n    r, g, b = map(\n        lambda x: round(x * 255), map(h_to_rgb, (h",
  "context_lines": "            return m2\n        if 3 * h < 2:\n            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n        return m1\n\n    r, g, b = map(\n        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n    )\n\n    return r, g, b\n\n\ndef parse_color(color):\n",
  "slicing": [
   "    r, g, b = map(\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "22": {
  "name": "b",
  "type": "int",
  "class": "build-in",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "85",
  "column": "10",
  "context": "/ 3 - h) * (m2 - m1)\n        return m1\n\n    r, g, b = map(\n        lambda x: round(x * 255), map(h_to_rgb, (h",
  "context_lines": "            return m2\n        if 3 * h < 2:\n            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n        return m1\n\n    r, g, b = map(\n        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n    )\n\n    return r, g, b\n\n\ndef parse_color(color):\n",
  "slicing": [
   "    r, g, b = map(\n",
   "    return r, g, b\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "23": {
  "name": "r",
  "type": "NoneType",
  "class": "unknown",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "97",
  "column": "4",
  "context": "ba, #rrggbb,\n    #rrggbbaa, rgb, rgba\n    \"\"\"\n    r = g = b = a = type = None\n    if color.startswith('#'):\n        color = colo",
  "context_lines": "    \"\"\"Take any css color definition and give back a tuple containing the\n    r, g, b, a values along with a type which can be: #rgb, #rgba, #rrggbb,\n    #rrggbbaa, rgb, rgba\n    \"\"\"\n    r = g = b = a = type = None\n    if color.startswith('#'):\n        color = color[1:]\n        if len(color) == 3:\n            type = '#rgb'\n",
  "slicing": [
   "    r = g = b = a = type = None\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "24": {
  "name": "g",
  "type": "NoneType",
  "class": "unknown",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "97",
  "column": "8",
  "context": "#rrggbb,\n    #rrggbbaa, rgb, rgba\n    \"\"\"\n    r = g = b = a = type = None\n    if color.startswith('#'):\n        color = colo",
  "context_lines": "    \"\"\"Take any css color definition and give back a tuple containing the\n    r, g, b, a values along with a type which can be: #rgb, #rgba, #rrggbb,\n    #rrggbbaa, rgb, rgba\n    \"\"\"\n    r = g = b = a = type = None\n    if color.startswith('#'):\n        color = color[1:]\n        if len(color) == 3:\n            type = '#rgb'\n",
  "slicing": [
   "    r = g = b = a = type = None\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "25": {
  "name": "b",
  "type": "NoneType",
  "class": "unknown",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "97",
  "column": "12",
  "context": "gbb,\n    #rrggbbaa, rgb, rgba\n    \"\"\"\n    r = g = b = a = type = None\n    if color.startswith('#'):\n        color = colo",
  "context_lines": "    \"\"\"Take any css color definition and give back a tuple containing the\n    r, g, b, a values along with a type which can be: #rgb, #rgba, #rrggbb,\n    #rrggbbaa, rgb, rgba\n    \"\"\"\n    r = g = b = a = type = None\n    if color.startswith('#'):\n        color = color[1:]\n        if len(color) == 3:\n            type = '#rgb'\n",
  "slicing": [
   "    r = g = b = a = type = None\n",
   "    return r, g, b, a, type\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "26": {
  "name": "a",
  "type": "NoneType",
  "class": "unknown",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "97",
  "column": "16",
  "context": "\n    #rrggbbaa, rgb, rgba\n    \"\"\"\n    r = g = b = a = type = None\n    if color.startswith('#'):\n        color = colo",
  "context_lines": "    \"\"\"Take any css color definition and give back a tuple containing the\n    r, g, b, a values along with a type which can be: #rgb, #rgba, #rrggbb,\n    #rrggbbaa, rgb, rgba\n    \"\"\"\n    r = g = b = a = type = None\n    if color.startswith('#'):\n        color = color[1:]\n        if len(color) == 3:\n            type = '#rgb'\n",
  "slicing": [
   "    r = g = b = a = type = None\n",
   "    return r, g, b, a, type\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "27": {
  "name": "type",
  "type": "NoneType",
  "class": "unknown",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "97",
  "column": "20",
  "context": " #rrggbbaa, rgb, rgba\n    \"\"\"\n    r = g = b = a = type = None\n    if color.startswith('#'):\n        color = colo",
  "context_lines": "    \"\"\"Take any css color definition and give back a tuple containing the\n    r, g, b, a values along with a type which can be: #rgb, #rgba, #rrggbb,\n    #rrggbbaa, rgb, rgba\n    \"\"\"\n    r = g = b = a = type = None\n    if color.startswith('#'):\n        color = color[1:]\n        if len(color) == 3:\n            type = '#rgb'\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "    r, g, b = map(\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    r = g = b = a = type = None\n",
   "        color = color[1:]\n",
   "        if len(color) == 3:\n",
   "            type = '#rgb'\n",
   "            color = color + 'f'\n",
   "        if len(color) == 4:\n",
   "            type = type or '#rgba'\n",
   "            color = ''.join([c * 2 for c in color])\n",
   "        if len(color) == 6:\n",
   "            type = type or '#rrggbb'\n",
   "            color = color + 'ff'\n",
   "        assert len(color) == 8\n",
   "        type = type or '#rrggbbaa'\n",
   "        r, g, b, a = [\n",
   "            int(''.join(c), 16) for c in zip(color[::2], color[1::2])\n",
   "    elif color.startswith('rgb('):\n",
   "        type = 'rgb'\n",
   "        color = color[4:-1]\n",
   "        r, g, b, a = [int(c) for c in color.split(',')] + [1]\n",
   "    elif color.startswith('rgba('):\n",
   "        type = 'rgba'\n",
   "        color = color[5:-1]\n",
   "        r, g, b, a = [int(c) for c in color.split(',')[:-1]\n",
   "                      ] + [float(color.split(',')[-1])]\n",
   "    return r, g, b, a, type\n",
   "    if type == '#rgb':\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "    if type == '#rgba':\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "    if type == '#rrggbb':\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "    if type == '#rrggbbaa':\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "    if type == 'rgb':\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "    if type == 'rgba':\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    return rgb_to_hsl(*parse_color(color)[:3])[2] < 17.9\n",
   "    r, g, b, a, type = parse_color(color)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n",
   "    return adjust(color, 0, percent)\n",
   "    return adjust(color, 1, percent)\n",
   "    return adjust(color, 1, -percent)\n",
   "    return adjust(color, 2, percent)\n",
   "    return adjust(color, 2, -percent)\n"
  ]
 },
 "28": {
  "name": "type",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "101",
  "column": "12",
  "context": "color[1:]\n        if len(color) == 3:\n            type = '#rgb'\n            color = color + 'f'\n        if len(col",
  "context_lines": "    r = g = b = a = type = None\n    if color.startswith('#'):\n        color = color[1:]\n        if len(color) == 3:\n            type = '#rgb'\n            color = color + 'f'\n        if len(color) == 4:\n            type = type or '#rgba'\n            color = ''.join([c * 2 for c in color])\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "    r, g, b = map(\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    r = g = b = a = type = None\n",
   "        color = color[1:]\n",
   "        if len(color) == 3:\n",
   "            type = '#rgb'\n",
   "            color = color + 'f'\n",
   "        if len(color) == 4:\n",
   "            type = type or '#rgba'\n",
   "            color = ''.join([c * 2 for c in color])\n",
   "        if len(color) == 6:\n",
   "            type = type or '#rrggbb'\n",
   "            color = color + 'ff'\n",
   "        assert len(color) == 8\n",
   "        type = type or '#rrggbbaa'\n",
   "        r, g, b, a = [\n",
   "            int(''.join(c), 16) for c in zip(color[::2], color[1::2])\n",
   "    elif color.startswith('rgb('):\n",
   "        type = 'rgb'\n",
   "        color = color[4:-1]\n",
   "        r, g, b, a = [int(c) for c in color.split(',')] + [1]\n",
   "    elif color.startswith('rgba('):\n",
   "        type = 'rgba'\n",
   "        color = color[5:-1]\n",
   "        r, g, b, a = [int(c) for c in color.split(',')[:-1]\n",
   "                      ] + [float(color.split(',')[-1])]\n",
   "    return r, g, b, a, type\n",
   "    if type == '#rgb':\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "    if type == '#rgba':\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "    if type == '#rrggbb':\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "    if type == '#rrggbbaa':\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "    if type == 'rgb':\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "    if type == 'rgba':\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    return rgb_to_hsl(*parse_color(color)[:3])[2] < 17.9\n",
   "    r, g, b, a, type = parse_color(color)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n",
   "    return adjust(color, 0, percent)\n",
   "    return adjust(color, 1, percent)\n",
   "    return adjust(color, 1, -percent)\n",
   "    return adjust(color, 2, percent)\n",
   "    return adjust(color, 2, -percent)\n"
  ]
 },
 "29": {
  "name": "color",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "102",
  "column": "12",
  "context": "olor) == 3:\n            type = '#rgb'\n            color = color + 'f'\n        if len(color) == 4:\n            type = typ",
  "context_lines": "    if color.startswith('#'):\n        color = color[1:]\n        if len(color) == 3:\n            type = '#rgb'\n            color = color + 'f'\n        if len(color) == 4:\n            type = type or '#rgba'\n            color = ''.join([c * 2 for c in color])\n        if len(color) == 6:\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "    r, g, b = map(\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    r = g = b = a = type = None\n",
   "        color = color[1:]\n",
   "        if len(color) == 3:\n",
   "            type = '#rgb'\n",
   "            color = color + 'f'\n",
   "        if len(color) == 4:\n",
   "            type = type or '#rgba'\n",
   "            color = ''.join([c * 2 for c in color])\n",
   "        if len(color) == 6:\n",
   "            type = type or '#rrggbb'\n",
   "            color = color + 'ff'\n",
   "        assert len(color) == 8\n",
   "        type = type or '#rrggbbaa'\n",
   "        r, g, b, a = [\n",
   "            int(''.join(c), 16) for c in zip(color[::2], color[1::2])\n",
   "    elif color.startswith('rgb('):\n",
   "        type = 'rgb'\n",
   "        color = color[4:-1]\n",
   "        r, g, b, a = [int(c) for c in color.split(',')] + [1]\n",
   "    elif color.startswith('rgba('):\n",
   "        type = 'rgba'\n",
   "        color = color[5:-1]\n",
   "        r, g, b, a = [int(c) for c in color.split(',')[:-1]\n",
   "                      ] + [float(color.split(',')[-1])]\n",
   "    return r, g, b, a, type\n",
   "    if type == '#rgb':\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "    if type == '#rgba':\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "    if type == '#rrggbb':\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "    if type == '#rrggbbaa':\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "    if type == 'rgb':\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "    if type == 'rgba':\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    return rgb_to_hsl(*parse_color(color)[:3])[2] < 17.9\n",
   "    r, g, b, a, type = parse_color(color)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n",
   "    return adjust(color, 0, percent)\n",
   "    return adjust(color, 1, percent)\n",
   "    return adjust(color, 1, -percent)\n",
   "    return adjust(color, 2, percent)\n",
   "    return adjust(color, 2, -percent)\n"
  ]
 },
 "30": {
  "name": "color",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "105",
  "column": "12",
  "context": "4:\n            type = type or '#rgba'\n            color = ''.join([c * 2 for c in color])\n        if len(color) == 6:\n            type = typ",
  "context_lines": "            type = '#rgb'\n            color = color + 'f'\n        if len(color) == 4:\n            type = type or '#rgba'\n            color = ''.join([c * 2 for c in color])\n        if len(color) == 6:\n            type = type or '#rrggbb'\n            color = color + 'ff'\n        assert len(color) == 8\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "    r, g, b = map(\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    r = g = b = a = type = None\n",
   "        color = color[1:]\n",
   "        if len(color) == 3:\n",
   "            type = '#rgb'\n",
   "            color = color + 'f'\n",
   "        if len(color) == 4:\n",
   "            type = type or '#rgba'\n",
   "            color = ''.join([c * 2 for c in color])\n",
   "        if len(color) == 6:\n",
   "            type = type or '#rrggbb'\n",
   "            color = color + 'ff'\n",
   "        assert len(color) == 8\n",
   "        type = type or '#rrggbbaa'\n",
   "        r, g, b, a = [\n",
   "            int(''.join(c), 16) for c in zip(color[::2], color[1::2])\n",
   "    elif color.startswith('rgb('):\n",
   "        type = 'rgb'\n",
   "        color = color[4:-1]\n",
   "        r, g, b, a = [int(c) for c in color.split(',')] + [1]\n",
   "    elif color.startswith('rgba('):\n",
   "        type = 'rgba'\n",
   "        color = color[5:-1]\n",
   "        r, g, b, a = [int(c) for c in color.split(',')[:-1]\n",
   "                      ] + [float(color.split(',')[-1])]\n",
   "    return r, g, b, a, type\n",
   "    if type == '#rgb':\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "    if type == '#rgba':\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "    if type == '#rrggbb':\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "    if type == '#rrggbbaa':\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "    if type == 'rgb':\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "    if type == 'rgba':\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    return rgb_to_hsl(*parse_color(color)[:3])[2] < 17.9\n",
   "    r, g, b, a, type = parse_color(color)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n",
   "    return adjust(color, 0, percent)\n",
   "    return adjust(color, 1, percent)\n",
   "    return adjust(color, 1, -percent)\n",
   "    return adjust(color, 2, percent)\n",
   "    return adjust(color, 2, -percent)\n"
  ]
 },
 "31": {
  "name": "color",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "108",
  "column": "12",
  "context": "\n            type = type or '#rrggbb'\n            color = color + 'ff'\n        assert len(color) == 8\n        type = type",
  "context_lines": "            type = type or '#rgba'\n            color = ''.join([c * 2 for c in color])\n        if len(color) == 6:\n            type = type or '#rrggbb'\n            color = color + 'ff'\n        assert len(color) == 8\n        type = type or '#rrggbbaa'\n        r, g, b, a = [\n            int(''.join(c), 16) for c in zip(color[::2], color[1::2])\n",
  "slicing": [
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "    r, g, b = map(\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "    r = g = b = a = type = None\n",
   "        color = color[1:]\n",
   "        if len(color) == 3:\n",
   "            type = '#rgb'\n",
   "            color = color + 'f'\n",
   "        if len(color) == 4:\n",
   "            type = type or '#rgba'\n",
   "            color = ''.join([c * 2 for c in color])\n",
   "        if len(color) == 6:\n",
   "            type = type or '#rrggbb'\n",
   "            color = color + 'ff'\n",
   "        assert len(color) == 8\n",
   "        type = type or '#rrggbbaa'\n",
   "        r, g, b, a = [\n",
   "            int(''.join(c), 16) for c in zip(color[::2], color[1::2])\n",
   "    elif color.startswith('rgb('):\n",
   "        type = 'rgb'\n",
   "        color = color[4:-1]\n",
   "        r, g, b, a = [int(c) for c in color.split(',')] + [1]\n",
   "    elif color.startswith('rgba('):\n",
   "        type = 'rgba'\n",
   "        color = color[5:-1]\n",
   "        r, g, b, a = [int(c) for c in color.split(',')[:-1]\n",
   "                      ] + [float(color.split(',')[-1])]\n",
   "    return r, g, b, a, type\n",
   "    if type == '#rgb':\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "    if type == '#rgba':\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "    if type == '#rrggbb':\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "    if type == '#rrggbbaa':\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "    if type == 'rgb':\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "    if type == 'rgba':\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    return rgb_to_hsl(*parse_color(color)[:3])[2] < 17.9\n",
   "    r, g, b, a, type = parse_color(color)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n",
   "    return adjust(color, 0, percent)\n",
   "    return adjust(color, 1, percent)\n",
   "    return adjust(color, 1, -percent)\n",
   "    return adjust(color, 2, percent)\n",
   "    return adjust(color, 2, -percent)\n"
  ]
 },
 "32": {
  "name": "a",
  "type": "float",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "114",
  "column": "8",
  "context": "in zip(color[::2], color[1::2])\n        ]\n        a /= 255\n    elif color.startswith('rgb('):\n        type = ",
  "context_lines": "        type = type or '#rrggbbaa'\n        r, g, b, a = [\n            int(''.join(c), 16) for c in zip(color[::2], color[1::2])\n        ]\n        a /= 255\n    elif color.startswith('rgb('):\n        type = 'rgb'\n        color = color[4:-1]\n        r, g, b, a = [int(c) for c in color.split(',')] + [1]\n",
  "slicing": [
   "        a /= 255\n",
   "    return r, g, b, a, type\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "33": {
  "name": "type",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "136",
  "column": "8",
  "context": "% (int(r / 17), int(g / 17), int(b / 17))\n        type = '#rrggbb'\n\n    if type == '#rgba':\n        if r % 17 == 0 an",
  "context_lines": "    if type == '#rgb':\n        # Don't lose precision on rgb shortcut\n        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n        type = '#rrggbb'\n\n    if type == '#rgba':\n        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n            return '#%x%x%x%x' % (\n",
  "slicing": [
   "        type = '#rrggbb'\n",
   "    if type == '#rgba':\n",
   "    if type == '#rrggbb':\n",
   "    if type == '#rrggbbaa':\n",
   "    if type == 'rgb':\n",
   "    if type == 'rgba':\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "34": {
  "name": "_clamp",
  "type": "function",
  "class": "unknown",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "165",
  "column": "0",
  "context": "n rgb_to_hsl(*parse_color(color)[:3])[2] < 17.9\n\n\n_clamp = lambda x: max(0, min(100, x))\n\n\ndef _adjust(hsl, attribute, percent):\n    \"\"\"Int",
  "context_lines": "    \"\"\"\n    Determine if the background color need a light or dark foreground color\n    \"\"\"\n    return rgb_to_hsl(*parse_color(color)[:3])[2] < 17.9\n\n\n_clamp = lambda x: max(0, min(100, x))\n\n\ndef _adjust(hsl, attribute, percent):\n    \"\"\"Internal adjust function\"\"\"\n    hsl = list(hsl)\n",
  "slicing": [
   "def rgb_to_hsl(r, g, b):\n",
   "    r = r or 0\n",
   "    g = g or 0\n",
   "    b = b or 0\n",
   "    r /= 255\n",
   "    g /= 255\n",
   "    b /= 255\n",
   "    max_ = max((r, g, b))\n",
   "    min_ = min((r, g, b))\n",
   "    d = max_ - min_\n",
   "    if not d:\n",
   "        h = 0\n",
   "    elif r is max_:\n",
   "        h = 60 * (g - b) / d\n",
   "    elif g is max_:\n",
   "        h = 60 * (b - r) / d + 120\n",
   "        h = 60 * (r - g) / d + 240\n",
   "    l = .5 * (max_ + min_)\n",
   "    if not d:\n",
   "        s = 0\n",
   "    elif l < 0.5:\n",
   "        s = .5 * d / l\n",
   "        s = .5 * d / (1 - l)\n",
   "    return tuple(map(normalize_float, (h % 360, s * 100, l * 100)))\n",
   "    h /= 360\n",
   "    s /= 100\n",
   "    l /= 100\n",
   "    m2 = l * (s + 1) if l <= .5 else l + s - l * s\n",
   "    m1 = 2 * l - m2\n",
   "        h = h % 1\n",
   "        if 6 * h < 1:\n",
   "            return m1 + 6 * h * (m2 - m1)\n",
   "        if 2 * h < 1:\n",
   "            return m2\n",
   "        if 3 * h < 2:\n",
   "            return m1 + 6 * (2 / 3 - h) * (m2 - m1)\n",
   "        return m1\n",
   "    r, g, b = map(\n",
   "        lambda x: round(x * 255), map(h_to_rgb, (h + 1 / 3, h, h - 1 / 3))\n",
   "    return r, g, b\n",
   "def parse_color(color):\n",
   "    r = g = b = a = type = None\n",
   "        color = color[1:]\n",
   "        if len(color) == 3:\n",
   "            type = '#rgb'\n",
   "            color = color + 'f'\n",
   "        if len(color) == 4:\n",
   "            type = type or '#rgba'\n",
   "            color = ''.join([c * 2 for c in color])\n",
   "        if len(color) == 6:\n",
   "            type = type or '#rrggbb'\n",
   "            color = color + 'ff'\n",
   "        assert len(color) == 8\n",
   "        type = type or '#rrggbbaa'\n",
   "        r, g, b, a = [\n",
   "            int(''.join(c), 16) for c in zip(color[::2], color[1::2])\n",
   "        a /= 255\n",
   "    elif color.startswith('rgb('):\n",
   "        type = 'rgb'\n",
   "        color = color[4:-1]\n",
   "        r, g, b, a = [int(c) for c in color.split(',')] + [1]\n",
   "    elif color.startswith('rgba('):\n",
   "        type = 'rgba'\n",
   "        color = color[5:-1]\n",
   "        r, g, b, a = [int(c) for c in color.split(',')[:-1]\n",
   "                      ] + [float(color.split(',')[-1])]\n",
   "    return r, g, b, a, type\n",
   "    if type == '#rgb':\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "            return '#%x%x%x' % (int(r / 17), int(g / 17), int(b / 17))\n",
   "        type = '#rrggbb'\n",
   "    if type == '#rgba':\n",
   "        if r % 17 == 0 and g % 17 == 0 and b % 17 == 0:\n",
   "                int(r / 17), int(g / 17), int(b / 17), int(a * 15)\n",
   "        type = '#rrggbbaa'\n",
   "    if type == '#rrggbb':\n",
   "        return '#%02x%02x%02x' % (r, g, b)\n",
   "    if type == '#rrggbbaa':\n",
   "        return '#%02x%02x%02x%02x' % (r, g, b, int(a * 255))\n",
   "    if type == 'rgb':\n",
   "        return 'rgb(%d, %d, %d)' % (r, g, b)\n",
   "    if type == 'rgba':\n",
   "        return 'rgba(%d, %d, %d, %g)' % (r, g, b, a)\n",
   "    return rgb_to_hsl(*parse_color(color)[:3])[2] < 17.9\n",
   "_clamp = lambda x: max(0, min(100, x))\n",
   "        hsl[attribute] = _clamp(hsl[attribute] + percent)\n",
   "    r, g, b, a, type = parse_color(color)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n",
   "    return adjust(color, 0, percent)\n",
   "    return adjust(color, 1, percent)\n",
   "    return adjust(color, 1, -percent)\n",
   "    return adjust(color, 2, percent)\n",
   "    return adjust(color, 2, -percent)\n"
  ]
 },
 "35": {
  "name": "r",
  "type": "int",
  "class": "build-in",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "181",
  "column": "4",
  "context": "\"Adjust an attribute of color by a percent\"\"\"\n    r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g,",
  "context_lines": "        hsl[attribute] += percent\n\n    return hsl\n\n\ndef adjust(color, attribute, percent):\n    \"\"\"Adjust an attribute of color by a percent\"\"\"\n    r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n    return unparse_color(r, g, b, a, type)\n\n\ndef rotate(color, percent):\n    \"\"\"Rotate a color by changing its hue value by percent\"\"\"\n",
  "slicing": [
   "    r, g, b, a, type = parse_color(color)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "36": {
  "name": "g",
  "type": "int",
  "class": "build-in",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "181",
  "column": "7",
  "context": "just an attribute of color by a percent\"\"\"\n    r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g,",
  "context_lines": "        hsl[attribute] += percent\n\n    return hsl\n\n\ndef adjust(color, attribute, percent):\n    \"\"\"Adjust an attribute of color by a percent\"\"\"\n    r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n    return unparse_color(r, g, b, a, type)\n\n\ndef rotate(color, percent):\n    \"\"\"Rotate a color by changing its hue value by percent\"\"\"\n",
  "slicing": [
   "    r, g, b, a, type = parse_color(color)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "37": {
  "name": "b",
  "type": "int",
  "class": "build-in",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "181",
  "column": "10",
  "context": "t an attribute of color by a percent\"\"\"\n    r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g,",
  "context_lines": "        hsl[attribute] += percent\n\n    return hsl\n\n\ndef adjust(color, attribute, percent):\n    \"\"\"Adjust an attribute of color by a percent\"\"\"\n    r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n    return unparse_color(r, g, b, a, type)\n\n\ndef rotate(color, percent):\n    \"\"\"Rotate a color by changing its hue value by percent\"\"\"\n",
  "slicing": [
   "    r, g, b, a, type = parse_color(color)\n",
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "38": {
  "name": "a",
  "type": "float",
  "class": "build-in",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "181",
  "column": "13",
  "context": "n attribute of color by a percent\"\"\"\n    r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g,",
  "context_lines": "        hsl[attribute] += percent\n\n    return hsl\n\n\ndef adjust(color, attribute, percent):\n    \"\"\"Adjust an attribute of color by a percent\"\"\"\n    r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n    return unparse_color(r, g, b, a, type)\n\n\ndef rotate(color, percent):\n    \"\"\"Rotate a color by changing its hue value by percent\"\"\"\n",
  "slicing": [
   "    r, g, b, a, type = parse_color(color)\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "39": {
  "name": "type",
  "type": "str",
  "class": "build-in",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "181",
  "column": "16",
  "context": "ttribute of color by a percent\"\"\"\n    r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g,",
  "context_lines": "        hsl[attribute] += percent\n\n    return hsl\n\n\ndef adjust(color, attribute, percent):\n    \"\"\"Adjust an attribute of color by a percent\"\"\"\n    r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n    return unparse_color(r, g, b, a, type)\n\n\ndef rotate(color, percent):\n    \"\"\"Rotate a color by changing its hue value by percent\"\"\"\n",
  "slicing": [
   "    r, g, b, a, type = parse_color(color)\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "40": {
  "name": "r",
  "type": "int",
  "class": "build-in",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "182",
  "column": "4",
  "context": "\"\"\"\n    r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n    return unparse_color(r, g, b, a, type)\n\n\ndef r",
  "context_lines": "    return hsl\n\n\ndef adjust(color, attribute, percent):\n    \"\"\"Adjust an attribute of color by a percent\"\"\"\n    r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n    return unparse_color(r, g, b, a, type)\n\n\ndef rotate(color, percent):\n    \"\"\"Rotate a color by changing its hue value by percent\"\"\"\n    return adjust(color, 0, percent)\n\n\n",
  "slicing": [
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "41": {
  "name": "g",
  "type": "int",
  "class": "build-in",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "182",
  "column": "7",
  "context": "\n    r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n    return unparse_color(r, g, b, a, type)\n\n\ndef r",
  "context_lines": "    return hsl\n\n\ndef adjust(color, attribute, percent):\n    \"\"\"Adjust an attribute of color by a percent\"\"\"\n    r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n    return unparse_color(r, g, b, a, type)\n\n\ndef rotate(color, percent):\n    \"\"\"Rotate a color by changing its hue value by percent\"\"\"\n    return adjust(color, 0, percent)\n\n\n",
  "slicing": [
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "42": {
  "name": "b",
  "type": "int",
  "class": "build-in",
  "approach": "annotation",
  "file_path": "pygal/pygal/colors.py",
  "lineno": "182",
  "column": "10",
  "context": "  r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n    return unparse_color(r, g, b, a, type)\n\n\ndef r",
  "context_lines": "    return hsl\n\n\ndef adjust(color, attribute, percent):\n    \"\"\"Adjust an attribute of color by a percent\"\"\"\n    r, g, b, a, type = parse_color(color)\n    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n    return unparse_color(r, g, b, a, type)\n\n\ndef rotate(color, percent):\n    \"\"\"Rotate a color by changing its hue value by percent\"\"\"\n    return adjust(color, 0, percent)\n\n\n",
  "slicing": [
   "    r, g, b = hsl_to_rgb(*_adjust(rgb_to_hsl(r, g, b), attribute, percent))\n",
   "    return unparse_color(r, g, b, a, type)\n"
  ]
 },
 "43": {
  "name": "plot_background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "32",
  "column": "4",
  "context": " containing colors for the css generation\"\"\"\n\n    plot_background = 'rgba(255, 255, 255, 1)'\n    background = 'rgba(249, 249, 249, 1)'\n    valu",
  "context_lines": "from pygal import colors\nfrom pygal.colors import darken, is_foreground_light, lighten\n\n\nclass Style(object):\n    \"\"\"Styling class containing colors for the css generation\"\"\"\n\n    plot_background = 'rgba(255, 255, 255, 1)'\n    background = 'rgba(249, 249, 249, 1)'\n    value_background = 'rgba(229, 229, 229, 1)'\n    foreground = 'rgba(0, 0, 0, .87)'\n    foreground_strong = 'rgba(0, 0, 0, 1)'\n",
  "slicing": "    plot_background = 'rgba(255, 255, 255, 1)'\n"
 },
 "44": {
  "name": "background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "33",
  "column": "4",
  "context": "   plot_background = 'rgba(255, 255, 255, 1)'\n    background = 'rgba(249, 249, 249, 1)'\n    value_background = 'rgba(229, 229, 229, 1)'\n  ",
  "context_lines": "from pygal.colors import darken, is_foreground_light, lighten\n\n\nclass Style(object):\n    \"\"\"Styling class containing colors for the css generation\"\"\"\n\n    plot_background = 'rgba(255, 255, 255, 1)'\n    background = 'rgba(249, 249, 249, 1)'\n    value_background = 'rgba(229, 229, 229, 1)'\n    foreground = 'rgba(0, 0, 0, .87)'\n    foreground_strong = 'rgba(0, 0, 0, 1)'\n    foreground_subtle = 'rgba(0, 0, 0, .54)'\n\n",
  "slicing": "    background = 'rgba(249, 249, 249, 1)'\n"
 },
 "45": {
  "name": "value_background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "34",
  "column": "4",
  "context": "1)'\n    background = 'rgba(249, 249, 249, 1)'\n    value_background = 'rgba(229, 229, 229, 1)'\n    foreground = 'rgba(0, 0, 0, .87)'\n    foregrou",
  "context_lines": "class Style(object):\n    \"\"\"Styling class containing colors for the css generation\"\"\"\n\n    plot_background = 'rgba(255, 255, 255, 1)'\n    background = 'rgba(249, 249, 249, 1)'\n    value_background = 'rgba(229, 229, 229, 1)'\n    foreground = 'rgba(0, 0, 0, .87)'\n    foreground_strong = 'rgba(0, 0, 0, 1)'\n    foreground_subtle = 'rgba(0, 0, 0, .54)'\n\n    # Monospaced font is highly encouraged\n",
  "slicing": "    value_background = 'rgba(229, 229, 229, 1)'\n"
 },
 "46": {
  "name": "foreground",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "35",
  "column": "4",
  "context": "  value_background = 'rgba(229, 229, 229, 1)'\n    foreground = 'rgba(0, 0, 0, .87)'\n    foreground_strong = 'rgba(0, 0, 0, 1)'\n    for",
  "context_lines": "    \"\"\"Styling class containing colors for the css generation\"\"\"\n\n    plot_background = 'rgba(255, 255, 255, 1)'\n    background = 'rgba(249, 249, 249, 1)'\n    value_background = 'rgba(229, 229, 229, 1)'\n    foreground = 'rgba(0, 0, 0, .87)'\n    foreground_strong = 'rgba(0, 0, 0, 1)'\n    foreground_subtle = 'rgba(0, 0, 0, .54)'\n\n    # Monospaced font is highly encouraged\n    font_family = ('Consolas, \"Liberation Mono\", Menlo, Courier, monospace')\n\n",
  "slicing": "    foreground = 'rgba(0, 0, 0, .87)'\n"
 },
 "47": {
  "name": "foreground_strong",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "36",
  "column": "4",
  "context": "29, 1)'\n    foreground = 'rgba(0, 0, 0, .87)'\n    foreground_strong = 'rgba(0, 0, 0, 1)'\n    foreground_subtle = 'rgba(0, 0, 0, .54)'\n\n    ",
  "context_lines": "    plot_background = 'rgba(255, 255, 255, 1)'\n    background = 'rgba(249, 249, 249, 1)'\n    value_background = 'rgba(229, 229, 229, 1)'\n    foreground = 'rgba(0, 0, 0, .87)'\n    foreground_strong = 'rgba(0, 0, 0, 1)'\n    foreground_subtle = 'rgba(0, 0, 0, .54)'\n\n    # Monospaced font is highly encouraged\n    font_family = ('Consolas, \"Liberation Mono\", Menlo, Courier, monospace')\n\n    label_font_family = None\n",
  "slicing": "    foreground_strong = 'rgba(0, 0, 0, 1)'\n"
 },
 "48": {
  "name": "foreground_subtle",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "37",
  "column": "4",
  "context": ")'\n    foreground_strong = 'rgba(0, 0, 0, 1)'\n    foreground_subtle = 'rgba(0, 0, 0, .54)'\n\n    # Monospaced font is highly encouraged\n    fo",
  "context_lines": "    background = 'rgba(249, 249, 249, 1)'\n    value_background = 'rgba(229, 229, 229, 1)'\n    foreground = 'rgba(0, 0, 0, .87)'\n    foreground_strong = 'rgba(0, 0, 0, 1)'\n    foreground_subtle = 'rgba(0, 0, 0, .54)'\n\n    # Monospaced font is highly encouraged\n    font_family = ('Consolas, \"Liberation Mono\", Menlo, Courier, monospace')\n\n    label_font_family = None\n",
  "slicing": "    foreground_subtle = 'rgba(0, 0, 0, .54)'\n"
 },
 "49": {
  "name": "font_family",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "40",
  "column": "4",
  "context": "'\n\n    # Monospaced font is highly encouraged\n    font_family = ('Consolas, \"Liberation Mono\", Menlo, Courier, monospace')\n\n    label_font_family = None\n    major_label_font",
  "context_lines": "    foreground = 'rgba(0, 0, 0, .87)'\n    foreground_strong = 'rgba(0, 0, 0, 1)'\n    foreground_subtle = 'rgba(0, 0, 0, .54)'\n\n    # Monospaced font is highly encouraged\n    font_family = ('Consolas, \"Liberation Mono\", Menlo, Courier, monospace')\n\n    label_font_family = None\n    major_label_font_family = None\n    value_font_family = None\n",
  "slicing": "    font_family = ('Consolas, \"Liberation Mono\", Menlo, Courier, monospace')\n"
 },
 "50": {
  "name": "label_font_family",
  "type": "NoneType",
  "class": "unknown",
  "approach": "annotation",
  "file_path": "pygal/pygal/style.py",
  "lineno": "42",
  "column": "4",
  "context": "iberation Mono\", Menlo, Courier, monospace')\n\n    label_font_family = None\n    major_label_font_family = None\n    value_font_",
  "context_lines": "    foreground_strong = 'rgba(0, 0, 0, 1)'\n    foreground_subtle = 'rgba(0, 0, 0, .54)'\n\n    # Monospaced font is highly encouraged\n    font_family = ('Consolas, \"Liberation Mono\", Menlo, Courier, monospace')\n\n    label_font_family = None\n    major_label_font_family = None\n    value_font_family = None\n    value_label_font_family = None\n    tooltip_font_family = None\n",
  "slicing": "    label_font_family = None\n"
 },
 "51": {
  "name": "major_label_font_family",
  "type": "NoneType",
  "class": "unknown",
  "approach": "annotation",
  "file_path": "pygal/pygal/style.py",
  "lineno": "43",
  "column": "4",
  "context": "er, monospace')\n\n    label_font_family = None\n    major_label_font_family = None\n    value_font_family = None\n    value_label_font_",
  "context_lines": "    foreground_subtle = 'rgba(0, 0, 0, .54)'\n\n    # Monospaced font is highly encouraged\n    font_family = ('Consolas, \"Liberation Mono\", Menlo, Courier, monospace')\n\n    label_font_family = None\n    major_label_font_family = None\n    value_font_family = None\n    value_label_font_family = None\n    tooltip_font_family = None\n    title_font_family = None\n",
  "slicing": "    major_label_font_family = None\n"
 },
 "52": {
  "name": "value_font_family",
  "type": "NoneType",
  "class": "unknown",
  "approach": "annotation",
  "file_path": "pygal/pygal/style.py",
  "lineno": "44",
  "column": "4",
  "context": "ily = None\n    major_label_font_family = None\n    value_font_family = None\n    value_label_font_family = None\n    tooltip_fon",
  "context_lines": "    # Monospaced font is highly encouraged\n    font_family = ('Consolas, \"Liberation Mono\", Menlo, Courier, monospace')\n\n    label_font_family = None\n    major_label_font_family = None\n    value_font_family = None\n    value_label_font_family = None\n    tooltip_font_family = None\n    title_font_family = None\n    legend_font_family = None\n",
  "slicing": "    value_font_family = None\n"
 },
 "53": {
  "name": "value_label_font_family",
  "type": "NoneType",
  "class": "unknown",
  "approach": "annotation",
  "file_path": "pygal/pygal/style.py",
  "lineno": "45",
  "column": "4",
  "context": "nt_family = None\n    value_font_family = None\n    value_label_font_family = None\n    tooltip_font_family = None\n    title_font_fami",
  "context_lines": "    font_family = ('Consolas, \"Liberation Mono\", Menlo, Courier, monospace')\n\n    label_font_family = None\n    major_label_font_family = None\n    value_font_family = None\n    value_label_font_family = None\n    tooltip_font_family = None\n    title_font_family = None\n    legend_font_family = None\n    no_data_font_family = None\n\n",
  "slicing": "    value_label_font_family = None\n"
 },
 "54": {
  "name": "tooltip_font_family",
  "type": "NoneType",
  "class": "unknown",
  "approach": "annotation",
  "file_path": "pygal/pygal/style.py",
  "lineno": "46",
  "column": "4",
  "context": "ily = None\n    value_label_font_family = None\n    tooltip_font_family = None\n    title_font_family = None\n    legend_font_famil",
  "context_lines": "    label_font_family = None\n    major_label_font_family = None\n    value_font_family = None\n    value_label_font_family = None\n    tooltip_font_family = None\n    title_font_family = None\n    legend_font_family = None\n    no_data_font_family = None\n\n    label_font_size = 10\n",
  "slicing": "    tooltip_font_family = None\n"
 },
 "55": {
  "name": "title_font_family",
  "type": "NoneType",
  "class": "unknown",
  "approach": "annotation",
  "file_path": "pygal/pygal/style.py",
  "lineno": "47",
  "column": "4",
  "context": "_family = None\n    tooltip_font_family = None\n    title_font_family = None\n    legend_font_family = None\n    no_data_font_fam",
  "context_lines": "    major_label_font_family = None\n    value_font_family = None\n    value_label_font_family = None\n    tooltip_font_family = None\n    title_font_family = None\n    legend_font_family = None\n    no_data_font_family = None\n\n    label_font_size = 10\n    major_label_font_size = 10\n",
  "slicing": "    title_font_family = None\n"
 },
 "56": {
  "name": "legend_font_family",
  "type": "NoneType",
  "class": "unknown",
  "approach": "annotation",
  "file_path": "pygal/pygal/style.py",
  "lineno": "48",
  "column": "4",
  "context": "nt_family = None\n    title_font_family = None\n    legend_font_family = None\n    no_data_font_family = None\n\n    label_font_siz",
  "context_lines": "    value_font_family = None\n    value_label_font_family = None\n    tooltip_font_family = None\n    title_font_family = None\n    legend_font_family = None\n    no_data_font_family = None\n\n    label_font_size = 10\n    major_label_font_size = 10\n    value_font_size = 16\n",
  "slicing": "    legend_font_family = None\n"
 },
 "57": {
  "name": "no_data_font_family",
  "type": "NoneType",
  "class": "unknown",
  "approach": "annotation",
  "file_path": "pygal/pygal/style.py",
  "lineno": "49",
  "column": "4",
  "context": "t_family = None\n    legend_font_family = None\n    no_data_font_family = None\n\n    label_font_size = 10\n    major_label_font_siz",
  "context_lines": "    value_label_font_family = None\n    tooltip_font_family = None\n    title_font_family = None\n    legend_font_family = None\n    no_data_font_family = None\n\n    label_font_size = 10\n    major_label_font_size = 10\n    value_font_size = 16\n",
  "slicing": "    no_data_font_family = None\n"
 },
 "58": {
  "name": "label_font_size",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "51",
  "column": "4",
  "context": "family = None\n    no_data_font_family = None\n\n    label_font_size = 10\n    major_label_font_size = 10\n    value_font_size",
  "context_lines": "    tooltip_font_family = None\n    title_font_family = None\n    legend_font_family = None\n    no_data_font_family = None\n\n    label_font_size = 10\n    major_label_font_size = 10\n    value_font_size = 16\n    value_label_font_size = 10\n    tooltip_font_size = 14\n",
  "slicing": "    label_font_size = 10\n"
 },
 "59": {
  "name": "major_label_font_size",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "52",
  "column": "4",
  "context": "_font_family = None\n\n    label_font_size = 10\n    major_label_font_size = 10\n    value_font_size = 16\n    value_label_font_size",
  "context_lines": "    title_font_family = None\n    legend_font_family = None\n    no_data_font_family = None\n\n    label_font_size = 10\n    major_label_font_size = 10\n    value_font_size = 16\n    value_label_font_size = 10\n    tooltip_font_size = 14\n    title_font_size = 16\n",
  "slicing": "    major_label_font_size = 10\n"
 },
 "60": {
  "name": "value_font_size",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "53",
  "column": "4",
  "context": "font_size = 10\n    major_label_font_size = 10\n    value_font_size = 16\n    value_label_font_size = 10\n    tooltip_font_si",
  "context_lines": "    legend_font_family = None\n    no_data_font_family = None\n\n    label_font_size = 10\n    major_label_font_size = 10\n    value_font_size = 16\n    value_label_font_size = 10\n    tooltip_font_size = 14\n    title_font_size = 16\n    legend_font_size = 14\n",
  "slicing": "    value_font_size = 16\n"
 },
 "61": {
  "name": "value_label_font_size",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "54",
  "column": "4",
  "context": "label_font_size = 10\n    value_font_size = 16\n    value_label_font_size = 10\n    tooltip_font_size = 14\n    title_font_size = 1",
  "context_lines": "    no_data_font_family = None\n\n    label_font_size = 10\n    major_label_font_size = 10\n    value_font_size = 16\n    value_label_font_size = 10\n    tooltip_font_size = 14\n    title_font_size = 16\n    legend_font_size = 14\n    no_data_font_size = 64\n\n",
  "slicing": "    value_label_font_size = 10\n"
 },
 "62": {
  "name": "tooltip_font_size",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "55",
  "column": "4",
  "context": "font_size = 16\n    value_label_font_size = 10\n    tooltip_font_size = 14\n    title_font_size = 16\n    legend_font_size = 14",
  "context_lines": "    label_font_size = 10\n    major_label_font_size = 10\n    value_font_size = 16\n    value_label_font_size = 10\n    tooltip_font_size = 14\n    title_font_size = 16\n    legend_font_size = 14\n    no_data_font_size = 64\n\n    # Guide line dash array style\n",
  "slicing": "    tooltip_font_size = 14\n"
 },
 "63": {
  "name": "title_font_size",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "56",
  "column": "4",
  "context": "bel_font_size = 10\n    tooltip_font_size = 14\n    title_font_size = 16\n    legend_font_size = 14\n    no_data_font_size = ",
  "context_lines": "    major_label_font_size = 10\n    value_font_size = 16\n    value_label_font_size = 10\n    tooltip_font_size = 14\n    title_font_size = 16\n    legend_font_size = 14\n    no_data_font_size = 64\n\n    # Guide line dash array style\n    guide_stroke_dasharray = '4,4'\n",
  "slicing": "    title_font_size = 16\n"
 },
 "64": {
  "name": "legend_font_size",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "57",
  "column": "4",
  "context": "oltip_font_size = 14\n    title_font_size = 16\n    legend_font_size = 14\n    no_data_font_size = 64\n\n    # Guide line dash ",
  "context_lines": "    value_font_size = 16\n    value_label_font_size = 10\n    tooltip_font_size = 14\n    title_font_size = 16\n    legend_font_size = 14\n    no_data_font_size = 64\n\n    # Guide line dash array style\n    guide_stroke_dasharray = '4,4'\n    major_guide_stroke_dasharray = '6,6'\n",
  "slicing": "    legend_font_size = 14\n"
 },
 "65": {
  "name": "no_data_font_size",
  "type": "int",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "58",
  "column": "4",
  "context": "itle_font_size = 16\n    legend_font_size = 14\n    no_data_font_size = 64\n\n    # Guide line dash array style\n    guide_strok",
  "context_lines": "    value_label_font_size = 10\n    tooltip_font_size = 14\n    title_font_size = 16\n    legend_font_size = 14\n    no_data_font_size = 64\n\n    # Guide line dash array style\n    guide_stroke_dasharray = '4,4'\n    major_guide_stroke_dasharray = '6,6'\n",
  "slicing": "    no_data_font_size = 64\n"
 },
 "66": {
  "name": "guide_stroke_dasharray",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "61",
  "column": "4",
  "context": "_size = 64\n\n    # Guide line dash array style\n    guide_stroke_dasharray = '4,4'\n    major_guide_stroke_dasharray = '6,6'\n    guide",
  "context_lines": "    title_font_size = 16\n    legend_font_size = 14\n    no_data_font_size = 64\n\n    # Guide line dash array style\n    guide_stroke_dasharray = '4,4'\n    major_guide_stroke_dasharray = '6,6'\n    guide_stroke_color = 'black'\n    major_guide_stroke_color = 'black'\n\n    opacity = '.7'\n",
  "slicing": "    guide_stroke_dasharray = '4,4'\n"
 },
 "67": {
  "name": "major_guide_stroke_dasharray",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "62",
  "column": "4",
  "context": "rray style\n    guide_stroke_dasharray = '4,4'\n    major_guide_stroke_dasharray = '6,6'\n    guide_stroke_color = 'black'\n    major_guide_s",
  "context_lines": "    legend_font_size = 14\n    no_data_font_size = 64\n\n    # Guide line dash array style\n    guide_stroke_dasharray = '4,4'\n    major_guide_stroke_dasharray = '6,6'\n    guide_stroke_color = 'black'\n    major_guide_stroke_color = 'black'\n\n    opacity = '.7'\n    opacity_hover = '.8'\n\n",
  "slicing": "    major_guide_stroke_dasharray = '6,6'\n"
 },
 "68": {
  "name": "guide_stroke_color",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "63",
  "column": "4",
  "context": "4,4'\n    major_guide_stroke_dasharray = '6,6'\n    guide_stroke_color = 'black'\n    major_guide_stroke_color = 'black'\n\n    opacit",
  "context_lines": "    no_data_font_size = 64\n\n    # Guide line dash array style\n    guide_stroke_dasharray = '4,4'\n    major_guide_stroke_dasharray = '6,6'\n    guide_stroke_color = 'black'\n    major_guide_stroke_color = 'black'\n\n    opacity = '.7'\n    opacity_hover = '.8'\n\n    stroke_opacity = '.8'\n",
  "slicing": "    guide_stroke_color = 'black'\n"
 },
 "69": {
  "name": "major_guide_stroke_color",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "64",
  "column": "4",
  "context": "rray = '6,6'\n    guide_stroke_color = 'black'\n    major_guide_stroke_color = 'black'\n\n    opacity = '.7'\n    opacity_hover = '.8'\n\n    ",
  "context_lines": "    # Guide line dash array style\n    guide_stroke_dasharray = '4,4'\n    major_guide_stroke_dasharray = '6,6'\n    guide_stroke_color = 'black'\n    major_guide_stroke_color = 'black'\n\n    opacity = '.7'\n    opacity_hover = '.8'\n\n    stroke_opacity = '.8'\n",
  "slicing": "    major_guide_stroke_color = 'black'\n"
 },
 "70": {
  "name": "opacity",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "66",
  "column": "4",
  "context": "lack'\n    major_guide_stroke_color = 'black'\n\n    opacity = '.7'\n    opacity_hover = '.8'\n\n    stroke_opacity = '.8",
  "context_lines": "    guide_stroke_dasharray = '4,4'\n    major_guide_stroke_dasharray = '6,6'\n    guide_stroke_color = 'black'\n    major_guide_stroke_color = 'black'\n\n    opacity = '.7'\n    opacity_hover = '.8'\n\n    stroke_opacity = '.8'\n    stroke_width = '1'\n    stroke_opacity_hover = '.9'\n",
  "slicing": "    opacity = '.7'\n"
 },
 "71": {
  "name": "opacity_hover",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "67",
  "column": "4",
  "context": "de_stroke_color = 'black'\n\n    opacity = '.7'\n    opacity_hover = '.8'\n\n    stroke_opacity = '.8'\n    stroke_width = '1'\n",
  "context_lines": "    major_guide_stroke_dasharray = '6,6'\n    guide_stroke_color = 'black'\n    major_guide_stroke_color = 'black'\n\n    opacity = '.7'\n    opacity_hover = '.8'\n\n    stroke_opacity = '.8'\n    stroke_width = '1'\n    stroke_opacity_hover = '.9'\n",
  "slicing": "    opacity_hover = '.8'\n"
 },
 "72": {
  "name": "stroke_opacity",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "69",
  "column": "4",
  "context": "\n    opacity = '.7'\n    opacity_hover = '.8'\n\n    stroke_opacity = '.8'\n    stroke_width = '1'\n    stroke_opacity_hover = ",
  "context_lines": "    guide_stroke_color = 'black'\n    major_guide_stroke_color = 'black'\n\n    opacity = '.7'\n    opacity_hover = '.8'\n\n    stroke_opacity = '.8'\n    stroke_width = '1'\n    stroke_opacity_hover = '.9'\n    stroke_width_hover = '4'\n\n    dot_opacity = '1'\n\n",
  "slicing": "    stroke_opacity = '.8'\n"
 },
 "73": {
  "name": "stroke_width",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "70",
  "column": "4",
  "context": "acity_hover = '.8'\n\n    stroke_opacity = '.8'\n    stroke_width = '1'\n    stroke_opacity_hover = '.9'\n    stroke_width_h",
  "context_lines": "    major_guide_stroke_color = 'black'\n\n    opacity = '.7'\n    opacity_hover = '.8'\n\n    stroke_opacity = '.8'\n    stroke_width = '1'\n    stroke_opacity_hover = '.9'\n    stroke_width_hover = '4'\n\n    dot_opacity = '1'\n\n    transition = '150ms'\n",
  "slicing": "    stroke_width = '1'\n"
 },
 "74": {
  "name": "stroke_opacity_hover",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "71",
  "column": "4",
  "context": " stroke_opacity = '.8'\n    stroke_width = '1'\n    stroke_opacity_hover = '.9'\n    stroke_width_hover = '4'\n\n    dot_opacity = '1",
  "context_lines": "    opacity = '.7'\n    opacity_hover = '.8'\n\n    stroke_opacity = '.8'\n    stroke_width = '1'\n    stroke_opacity_hover = '.9'\n    stroke_width_hover = '4'\n\n    dot_opacity = '1'\n\n    transition = '150ms'\n    colors = (\n",
  "slicing": "    stroke_opacity_hover = '.9'\n"
 },
 "75": {
  "name": "stroke_width_hover",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "72",
  "column": "4",
  "context": "e_width = '1'\n    stroke_opacity_hover = '.9'\n    stroke_width_hover = '4'\n\n    dot_opacity = '1'\n\n    transition = '150ms'\n ",
  "context_lines": "    opacity_hover = '.8'\n\n    stroke_opacity = '.8'\n    stroke_width = '1'\n    stroke_opacity_hover = '.9'\n    stroke_width_hover = '4'\n\n    dot_opacity = '1'\n\n    transition = '150ms'\n    colors = (\n",
  "slicing": "    stroke_width_hover = '4'\n"
 },
 "76": {
  "name": "dot_opacity",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "74",
  "column": "4",
  "context": "ty_hover = '.9'\n    stroke_width_hover = '4'\n\n    dot_opacity = '1'\n\n    transition = '150ms'\n    colors = (\n        '",
  "context_lines": "    stroke_opacity = '.8'\n    stroke_width = '1'\n    stroke_opacity_hover = '.9'\n    stroke_width_hover = '4'\n\n    dot_opacity = '1'\n\n    transition = '150ms'\n    colors = (\n        '#F44336',  # 0\n",
  "slicing": "    dot_opacity = '1'\n"
 },
 "77": {
  "name": "transition",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "76",
  "column": "4",
  "context": "oke_width_hover = '4'\n\n    dot_opacity = '1'\n\n    transition = '150ms'\n    colors = (\n        '#F44336',  # 0\n        '#3",
  "context_lines": "    stroke_width = '1'\n    stroke_opacity_hover = '.9'\n    stroke_width_hover = '4'\n\n    dot_opacity = '1'\n\n    transition = '150ms'\n    colors = (\n        '#F44336',  # 0\n        '#3F51B5',  # 4\n        '#009688',  # 8\n",
  "slicing": "    transition = '150ms'\n"
 },
 "78": {
  "name": "background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "198",
  "column": "4",
  "context": "Style):\n    \"\"\"A dark style (old default)\"\"\"\n\n    background = 'black'\n    plot_background = '#111'\n    foreground = '#99",
  "context_lines": "        return config\n\n\nDefaultStyle = Style\n\n\nclass DarkStyle(Style):\n    \"\"\"A dark style (old default)\"\"\"\n\n    background = 'black'\n    plot_background = '#111'\n    foreground = '#999'\n    foreground_strong = '#eee'\n    foreground_subtle = '#555'\n",
  "slicing": "    background = 'black'\n"
 },
 "79": {
  "name": "plot_background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "199",
  "column": "4",
  "context": "le (old default)\"\"\"\n\n    background = 'black'\n    plot_background = '#111'\n    foreground = '#999'\n    foreground_strong = '#",
  "context_lines": "DefaultStyle = Style\n\n\nclass DarkStyle(Style):\n    \"\"\"A dark style (old default)\"\"\"\n\n    background = 'black'\n    plot_background = '#111'\n    foreground = '#999'\n    foreground_strong = '#eee'\n    foreground_subtle = '#555'\n    opacity = '.8'\n",
  "slicing": "    plot_background = '#111'\n"
 },
 "80": {
  "name": "foreground",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "200",
  "column": "4",
  "context": "ground = 'black'\n    plot_background = '#111'\n    foreground = '#999'\n    foreground_strong = '#eee'\n    foreground_subt",
  "context_lines": "class DarkStyle(Style):\n    \"\"\"A dark style (old default)\"\"\"\n\n    background = 'black'\n    plot_background = '#111'\n    foreground = '#999'\n    foreground_strong = '#eee'\n    foreground_subtle = '#555'\n    opacity = '.8'\n    opacity_hover = '.4'\n",
  "slicing": "    foreground = '#999'\n"
 },
 "81": {
  "name": "foreground_strong",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "201",
  "column": "4",
  "context": "t_background = '#111'\n    foreground = '#999'\n    foreground_strong = '#eee'\n    foreground_subtle = '#555'\n    opacity = '.8'\n",
  "context_lines": "    \"\"\"A dark style (old default)\"\"\"\n\n    background = 'black'\n    plot_background = '#111'\n    foreground = '#999'\n    foreground_strong = '#eee'\n    foreground_subtle = '#555'\n    opacity = '.8'\n    opacity_hover = '.4'\n    transition = '250ms'\n",
  "slicing": "    foreground_strong = '#eee'\n"
 },
 "82": {
  "name": "foreground_subtle",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "202",
  "column": "4",
  "context": "round = '#999'\n    foreground_strong = '#eee'\n    foreground_subtle = '#555'\n    opacity = '.8'\n    opacity_hover = '.4'\n    tr",
  "context_lines": "    background = 'black'\n    plot_background = '#111'\n    foreground = '#999'\n    foreground_strong = '#eee'\n    foreground_subtle = '#555'\n    opacity = '.8'\n    opacity_hover = '.4'\n    transition = '250ms'\n    colors = (\n",
  "slicing": "    foreground_subtle = '#555'\n"
 },
 "83": {
  "name": "opacity",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "203",
  "column": "4",
  "context": "trong = '#eee'\n    foreground_subtle = '#555'\n    opacity = '.8'\n    opacity_hover = '.4'\n    transition = '250ms'\n",
  "context_lines": "    plot_background = '#111'\n    foreground = '#999'\n    foreground_strong = '#eee'\n    foreground_subtle = '#555'\n    opacity = '.8'\n    opacity_hover = '.4'\n    transition = '250ms'\n    colors = (\n        '#ff5995', '#b6e354', '#feed6c', '#8cedff', '#9e6ffe', '#899ca1',\n",
  "slicing": "    opacity = '.8'\n"
 },
 "84": {
  "name": "opacity_hover",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "204",
  "column": "4",
  "context": "foreground_subtle = '#555'\n    opacity = '.8'\n    opacity_hover = '.4'\n    transition = '250ms'\n    colors = (\n        '#",
  "context_lines": "    foreground = '#999'\n    foreground_strong = '#eee'\n    foreground_subtle = '#555'\n    opacity = '.8'\n    opacity_hover = '.4'\n    transition = '250ms'\n    colors = (\n        '#ff5995', '#b6e354', '#feed6c', '#8cedff', '#9e6ffe', '#899ca1',\n        '#f8f8f2', '#bf4646', '#516083', '#f92672', '#82b414', '#fd971f',\n",
  "slicing": "    opacity_hover = '.4'\n"
 },
 "85": {
  "name": "transition",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "205",
  "column": "4",
  "context": "'\n    opacity = '.8'\n    opacity_hover = '.4'\n    transition = '250ms'\n    colors = (\n        '#ff5995', '#b6e354', '#fee",
  "context_lines": "    foreground_strong = '#eee'\n    foreground_subtle = '#555'\n    opacity = '.8'\n    opacity_hover = '.4'\n    transition = '250ms'\n    colors = (\n        '#ff5995', '#b6e354', '#feed6c', '#8cedff', '#9e6ffe', '#899ca1',\n        '#f8f8f2', '#bf4646', '#516083', '#f92672', '#82b414', '#fd971f',\n        '#56c2d6', '#808384', '#8c54fe', '#465457'\n",
  "slicing": "    transition = '250ms'\n"
 },
 "86": {
  "name": "background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "216",
  "column": "4",
  "context": "s LightStyle(Style):\n    \"\"\"A light style\"\"\"\n\n    background = 'white'\n    plot_background = 'rgba(0, 0, 255, 0.1)'\n    f",
  "context_lines": "        '#56c2d6', '#808384', '#8c54fe', '#465457'\n    )\n\n\nclass LightStyle(Style):\n    \"\"\"A light style\"\"\"\n\n    background = 'white'\n    plot_background = 'rgba(0, 0, 255, 0.1)'\n    foreground = 'rgba(0, 0, 0, 0.7)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n",
  "slicing": "    background = 'white'\n"
 },
 "87": {
  "name": "plot_background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "217",
  "column": "4",
  "context": "\"\"\"A light style\"\"\"\n\n    background = 'white'\n    plot_background = 'rgba(0, 0, 255, 0.1)'\n    foreground = 'rgba(0, 0, 0, 0.7)'\n    foregrou",
  "context_lines": "    )\n\n\nclass LightStyle(Style):\n    \"\"\"A light style\"\"\"\n\n    background = 'white'\n    plot_background = 'rgba(0, 0, 255, 0.1)'\n    foreground = 'rgba(0, 0, 0, 0.7)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    colors = (\n",
  "slicing": "    plot_background = 'rgba(0, 0, 255, 0.1)'\n"
 },
 "88": {
  "name": "foreground",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "218",
  "column": "4",
  "context": "\n    plot_background = 'rgba(0, 0, 255, 0.1)'\n    foreground = 'rgba(0, 0, 0, 0.7)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    f",
  "context_lines": "class LightStyle(Style):\n    \"\"\"A light style\"\"\"\n\n    background = 'white'\n    plot_background = 'rgba(0, 0, 255, 0.1)'\n    foreground = 'rgba(0, 0, 0, 0.7)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    colors = (\n        '#242424', '#9f6767', '#92ac68', '#d0d293', '#9aacc3', '#bb77a4',\n",
  "slicing": "    foreground = 'rgba(0, 0, 0, 0.7)'\n"
 },
 "89": {
  "name": "foreground_strong",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "219",
  "column": "4",
  "context": ", 0.1)'\n    foreground = 'rgba(0, 0, 0, 0.7)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    c",
  "context_lines": "    \"\"\"A light style\"\"\"\n\n    background = 'white'\n    plot_background = 'rgba(0, 0, 255, 0.1)'\n    foreground = 'rgba(0, 0, 0, 0.7)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    colors = (\n        '#242424', '#9f6767', '#92ac68', '#d0d293', '#9aacc3', '#bb77a4',\n        '#77bbb5', '#777777'\n",
  "slicing": "    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n"
 },
 "90": {
  "name": "foreground_subtle",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "220",
  "column": "4",
  "context": "\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    colors = (\n        '#242424', '#9f6767', '#92a",
  "context_lines": "    background = 'white'\n    plot_background = 'rgba(0, 0, 255, 0.1)'\n    foreground = 'rgba(0, 0, 0, 0.7)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    colors = (\n        '#242424', '#9f6767', '#92ac68', '#d0d293', '#9aacc3', '#bb77a4',\n        '#77bbb5', '#777777'\n    )\n\n\n",
  "slicing": "    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n"
 },
 "91": {
  "name": "opacity",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "230",
  "column": "4",
  "context": "rkStyle but with more opacity and effects\"\"\"\n\n    opacity = '.1'\n    opacity_hover = '.75'\n    transition = '1s eas",
  "context_lines": "        '#77bbb5', '#777777'\n    )\n\n\nclass NeonStyle(DarkStyle):\n    \"\"\"Similar to DarkStyle but with more opacity and effects\"\"\"\n\n    opacity = '.1'\n    opacity_hover = '.75'\n    transition = '1s ease-out'\n\n\nclass CleanStyle(Style):\n    \"\"\"A rather clean style\"\"\"\n\n",
  "slicing": "    opacity = '.1'\n"
 },
 "92": {
  "name": "opacity_hover",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "231",
  "column": "4",
  "context": "re opacity and effects\"\"\"\n\n    opacity = '.1'\n    opacity_hover = '.75'\n    transition = '1s ease-out'\n\n\nclass CleanStyle(",
  "context_lines": "    )\n\n\nclass NeonStyle(DarkStyle):\n    \"\"\"Similar to DarkStyle but with more opacity and effects\"\"\"\n\n    opacity = '.1'\n    opacity_hover = '.75'\n    transition = '1s ease-out'\n\n\nclass CleanStyle(Style):\n    \"\"\"A rather clean style\"\"\"\n\n    background = 'transparent'\n",
  "slicing": "    opacity_hover = '.75'\n"
 },
 "93": {
  "name": "transition",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "232",
  "column": "4",
  "context": "\n    opacity = '.1'\n    opacity_hover = '.75'\n    transition = '1s ease-out'\n\n\nclass CleanStyle(Style):\n    \"\"\"A rather clean s",
  "context_lines": "class NeonStyle(DarkStyle):\n    \"\"\"Similar to DarkStyle but with more opacity and effects\"\"\"\n\n    opacity = '.1'\n    opacity_hover = '.75'\n    transition = '1s ease-out'\n\n\nclass CleanStyle(Style):\n    \"\"\"A rather clean style\"\"\"\n\n    background = 'transparent'\n",
  "slicing": "    transition = '1s ease-out'\n"
 },
 "94": {
  "name": "background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "238",
  "column": "4",
  "context": "Style(Style):\n    \"\"\"A rather clean style\"\"\"\n\n    background = 'transparent'\n    plot_background = 'rgba(240, 240, 240, 0.7)'\n ",
  "context_lines": "    opacity_hover = '.75'\n    transition = '1s ease-out'\n\n\nclass CleanStyle(Style):\n    \"\"\"A rather clean style\"\"\"\n\n    background = 'transparent'\n    plot_background = 'rgba(240, 240, 240, 0.7)'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n",
  "slicing": "    background = 'transparent'\n"
 },
 "95": {
  "name": "plot_background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "239",
  "column": "4",
  "context": "lean style\"\"\"\n\n    background = 'transparent'\n    plot_background = 'rgba(240, 240, 240, 0.7)'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foregrou",
  "context_lines": "    transition = '1s ease-out'\n\n\nclass CleanStyle(Style):\n    \"\"\"A rather clean style\"\"\"\n\n    background = 'transparent'\n    plot_background = 'rgba(240, 240, 240, 0.7)'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    colors = (\n",
  "slicing": "    plot_background = 'rgba(240, 240, 240, 0.7)'\n"
 },
 "96": {
  "name": "foreground",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "240",
  "column": "4",
  "context": " plot_background = 'rgba(240, 240, 240, 0.7)'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    f",
  "context_lines": "class CleanStyle(Style):\n    \"\"\"A rather clean style\"\"\"\n\n    background = 'transparent'\n    plot_background = 'rgba(240, 240, 240, 0.7)'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    colors = (\n        'rgb(12,55,149)', 'rgb(117,38,65)', 'rgb(228,127,0)', 'rgb(159,170,0)',\n",
  "slicing": "    foreground = 'rgba(0, 0, 0, 0.9)'\n"
 },
 "97": {
  "name": "foreground_strong",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "241",
  "column": "4",
  "context": ", 0.7)'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    c",
  "context_lines": "    \"\"\"A rather clean style\"\"\"\n\n    background = 'transparent'\n    plot_background = 'rgba(240, 240, 240, 0.7)'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    colors = (\n        'rgb(12,55,149)', 'rgb(117,38,65)', 'rgb(228,127,0)', 'rgb(159,170,0)',\n        'rgb(149,12,12)'\n",
  "slicing": "    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n"
 },
 "98": {
  "name": "foreground_subtle",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "242",
  "column": "4",
  "context": "\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    colors = (\n        'rgb(12,55,149)', 'rgb(117,",
  "context_lines": "    background = 'transparent'\n    plot_background = 'rgba(240, 240, 240, 0.7)'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    colors = (\n        'rgb(12,55,149)', 'rgb(117,38,65)', 'rgb(228,127,0)', 'rgb(159,170,0)',\n        'rgb(149,12,12)'\n    )\n\n\n",
  "slicing": "    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n"
 },
 "99": {
  "name": "background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "252",
  "column": "4",
  "context": "yle):\n    \"\"\"Dark solarized popular theme\"\"\"\n\n    background = '#073642'\n    plot_background = '#002b36'\n    foreground = '",
  "context_lines": "        'rgb(149,12,12)'\n    )\n\n\nclass DarkSolarizedStyle(Style):\n    \"\"\"Dark solarized popular theme\"\"\"\n\n    background = '#073642'\n    plot_background = '#002b36'\n    foreground = '#839496'\n    foreground_strong = '#fdf6e3'\n    foreground_subtle = '#657b83'\n",
  "slicing": "    background = '#073642'\n"
 },
 "100": {
  "name": "plot_background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "253",
  "column": "4",
  "context": " popular theme\"\"\"\n\n    background = '#073642'\n    plot_background = '#002b36'\n    foreground = '#839496'\n    foreground_strong =",
  "context_lines": "    )\n\n\nclass DarkSolarizedStyle(Style):\n    \"\"\"Dark solarized popular theme\"\"\"\n\n    background = '#073642'\n    plot_background = '#002b36'\n    foreground = '#839496'\n    foreground_strong = '#fdf6e3'\n    foreground_subtle = '#657b83'\n    opacity = '.66'\n",
  "slicing": "    plot_background = '#002b36'\n"
 },
 "101": {
  "name": "foreground",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "254",
  "column": "4",
  "context": "d = '#073642'\n    plot_background = '#002b36'\n    foreground = '#839496'\n    foreground_strong = '#fdf6e3'\n    foreground_s",
  "context_lines": "class DarkSolarizedStyle(Style):\n    \"\"\"Dark solarized popular theme\"\"\"\n\n    background = '#073642'\n    plot_background = '#002b36'\n    foreground = '#839496'\n    foreground_strong = '#fdf6e3'\n    foreground_subtle = '#657b83'\n    opacity = '.66'\n    opacity_hover = '.9'\n",
  "slicing": "    foreground = '#839496'\n"
 },
 "102": {
  "name": "foreground_strong",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "255",
  "column": "4",
  "context": "ground = '#002b36'\n    foreground = '#839496'\n    foreground_strong = '#fdf6e3'\n    foreground_subtle = '#657b83'\n    opacity = '.",
  "context_lines": "    \"\"\"Dark solarized popular theme\"\"\"\n\n    background = '#073642'\n    plot_background = '#002b36'\n    foreground = '#839496'\n    foreground_strong = '#fdf6e3'\n    foreground_subtle = '#657b83'\n    opacity = '.66'\n    opacity_hover = '.9'\n    transition = '500ms ease-in'\n",
  "slicing": "    foreground_strong = '#fdf6e3'\n"
 },
 "103": {
  "name": "foreground_subtle",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "256",
  "column": "4",
  "context": "= '#839496'\n    foreground_strong = '#fdf6e3'\n    foreground_subtle = '#657b83'\n    opacity = '.66'\n    opacity_hover = '.9'\n    t",
  "context_lines": "    background = '#073642'\n    plot_background = '#002b36'\n    foreground = '#839496'\n    foreground_strong = '#fdf6e3'\n    foreground_subtle = '#657b83'\n    opacity = '.66'\n    opacity_hover = '.9'\n    transition = '500ms ease-in'\n    colors = (\n",
  "slicing": "    foreground_subtle = '#657b83'\n"
 },
 "104": {
  "name": "opacity",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "257",
  "column": "4",
  "context": "= '#fdf6e3'\n    foreground_subtle = '#657b83'\n    opacity = '.66'\n    opacity_hover = '.9'\n    transition = '500ms e",
  "context_lines": "    plot_background = '#002b36'\n    foreground = '#839496'\n    foreground_strong = '#fdf6e3'\n    foreground_subtle = '#657b83'\n    opacity = '.66'\n    opacity_hover = '.9'\n    transition = '500ms ease-in'\n    colors = (\n        '#b58900', '#cb4b16', '#dc322f', '#d33682', '#6c71c4', '#268bd2',\n",
  "slicing": "    opacity = '.66'\n"
 },
 "105": {
  "name": "opacity_hover",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "258",
  "column": "4",
  "context": "ground_subtle = '#657b83'\n    opacity = '.66'\n    opacity_hover = '.9'\n    transition = '500ms ease-in'\n    colors = (\n  ",
  "context_lines": "    foreground = '#839496'\n    foreground_strong = '#fdf6e3'\n    foreground_subtle = '#657b83'\n    opacity = '.66'\n    opacity_hover = '.9'\n    transition = '500ms ease-in'\n    colors = (\n        '#b58900', '#cb4b16', '#dc322f', '#d33682', '#6c71c4', '#268bd2',\n        '#2aa198', '#859900'\n",
  "slicing": "    opacity_hover = '.9'\n"
 },
 "106": {
  "name": "transition",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "259",
  "column": "4",
  "context": "\n    opacity = '.66'\n    opacity_hover = '.9'\n    transition = '500ms ease-in'\n    colors = (\n        '#b58900', '#cb4b16', '#dc3",
  "context_lines": "    foreground_strong = '#fdf6e3'\n    foreground_subtle = '#657b83'\n    opacity = '.66'\n    opacity_hover = '.9'\n    transition = '500ms ease-in'\n    colors = (\n        '#b58900', '#cb4b16', '#dc322f', '#d33682', '#6c71c4', '#268bd2',\n        '#2aa198', '#859900'\n    )\n\n\n",
  "slicing": "    transition = '500ms ease-in'\n"
 },
 "107": {
  "name": "background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "269",
  "column": "4",
  "context": "le):\n    \"\"\"Light solarized popular theme\"\"\"\n\n    background = '#fdf6e3'\n    plot_background = '#eee8d5'\n    foreground = '",
  "context_lines": "        '#2aa198', '#859900'\n    )\n\n\nclass LightSolarizedStyle(DarkSolarizedStyle):\n    \"\"\"Light solarized popular theme\"\"\"\n\n    background = '#fdf6e3'\n    plot_background = '#eee8d5'\n    foreground = '#657b83'\n    foreground_strong = '#073642'\n    foreground_subtle = '#073642'\n\n\n",
  "slicing": "    background = '#fdf6e3'\n"
 },
 "108": {
  "name": "plot_background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "270",
  "column": "4",
  "context": " popular theme\"\"\"\n\n    background = '#fdf6e3'\n    plot_background = '#eee8d5'\n    foreground = '#657b83'\n    foreground_strong =",
  "context_lines": "    )\n\n\nclass LightSolarizedStyle(DarkSolarizedStyle):\n    \"\"\"Light solarized popular theme\"\"\"\n\n    background = '#fdf6e3'\n    plot_background = '#eee8d5'\n    foreground = '#657b83'\n    foreground_strong = '#073642'\n    foreground_subtle = '#073642'\n\n\nclass RedBlueStyle(Style):\n",
  "slicing": "    plot_background = '#eee8d5'\n"
 },
 "109": {
  "name": "foreground",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "271",
  "column": "4",
  "context": "d = '#fdf6e3'\n    plot_background = '#eee8d5'\n    foreground = '#657b83'\n    foreground_strong = '#073642'\n    foreground_s",
  "context_lines": "class LightSolarizedStyle(DarkSolarizedStyle):\n    \"\"\"Light solarized popular theme\"\"\"\n\n    background = '#fdf6e3'\n    plot_background = '#eee8d5'\n    foreground = '#657b83'\n    foreground_strong = '#073642'\n    foreground_subtle = '#073642'\n\n\nclass RedBlueStyle(Style):\n    \"\"\"A red and blue theme\"\"\"\n\n",
  "slicing": "    foreground = '#657b83'\n"
 },
 "110": {
  "name": "foreground_strong",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "272",
  "column": "4",
  "context": "ground = '#eee8d5'\n    foreground = '#657b83'\n    foreground_strong = '#073642'\n    foreground_subtle = '#073642'\n\n\nclass RedBlueS",
  "context_lines": "    \"\"\"Light solarized popular theme\"\"\"\n\n    background = '#fdf6e3'\n    plot_background = '#eee8d5'\n    foreground = '#657b83'\n    foreground_strong = '#073642'\n    foreground_subtle = '#073642'\n\n\nclass RedBlueStyle(Style):\n    \"\"\"A red and blue theme\"\"\"\n\n    background = lighten('#e6e7e9', 7)\n",
  "slicing": "    foreground_strong = '#073642'\n"
 },
 "111": {
  "name": "foreground_subtle",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "273",
  "column": "4",
  "context": "= '#657b83'\n    foreground_strong = '#073642'\n    foreground_subtle = '#073642'\n\n\nclass RedBlueStyle(Style):\n    \"\"\"A red and blue",
  "context_lines": "    background = '#fdf6e3'\n    plot_background = '#eee8d5'\n    foreground = '#657b83'\n    foreground_strong = '#073642'\n    foreground_subtle = '#073642'\n\n\nclass RedBlueStyle(Style):\n    \"\"\"A red and blue theme\"\"\"\n\n    background = lighten('#e6e7e9', 7)\n",
  "slicing": "    foreground_subtle = '#073642'\n"
 },
 "112": {
  "name": "foreground",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "281",
  "column": "4",
  "context": "\n    plot_background = lighten('#e6e7e9', 10)\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    f",
  "context_lines": "class RedBlueStyle(Style):\n    \"\"\"A red and blue theme\"\"\"\n\n    background = lighten('#e6e7e9', 7)\n    plot_background = lighten('#e6e7e9', 10)\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    opacity = '.6'\n    opacity_hover = '.9'\n",
  "slicing": "    foreground = 'rgba(0, 0, 0, 0.9)'\n"
 },
 "113": {
  "name": "foreground_strong",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "282",
  "column": "4",
  "context": "9', 10)\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    o",
  "context_lines": "    \"\"\"A red and blue theme\"\"\"\n\n    background = lighten('#e6e7e9', 7)\n    plot_background = lighten('#e6e7e9', 10)\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    opacity = '.6'\n    opacity_hover = '.9'\n    colors = (\n",
  "slicing": "    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n"
 },
 "114": {
  "name": "foreground_subtle",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "283",
  "column": "4",
  "context": "\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    opacity = '.6'\n    opacity_hover = '.9'\n    co",
  "context_lines": "    background = lighten('#e6e7e9', 7)\n    plot_background = lighten('#e6e7e9', 10)\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    opacity = '.6'\n    opacity_hover = '.9'\n    colors = (\n        '#d94e4c', '#e5884f', '#39929a', lighten('#d94e4c', 10),\n",
  "slicing": "    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n"
 },
 "115": {
  "name": "opacity",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "284",
  "column": "4",
  "context": "\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    opacity = '.6'\n    opacity_hover = '.9'\n    colors = (\n        '#",
  "context_lines": "    plot_background = lighten('#e6e7e9', 10)\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    opacity = '.6'\n    opacity_hover = '.9'\n    colors = (\n        '#d94e4c', '#e5884f', '#39929a', lighten('#d94e4c', 10),\n        darken('#39929a', 15), lighten('#e5884f', 17), darken('#d94e4c', 10),\n",
  "slicing": "    opacity = '.6'\n"
 },
 "116": {
  "name": "opacity_hover",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "285",
  "column": "4",
  "context": "tle = 'rgba(0, 0, 0, 0.5)'\n    opacity = '.6'\n    opacity_hover = '.9'\n    colors = (\n        '#d94e4c', '#e5884f', '#399",
  "context_lines": "    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.5)'\n    opacity = '.6'\n    opacity_hover = '.9'\n    colors = (\n        '#d94e4c', '#e5884f', '#39929a', lighten('#d94e4c', 10),\n        darken('#39929a', 15), lighten('#e5884f', 17), darken('#d94e4c', 10),\n        '#234547'\n",
  "slicing": "    opacity_hover = '.9'\n"
 },
 "117": {
  "name": "background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "296",
  "column": "4",
  "context": "le(Style):\n    \"\"\"A light colorized style\"\"\"\n\n    background = '#f8f8f8'\n    plot_background = lighten('#f8f8f8', 3)\n    fo",
  "context_lines": "        '#234547'\n    )\n\n\nclass LightColorizedStyle(Style):\n    \"\"\"A light colorized style\"\"\"\n\n    background = '#f8f8f8'\n    plot_background = lighten('#f8f8f8', 3)\n    foreground = '#333'\n    foreground_strong = '#666'\n    foreground_subtle = 'rgba(0, 0 , 0, 0.5)'\n",
  "slicing": "    background = '#f8f8f8'\n"
 },
 "118": {
  "name": "foreground",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "298",
  "column": "4",
  "context": "'\n    plot_background = lighten('#f8f8f8', 3)\n    foreground = '#333'\n    foreground_strong = '#666'\n    foreground_subt",
  "context_lines": "class LightColorizedStyle(Style):\n    \"\"\"A light colorized style\"\"\"\n\n    background = '#f8f8f8'\n    plot_background = lighten('#f8f8f8', 3)\n    foreground = '#333'\n    foreground_strong = '#666'\n    foreground_subtle = 'rgba(0, 0 , 0, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n",
  "slicing": "    foreground = '#333'\n"
 },
 "119": {
  "name": "foreground_strong",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "299",
  "column": "4",
  "context": "lighten('#f8f8f8', 3)\n    foreground = '#333'\n    foreground_strong = '#666'\n    foreground_subtle = 'rgba(0, 0 , 0, 0.5)'\n    ",
  "context_lines": "    \"\"\"A light colorized style\"\"\"\n\n    background = '#f8f8f8'\n    plot_background = lighten('#f8f8f8', 3)\n    foreground = '#333'\n    foreground_strong = '#666'\n    foreground_subtle = 'rgba(0, 0 , 0, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n",
  "slicing": "    foreground_strong = '#666'\n"
 },
 "120": {
  "name": "foreground_subtle",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "300",
  "column": "4",
  "context": "round = '#333'\n    foreground_strong = '#666'\n    foreground_subtle = 'rgba(0, 0 , 0, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    tr",
  "context_lines": "    background = '#f8f8f8'\n    plot_background = lighten('#f8f8f8', 3)\n    foreground = '#333'\n    foreground_strong = '#666'\n    foreground_subtle = 'rgba(0, 0 , 0, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n",
  "slicing": "    foreground_subtle = 'rgba(0, 0 , 0, 0.5)'\n"
 },
 "121": {
  "name": "opacity",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "301",
  "column": "4",
  "context": "    foreground_subtle = 'rgba(0, 0 , 0, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms e",
  "context_lines": "    plot_background = lighten('#f8f8f8', 3)\n    foreground = '#333'\n    foreground_strong = '#666'\n    foreground_subtle = 'rgba(0, 0 , 0, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#fe9592', '#534f4c', '#3ac2c0', '#a2a7a1', darken('#fe9592', 15),\n",
  "slicing": "    opacity = '.5'\n"
 },
 "122": {
  "name": "opacity_hover",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "302",
  "column": "4",
  "context": "le = 'rgba(0, 0 , 0, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n  ",
  "context_lines": "    foreground = '#333'\n    foreground_strong = '#666'\n    foreground_subtle = 'rgba(0, 0 , 0, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#fe9592', '#534f4c', '#3ac2c0', '#a2a7a1', darken('#fe9592', 15),\n        lighten('#534f4c', 15), lighten('#3ac2c0', 15), lighten('#a2a7a1', 15),\n",
  "slicing": "    opacity_hover = '.9'\n"
 },
 "123": {
  "name": "transition",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "303",
  "column": "4",
  "context": "'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#fe9592', '#534f4c', '#3ac",
  "context_lines": "    foreground_strong = '#666'\n    foreground_subtle = 'rgba(0, 0 , 0, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#fe9592', '#534f4c', '#3ac2c0', '#a2a7a1', darken('#fe9592', 15),\n        lighten('#534f4c', 15), lighten('#3ac2c0', 15), lighten('#a2a7a1', 15),\n        lighten('#fe9592', 15), darken('#3ac2c0', 10)\n",
  "slicing": "    transition = '250ms ease-in'\n"
 },
 "124": {
  "name": "foreground",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "316",
  "column": "4",
  "context": ")\n    plot_background = lighten('#3a2d3f', 2)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'",
  "context_lines": "class DarkColorizedStyle(Style):\n    \"\"\"A dark colorized style\"\"\"\n\n    background = darken('#3a2d3f', 5)\n    plot_background = lighten('#3a2d3f', 2)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.2'\n    opacity_hover = '.7'\n",
  "slicing": "    foreground = 'rgba(255, 255, 255, 0.9)'\n"
 },
 "125": {
  "name": "foreground_strong",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "317",
  "column": "4",
  "context": ")\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)",
  "context_lines": "    \"\"\"A dark colorized style\"\"\"\n\n    background = darken('#3a2d3f', 5)\n    plot_background = lighten('#3a2d3f', 2)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.2'\n    opacity_hover = '.7'\n    transition = '250ms ease-in'\n",
  "slicing": "    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n"
 },
 "126": {
  "name": "foreground_subtle",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "318",
  "column": "4",
  "context": "oreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.2'\n    opacity_hover = '.7'\n    tr",
  "context_lines": "    background = darken('#3a2d3f', 5)\n    plot_background = lighten('#3a2d3f', 2)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.2'\n    opacity_hover = '.7'\n    transition = '250ms ease-in'\n    colors = (\n",
  "slicing": "    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n"
 },
 "127": {
  "name": "opacity",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "319",
  "column": "4",
  "context": "reground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.2'\n    opacity_hover = '.7'\n    transition = '250ms e",
  "context_lines": "    plot_background = lighten('#3a2d3f', 2)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.2'\n    opacity_hover = '.7'\n    transition = '250ms ease-in'\n    colors = (\n        '#c900fe', '#01b8fe', '#59f500', '#ff00e4', '#f9fa00',\n",
  "slicing": "    opacity = '.2'\n"
 },
 "128": {
  "name": "opacity_hover",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "320",
  "column": "4",
  "context": "rgba(255, 255 , 255, 0.5)'\n    opacity = '.2'\n    opacity_hover = '.7'\n    transition = '250ms ease-in'\n    colors = (\n  ",
  "context_lines": "    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.2'\n    opacity_hover = '.7'\n    transition = '250ms ease-in'\n    colors = (\n        '#c900fe', '#01b8fe', '#59f500', '#ff00e4', '#f9fa00',\n        darken('#c900fe', 20), darken('#01b8fe', 15), darken('#59f500', 20),\n",
  "slicing": "    opacity_hover = '.7'\n"
 },
 "129": {
  "name": "transition",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "321",
  "column": "4",
  "context": "'\n    opacity = '.2'\n    opacity_hover = '.7'\n    transition = '250ms ease-in'\n    colors = (\n        '#c900fe', '#01b8fe', '#59f",
  "context_lines": "    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.2'\n    opacity_hover = '.7'\n    transition = '250ms ease-in'\n    colors = (\n        '#c900fe', '#01b8fe', '#59f500', '#ff00e4', '#f9fa00',\n        darken('#c900fe', 20), darken('#01b8fe', 15), darken('#59f500', 20),\n        darken('#ff00e4', 15), lighten('#f9fa00', 20)\n",
  "slicing": "    transition = '250ms ease-in'\n"
 },
 "130": {
  "name": "foreground",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "334",
  "column": "4",
  "context": ")\n    plot_background = darken('#1b8088', 17)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'",
  "context_lines": "class TurquoiseStyle(Style):\n    \"\"\"A turquoise style\"\"\"\n\n    background = darken('#1b8088', 15)\n    plot_background = darken('#1b8088', 17)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n",
  "slicing": "    foreground = 'rgba(255, 255, 255, 0.9)'\n"
 },
 "131": {
  "name": "foreground_strong",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "335",
  "column": "4",
  "context": ")\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)",
  "context_lines": "    \"\"\"A turquoise style\"\"\"\n\n    background = darken('#1b8088', 15)\n    plot_background = darken('#1b8088', 17)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n",
  "slicing": "    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n"
 },
 "132": {
  "name": "foreground_subtle",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "336",
  "column": "4",
  "context": "oreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    tr",
  "context_lines": "    background = darken('#1b8088', 15)\n    plot_background = darken('#1b8088', 17)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n",
  "slicing": "    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n"
 },
 "133": {
  "name": "opacity",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "337",
  "column": "4",
  "context": "reground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms e",
  "context_lines": "    plot_background = darken('#1b8088', 17)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#93d2d9', '#ef940f', '#8C6243', '#fff', darken('#93d2d9', 20),\n",
  "slicing": "    opacity = '.5'\n"
 },
 "134": {
  "name": "opacity_hover",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "338",
  "column": "4",
  "context": "rgba(255, 255 , 255, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n  ",
  "context_lines": "    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#93d2d9', '#ef940f', '#8C6243', '#fff', darken('#93d2d9', 20),\n        lighten('#ef940f', 15), lighten('#8c6243', 15), '#1b8088'\n",
  "slicing": "    opacity_hover = '.9'\n"
 },
 "135": {
  "name": "transition",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "339",
  "column": "4",
  "context": "'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#93d2d9', '#ef940f', '#8C6",
  "context_lines": "    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255 , 255, 0.5)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#93d2d9', '#ef940f', '#8C6243', '#fff', darken('#93d2d9', 20),\n        lighten('#ef940f', 15), lighten('#8c6243', 15), '#1b8088'\n    )\n\n\n",
  "slicing": "    transition = '250ms ease-in'\n"
 },
 "136": {
  "name": "plot_background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "350",
  "column": "4",
  "context": "le\"\"\"\n\n    background = lighten('#f3f3f3', 3)\n    plot_background = '#fff'\n    foreground = '#333333'\n    foreground_strong =",
  "context_lines": "    )\n\n\nclass LightGreenStyle(Style):\n    \"\"\"A light green style\"\"\"\n\n    background = lighten('#f3f3f3', 3)\n    plot_background = '#fff'\n    foreground = '#333333'\n    foreground_strong = '#666'\n    foreground_subtle = '#222222'\n    opacity = '.5'\n",
  "slicing": "    plot_background = '#fff'\n"
 },
 "137": {
  "name": "foreground",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "351",
  "column": "4",
  "context": "en('#f3f3f3', 3)\n    plot_background = '#fff'\n    foreground = '#333333'\n    foreground_strong = '#666'\n    foreground_subt",
  "context_lines": "class LightGreenStyle(Style):\n    \"\"\"A light green style\"\"\"\n\n    background = lighten('#f3f3f3', 3)\n    plot_background = '#fff'\n    foreground = '#333333'\n    foreground_strong = '#666'\n    foreground_subtle = '#222222'\n    opacity = '.5'\n    opacity_hover = '.9'\n",
  "slicing": "    foreground = '#333333'\n"
 },
 "138": {
  "name": "foreground_strong",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "352",
  "column": "4",
  "context": "ackground = '#fff'\n    foreground = '#333333'\n    foreground_strong = '#666'\n    foreground_subtle = '#222222'\n    opacity = '.",
  "context_lines": "    \"\"\"A light green style\"\"\"\n\n    background = lighten('#f3f3f3', 3)\n    plot_background = '#fff'\n    foreground = '#333333'\n    foreground_strong = '#666'\n    foreground_subtle = '#222222'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n",
  "slicing": "    foreground_strong = '#666'\n"
 },
 "139": {
  "name": "foreground_subtle",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "353",
  "column": "4",
  "context": "nd = '#333333'\n    foreground_strong = '#666'\n    foreground_subtle = '#222222'\n    opacity = '.5'\n    opacity_hover = '.9'\n    tr",
  "context_lines": "    background = lighten('#f3f3f3', 3)\n    plot_background = '#fff'\n    foreground = '#333333'\n    foreground_strong = '#666'\n    foreground_subtle = '#222222'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n",
  "slicing": "    foreground_subtle = '#222222'\n"
 },
 "140": {
  "name": "opacity",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "354",
  "column": "4",
  "context": "ng = '#666'\n    foreground_subtle = '#222222'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms e",
  "context_lines": "    plot_background = '#fff'\n    foreground = '#333333'\n    foreground_strong = '#666'\n    foreground_subtle = '#222222'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#7dcf30', '#247fab', lighten('#7dcf30', 10), '#ccc',\n",
  "slicing": "    opacity = '.5'\n"
 },
 "141": {
  "name": "opacity_hover",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "355",
  "column": "4",
  "context": "eground_subtle = '#222222'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n  ",
  "context_lines": "    foreground = '#333333'\n    foreground_strong = '#666'\n    foreground_subtle = '#222222'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#7dcf30', '#247fab', lighten('#7dcf30', 10), '#ccc',\n        darken('#7dcf30', 15), '#ddd', lighten('#247fab', 10),\n",
  "slicing": "    opacity_hover = '.9'\n"
 },
 "142": {
  "name": "transition",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "356",
  "column": "4",
  "context": "'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#7dcf30', '#247fab', light",
  "context_lines": "    foreground_strong = '#666'\n    foreground_subtle = '#222222'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#7dcf30', '#247fab', lighten('#7dcf30', 10), '#ccc',\n        darken('#7dcf30', 15), '#ddd', lighten('#247fab', 10),\n        darken('#247fab', 15)\n",
  "slicing": "    transition = '250ms ease-in'\n"
 },
 "143": {
  "name": "foreground",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "369",
  "column": "4",
  "context": "3)\n    plot_background = darken('#251e01', 1)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'",
  "context_lines": "class DarkGreenStyle(Style):\n    \"\"\"A dark green style\"\"\"\n\n    background = darken('#251e01', 3)\n    plot_background = darken('#251e01', 1)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.6'\n    opacity_hover = '.9'\n",
  "slicing": "    foreground = 'rgba(255, 255, 255, 0.9)'\n"
 },
 "144": {
  "name": "foreground_strong",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "370",
  "column": "4",
  "context": ")\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'",
  "context_lines": "    \"\"\"A dark green style\"\"\"\n\n    background = darken('#251e01', 3)\n    plot_background = darken('#251e01', 1)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.6'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n",
  "slicing": "    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n"
 },
 "145": {
  "name": "foreground_subtle",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "371",
  "column": "4",
  "context": "oreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.6'\n    opacity_hover = '.9'\n    tr",
  "context_lines": "    background = darken('#251e01', 3)\n    plot_background = darken('#251e01', 1)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.6'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n",
  "slicing": "    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n"
 },
 "146": {
  "name": "opacity",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "372",
  "column": "4",
  "context": "oreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.6'\n    opacity_hover = '.9'\n    transition = '250ms e",
  "context_lines": "    plot_background = darken('#251e01', 1)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.6'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#adde09', '#6e8c06', '#4a5e04', '#fcd202', '#C1E34D',\n",
  "slicing": "    opacity = '.6'\n"
 },
 "147": {
  "name": "opacity_hover",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "373",
  "column": "4",
  "context": "'rgba(255, 255, 255, 0.6)'\n    opacity = '.6'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n  ",
  "context_lines": "    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.6'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#adde09', '#6e8c06', '#4a5e04', '#fcd202', '#C1E34D',\n        lighten('#fcd202', 25)\n",
  "slicing": "    opacity_hover = '.9'\n"
 },
 "148": {
  "name": "transition",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "374",
  "column": "4",
  "context": "'\n    opacity = '.6'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#adde09', '#6e8c06', '#4a5",
  "context_lines": "    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.6'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#adde09', '#6e8c06', '#4a5e04', '#fcd202', '#C1E34D',\n        lighten('#fcd202', 25)\n    )\n\n\n",
  "slicing": "    transition = '250ms ease-in'\n"
 },
 "149": {
  "name": "background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "384",
  "column": "4",
  "context": "tyle):\n    \"\"\"A dark green and blue style\"\"\"\n\n    background = '#000'\n    plot_background = lighten('#000', 8)\n    foreg",
  "context_lines": "        lighten('#fcd202', 25)\n    )\n\n\nclass DarkGreenBlueStyle(Style):\n    \"\"\"A dark green and blue style\"\"\"\n\n    background = '#000'\n    plot_background = lighten('#000', 8)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n",
  "slicing": "    background = '#000'\n"
 },
 "150": {
  "name": "foreground",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "386",
  "column": "4",
  "context": "000'\n    plot_background = lighten('#000', 8)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'",
  "context_lines": "class DarkGreenBlueStyle(Style):\n    \"\"\"A dark green and blue style\"\"\"\n\n    background = '#000'\n    plot_background = lighten('#000', 8)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.55'\n    opacity_hover = '.9'\n",
  "slicing": "    foreground = 'rgba(255, 255, 255, 0.9)'\n"
 },
 "151": {
  "name": "foreground_strong",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "387",
  "column": "4",
  "context": ")\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'",
  "context_lines": "    \"\"\"A dark green and blue style\"\"\"\n\n    background = '#000'\n    plot_background = lighten('#000', 8)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.55'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n",
  "slicing": "    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n"
 },
 "152": {
  "name": "foreground_subtle",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "388",
  "column": "4",
  "context": "oreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.55'\n    opacity_hover = '.9'\n    t",
  "context_lines": "    background = '#000'\n    plot_background = lighten('#000', 8)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.55'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n",
  "slicing": "    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n"
 },
 "153": {
  "name": "opacity",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "389",
  "column": "4",
  "context": "oreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.55'\n    opacity_hover = '.9'\n    transition = '250ms e",
  "context_lines": "    plot_background = lighten('#000', 8)\n    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.55'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        lighten('#34B8F7', 15), '#7dcf30', '#247fab', darken('#7dcf30', 10),\n",
  "slicing": "    opacity = '.55'\n"
 },
 "154": {
  "name": "opacity_hover",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "390",
  "column": "4",
  "context": "rgba(255, 255, 255, 0.6)'\n    opacity = '.55'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n  ",
  "context_lines": "    foreground = 'rgba(255, 255, 255, 0.9)'\n    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.55'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        lighten('#34B8F7', 15), '#7dcf30', '#247fab', darken('#7dcf30', 10),\n        lighten('#247fab', 10), lighten('#7dcf30', 10), darken('#247fab', 10),\n",
  "slicing": "    opacity_hover = '.9'\n"
 },
 "155": {
  "name": "transition",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "391",
  "column": "4",
  "context": "\n    opacity = '.55'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        lighten('#34B8F7', 15), '#7",
  "context_lines": "    foreground_strong = 'rgba(255, 255, 255, 0.9)'\n    foreground_subtle = 'rgba(255, 255, 255, 0.6)'\n    opacity = '.55'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        lighten('#34B8F7', 15), '#7dcf30', '#247fab', darken('#7dcf30', 10),\n        lighten('#247fab', 10), lighten('#7dcf30', 10), darken('#247fab', 10),\n        '#fff'\n",
  "slicing": "    transition = '250ms ease-in'\n"
 },
 "156": {
  "name": "plot_background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "403",
  "column": "4",
  "context": "yle\"\"\"\n\n    background = darken('#f8f8f8', 3)\n    plot_background = '#f8f8f8'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foregrou",
  "context_lines": "    )\n\n\nclass BlueStyle(Style):\n    \"\"\"A blue style\"\"\"\n\n    background = darken('#f8f8f8', 3)\n    plot_background = '#f8f8f8'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.6)'\n    opacity = '.5'\n",
  "slicing": "    plot_background = '#f8f8f8'\n"
 },
 "157": {
  "name": "foreground",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "404",
  "column": "4",
  "context": "'#f8f8f8', 3)\n    plot_background = '#f8f8f8'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    f",
  "context_lines": "class BlueStyle(Style):\n    \"\"\"A blue style\"\"\"\n\n    background = darken('#f8f8f8', 3)\n    plot_background = '#f8f8f8'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.6)'\n    opacity = '.5'\n    opacity_hover = '.9'\n",
  "slicing": "    foreground = 'rgba(0, 0, 0, 0.9)'\n"
 },
 "158": {
  "name": "foreground_strong",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "405",
  "column": "4",
  "context": "f8f8f8'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.6)'\n    o",
  "context_lines": "    \"\"\"A blue style\"\"\"\n\n    background = darken('#f8f8f8', 3)\n    plot_background = '#f8f8f8'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.6)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n",
  "slicing": "    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n"
 },
 "159": {
  "name": "foreground_subtle",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "406",
  "column": "4",
  "context": "\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.6)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    tr",
  "context_lines": "    background = darken('#f8f8f8', 3)\n    plot_background = '#f8f8f8'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.6)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n",
  "slicing": "    foreground_subtle = 'rgba(0, 0, 0, 0.6)'\n"
 },
 "160": {
  "name": "opacity",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "407",
  "column": "4",
  "context": "\n    foreground_subtle = 'rgba(0, 0, 0, 0.6)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms e",
  "context_lines": "    plot_background = '#f8f8f8'\n    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.6)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#00b2f0', '#43d9be', '#0662ab', darken('#00b2f0', 20),\n",
  "slicing": "    opacity = '.5'\n"
 },
 "161": {
  "name": "opacity_hover",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "408",
  "column": "4",
  "context": "tle = 'rgba(0, 0, 0, 0.6)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n  ",
  "context_lines": "    foreground = 'rgba(0, 0, 0, 0.9)'\n    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.6)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#00b2f0', '#43d9be', '#0662ab', darken('#00b2f0', 20),\n        lighten('#43d9be', 20), lighten('#7dcf30', 10), darken('#0662ab', 15),\n",
  "slicing": "    opacity_hover = '.9'\n"
 },
 "162": {
  "name": "transition",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "409",
  "column": "4",
  "context": "'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#00b2f0', '#43d9be', '#066",
  "context_lines": "    foreground_strong = 'rgba(0, 0, 0, 0.9)'\n    foreground_subtle = 'rgba(0, 0, 0, 0.6)'\n    opacity = '.5'\n    opacity_hover = '.9'\n    transition = '250ms ease-in'\n    colors = (\n        '#00b2f0', '#43d9be', '#0662ab', darken('#00b2f0', 20),\n        lighten('#43d9be', 20), lighten('#7dcf30', 10), darken('#0662ab', 15),\n        '#ffd541', '#7dcf30', lighten('#00b2f0', 15), darken('#ffd541', 20)\n",
  "slicing": "    transition = '250ms ease-in'\n"
 },
 "163": {
  "name": "background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "420",
  "column": "4",
  "context": ":\n    \"\"\"A light style with strong colors\"\"\"\n\n    background = '#FFFFFF'\n    plot_background = '#FFFFFF'\n    foreground = '",
  "context_lines": "        '#ffd541', '#7dcf30', lighten('#00b2f0', 15), darken('#ffd541', 20)\n    )\n\n\nclass SolidColorStyle(Style):\n    \"\"\"A light style with strong colors\"\"\"\n\n    background = '#FFFFFF'\n    plot_background = '#FFFFFF'\n    foreground = '#000000'\n    foreground_strong = '#000000'\n    foreground_subtle = '#828282'\n",
  "slicing": "    background = '#FFFFFF'\n"
 },
 "164": {
  "name": "plot_background",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "421",
  "column": "4",
  "context": " strong colors\"\"\"\n\n    background = '#FFFFFF'\n    plot_background = '#FFFFFF'\n    foreground = '#000000'\n    foreground_strong =",
  "context_lines": "    )\n\n\nclass SolidColorStyle(Style):\n    \"\"\"A light style with strong colors\"\"\"\n\n    background = '#FFFFFF'\n    plot_background = '#FFFFFF'\n    foreground = '#000000'\n    foreground_strong = '#000000'\n    foreground_subtle = '#828282'\n    opacity = '.8'\n",
  "slicing": "    plot_background = '#FFFFFF'\n"
 },
 "165": {
  "name": "foreground",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "422",
  "column": "4",
  "context": "d = '#FFFFFF'\n    plot_background = '#FFFFFF'\n    foreground = '#000000'\n    foreground_strong = '#000000'\n    foreground_s",
  "context_lines": "class SolidColorStyle(Style):\n    \"\"\"A light style with strong colors\"\"\"\n\n    background = '#FFFFFF'\n    plot_background = '#FFFFFF'\n    foreground = '#000000'\n    foreground_strong = '#000000'\n    foreground_subtle = '#828282'\n    opacity = '.8'\n    opacity_hover = '.9'\n",
  "slicing": "    foreground = '#000000'\n"
 },
 "166": {
  "name": "foreground_strong",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "423",
  "column": "4",
  "context": "ground = '#FFFFFF'\n    foreground = '#000000'\n    foreground_strong = '#000000'\n    foreground_subtle = '#828282'\n    opacity = '.",
  "context_lines": "    \"\"\"A light style with strong colors\"\"\"\n\n    background = '#FFFFFF'\n    plot_background = '#FFFFFF'\n    foreground = '#000000'\n    foreground_strong = '#000000'\n    foreground_subtle = '#828282'\n    opacity = '.8'\n    opacity_hover = '.9'\n    transition = '400ms ease-in'\n",
  "slicing": "    foreground_strong = '#000000'\n"
 },
 "167": {
  "name": "foreground_subtle",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "424",
  "column": "4",
  "context": "= '#000000'\n    foreground_strong = '#000000'\n    foreground_subtle = '#828282'\n    opacity = '.8'\n    opacity_hover = '.9'\n    tr",
  "context_lines": "    background = '#FFFFFF'\n    plot_background = '#FFFFFF'\n    foreground = '#000000'\n    foreground_strong = '#000000'\n    foreground_subtle = '#828282'\n    opacity = '.8'\n    opacity_hover = '.9'\n    transition = '400ms ease-in'\n    colors = (\n",
  "slicing": "    foreground_subtle = '#828282'\n"
 },
 "168": {
  "name": "opacity",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "425",
  "column": "4",
  "context": "= '#000000'\n    foreground_subtle = '#828282'\n    opacity = '.8'\n    opacity_hover = '.9'\n    transition = '400ms e",
  "context_lines": "    plot_background = '#FFFFFF'\n    foreground = '#000000'\n    foreground_strong = '#000000'\n    foreground_subtle = '#828282'\n    opacity = '.8'\n    opacity_hover = '.9'\n    transition = '400ms ease-in'\n    colors = (\n        '#FF9900', '#DC3912', '#4674D1', '#109618', '#990099', '#0099C6',\n",
  "slicing": "    opacity = '.8'\n"
 },
 "169": {
  "name": "opacity_hover",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "426",
  "column": "4",
  "context": "eground_subtle = '#828282'\n    opacity = '.8'\n    opacity_hover = '.9'\n    transition = '400ms ease-in'\n    colors = (\n  ",
  "context_lines": "    foreground = '#000000'\n    foreground_strong = '#000000'\n    foreground_subtle = '#828282'\n    opacity = '.8'\n    opacity_hover = '.9'\n    transition = '400ms ease-in'\n    colors = (\n        '#FF9900', '#DC3912', '#4674D1', '#109618', '#990099', '#0099C6',\n        '#DD4477', '#74B217', '#B82E2E', '#316395', '#994499'\n",
  "slicing": "    opacity_hover = '.9'\n"
 },
 "170": {
  "name": "transition",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "427",
  "column": "4",
  "context": "'\n    opacity = '.8'\n    opacity_hover = '.9'\n    transition = '400ms ease-in'\n    colors = (\n        '#FF9900', '#DC3912', '#467",
  "context_lines": "    foreground_strong = '#000000'\n    foreground_subtle = '#828282'\n    opacity = '.8'\n    opacity_hover = '.9'\n    transition = '400ms ease-in'\n    colors = (\n        '#FF9900', '#DC3912', '#4674D1', '#109618', '#990099', '#0099C6',\n        '#DD4477', '#74B217', '#B82E2E', '#316395', '#994499'\n    )\n\n\n",
  "slicing": "    transition = '400ms ease-in'\n"
 },
 "171": {
  "name": "_op",
  "type": "NoneType",
  "class": "unknown",
  "approach": "annotation",
  "file_path": "pygal/pygal/style.py",
  "lineno": "457",
  "column": "4",
  "context": "e class for all the parametric operations\"\"\"\n\n    _op = None\n\n    def __init__(self, color, step=10, max_=None,",
  "context_lines": "    'solid_color': SolidColorStyle\n}\n\n\nclass ParametricStyleBase(Style):\n    \"\"\"Parametric Style base class for all the parametric operations\"\"\"\n\n    _op = None\n\n    def __init__(self, color, step=10, max_=None, base_style=None, **kwargs):\n        \"\"\"\n        Initialization of the parametric style.\n\n",
  "slicing": "    _op = None\n"
 },
 "172": {
  "name": "_op",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "503",
  "column": "4",
  "context": "ate a style by lightening the given color\"\"\"\n\n    _op = 'lighten'\n\n\nclass DarkenStyle(ParametricStyleBase):\n    \"\"\"C",
  "context_lines": "            return getattr(colors, self._op)(color, percent)\n\n        self.colors = list(map(modifier, range(0, max(2, step))))\n\n\nclass LightenStyle(ParametricStyleBase):\n    \"\"\"Create a style by lightening the given color\"\"\"\n\n    _op = 'lighten'\n\n\nclass DarkenStyle(ParametricStyleBase):\n    \"\"\"Create a style by darkening the given color\"\"\"\n\n    _op = 'darken'\n\n\n",
  "slicing": "    _op = 'lighten'\n"
 },
 "173": {
  "name": "_op",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "509",
  "column": "4",
  "context": "eate a style by darkening the given color\"\"\"\n\n    _op = 'darken'\n\n\nclass SaturateStyle(ParametricStyleBase):\n    \"\"",
  "context_lines": "    \"\"\"Create a style by lightening the given color\"\"\"\n\n    _op = 'lighten'\n\n\nclass DarkenStyle(ParametricStyleBase):\n    \"\"\"Create a style by darkening the given color\"\"\"\n\n    _op = 'darken'\n\n\nclass SaturateStyle(ParametricStyleBase):\n    \"\"\"Create a style by saturating the given color\"\"\"\n\n    _op = 'saturate'\n\n\n",
  "slicing": "    _op = 'darken'\n"
 },
 "174": {
  "name": "_op",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "515",
  "column": "4",
  "context": "ate a style by saturating the given color\"\"\"\n\n    _op = 'saturate'\n\n\nclass DesaturateStyle(ParametricStyleBase):\n    ",
  "context_lines": "    \"\"\"Create a style by darkening the given color\"\"\"\n\n    _op = 'darken'\n\n\nclass SaturateStyle(ParametricStyleBase):\n    \"\"\"Create a style by saturating the given color\"\"\"\n\n    _op = 'saturate'\n\n\nclass DesaturateStyle(ParametricStyleBase):\n    \"\"\"Create a style by desaturating the given color\"\"\"\n\n    _op = 'desaturate'\n\n\n",
  "slicing": "    _op = 'saturate'\n"
 },
 "175": {
  "name": "_op",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "521",
  "column": "4",
  "context": "e a style by desaturating the given color\"\"\"\n\n    _op = 'desaturate'\n\n\nclass RotateStyle(ParametricStyleBase):\n    \"\"\"C",
  "context_lines": "    \"\"\"Create a style by saturating the given color\"\"\"\n\n    _op = 'saturate'\n\n\nclass DesaturateStyle(ParametricStyleBase):\n    \"\"\"Create a style by desaturating the given color\"\"\"\n\n    _op = 'desaturate'\n\n\nclass RotateStyle(ParametricStyleBase):\n    \"\"\"Create a style by rotating the given color\"\"\"\n\n    _op = 'rotate'\n\n\n",
  "slicing": "    _op = 'desaturate'\n"
 },
 "176": {
  "name": "_op",
  "type": "str",
  "class": "build-in",
  "approach": "Pysonar2",
  "file_path": "pygal/pygal/style.py",
  "lineno": "527",
  "column": "4",
  "context": "reate a style by rotating the given color\"\"\"\n\n    _op = 'rotate'\n\n\nparametric_styles = {\n    'lighten': LightenStyl",
  "context_lines": "    \"\"\"Create a style by desaturating the given color\"\"\"\n\n    _op = 'desaturate'\n\n\nclass RotateStyle(ParametricStyleBase):\n    \"\"\"Create a style by rotating the given color\"\"\"\n\n    _op = 'rotate'\n\n\nparametric_styles = {\n    'lighten': LightenStyle,\n    'darken': DarkenStyle,\n",
  "slicing": "    _op = 'rotate'\n"
 }
}